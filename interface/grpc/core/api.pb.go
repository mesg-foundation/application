// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/mesg-foundation/core/interface/grpc/core/api.proto

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	github.com/mesg-foundation/core/interface/grpc/core/api.proto

It has these top-level messages:
	ListenEventRequest
	EventData
	ListenResultRequest
	ResultData
	ExecuteTaskRequest
	ExecuteTaskReply
	StartServiceRequest
	StartServiceReply
	StopServiceRequest
	StopServiceReply
	DeployServiceRequest
	DeployServiceReply
	DeleteServiceRequest
	DeleteServiceReply
	ListServicesRequest
	ListServicesReply
	GetServiceRequest
	GetServiceReply
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/mesg-foundation/core/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployServiceReply_Status_Type int32

const (
	// RUNNING indicates that status message belongs to an active state.
	DeployServiceReply_Status_RUNNING DeployServiceReply_Status_Type = 0
	// DONE indicates that status message belongs to completed state.
	DeployServiceReply_Status_DONE DeployServiceReply_Status_Type = 1
)

var DeployServiceReply_Status_Type_name = map[int32]string{
	0: "RUNNING",
	1: "DONE",
}
var DeployServiceReply_Status_Type_value = map[string]int32{
	"RUNNING": 0,
	"DONE":    1,
}

func (x DeployServiceReply_Status_Type) String() string {
	return proto.EnumName(DeployServiceReply_Status_Type_name, int32(x))
}
func (DeployServiceReply_Status_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0, 0}
}

// The request's data for the `ListenEvent` stream's API.
//
// **Example**
// ```json
// {
//   "serviceID":   "__SERVICE_ID__",
//   "eventFilter": "__EVENT_KEY_TO_MATCH__"
// }
// ```
type ListenEventRequest struct {
	ServiceID   string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	EventFilter string `protobuf:"bytes,2,opt,name=eventFilter" json:"eventFilter,omitempty"`
}

func (m *ListenEventRequest) Reset()                    { *m = ListenEventRequest{} }
func (m *ListenEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenEventRequest) ProtoMessage()               {}
func (*ListenEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListenEventRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenEventRequest) GetEventFilter() string {
	if m != nil {
		return m.EventFilter
	}
	return ""
}

// The data received from the stream of the `ListenEvent` API.
// The data will be received over time as long as the stream is open.
//
// **Example**
// ```json
// {
//   "eventKey":  "__EVENT_KEY__",
//   "eventData": "{\"foo\":\"bar\"}"
// }
// ```
type EventData struct {
	EventKey  string `protobuf:"bytes,1,opt,name=eventKey" json:"eventKey,omitempty"`
	EventData string `protobuf:"bytes,2,opt,name=eventData" json:"eventData,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventData) GetEventKey() string {
	if m != nil {
		return m.EventKey
	}
	return ""
}

func (m *EventData) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

// The request's data for the `ListenResult` stream API.
//
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskFilter":    "__TASK_KEY_TO_MATCH__",
//   "outputFilter":  "__OUTPUT_KEY_TO_MATCH__",
//   "tagFilters":     ["tagX"]
// }
// ```
type ListenResultRequest struct {
	ServiceID    string   `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskFilter   string   `protobuf:"bytes,2,opt,name=taskFilter" json:"taskFilter,omitempty"`
	OutputFilter string   `protobuf:"bytes,3,opt,name=outputFilter" json:"outputFilter,omitempty"`
	TagFilters   []string `protobuf:"bytes,4,rep,name=tagFilters" json:"tagFilters,omitempty"`
}

func (m *ListenResultRequest) Reset()                    { *m = ListenResultRequest{} }
func (m *ListenResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenResultRequest) ProtoMessage()               {}
func (*ListenResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListenResultRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenResultRequest) GetTaskFilter() string {
	if m != nil {
		return m.TaskFilter
	}
	return ""
}

func (m *ListenResultRequest) GetOutputFilter() string {
	if m != nil {
		return m.OutputFilter
	}
	return ""
}

func (m *ListenResultRequest) GetTagFilters() []string {
	if m != nil {
		return m.TagFilters
	}
	return nil
}

// The data received from the stream of the `ListenResult` API.
// The data will be received over time as long as the stream is open.
//
// **Example**
// ```json
// {
//   "executionID":   "__EXECUTION_ID__",
//   "taskKey":       "__TASK_KEY__",
//   "outputKey":     "__OUTPUT_KEY__",
//   "outputData":    "{\"foo\":\"bar\"}",
//   "executionTags": ["executionX", "test"]
// }
// ```
type ResultData struct {
	ExecutionID   string   `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
	TaskKey       string   `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	OutputKey     string   `protobuf:"bytes,3,opt,name=outputKey" json:"outputKey,omitempty"`
	OutputData    string   `protobuf:"bytes,4,opt,name=outputData" json:"outputData,omitempty"`
	ExecutionTags []string `protobuf:"bytes,5,rep,name=executionTags" json:"executionTags,omitempty"`
}

func (m *ResultData) Reset()                    { *m = ResultData{} }
func (m *ResultData) String() string            { return proto.CompactTextString(m) }
func (*ResultData) ProtoMessage()               {}
func (*ResultData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResultData) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

func (m *ResultData) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ResultData) GetOutputKey() string {
	if m != nil {
		return m.OutputKey
	}
	return ""
}

func (m *ResultData) GetOutputData() string {
	if m != nil {
		return m.OutputData
	}
	return ""
}

func (m *ResultData) GetExecutionTags() []string {
	if m != nil {
		return m.ExecutionTags
	}
	return nil
}

// The request's data for the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskKey":       "__TASK_KEY__",
//   "inputData":     "{\"foo\":\"bar\"}",
//   "executionTags": ["executionX", "test"]
// }
// ```
type ExecuteTaskRequest struct {
	ServiceID     string   `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskKey       string   `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	InputData     string   `protobuf:"bytes,3,opt,name=inputData" json:"inputData,omitempty"`
	ExecutionTags []string `protobuf:"bytes,4,rep,name=executionTags" json:"executionTags,omitempty"`
}

func (m *ExecuteTaskRequest) Reset()                    { *m = ExecuteTaskRequest{} }
func (m *ExecuteTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskRequest) ProtoMessage()               {}
func (*ExecuteTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecuteTaskRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ExecuteTaskRequest) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ExecuteTaskRequest) GetInputData() string {
	if m != nil {
		return m.InputData
	}
	return ""
}

func (m *ExecuteTaskRequest) GetExecutionTags() []string {
	if m != nil {
		return m.ExecutionTags
	}
	return nil
}

// The reply's data of the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__"
// }
// ```
type ExecuteTaskReply struct {
	ExecutionID string `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
}

func (m *ExecuteTaskReply) Reset()                    { *m = ExecuteTaskReply{} }
func (m *ExecuteTaskReply) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskReply) ProtoMessage()               {}
func (*ExecuteTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ExecuteTaskReply) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

// The request's data for the `StartService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StartServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StartServiceRequest) Reset()                    { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()               {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `StartService` API doesn't contain any data.
type StartServiceReply struct {
}

func (m *StartServiceReply) Reset()                    { *m = StartServiceReply{} }
func (m *StartServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StartServiceReply) ProtoMessage()               {}
func (*StartServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// The request's data for the `StopService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StopServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StopServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `StopService` API doesn't contain any data.
type StopServiceReply struct {
}

func (m *StopServiceReply) Reset()                    { *m = StopServiceReply{} }
func (m *StopServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StopServiceReply) ProtoMessage()               {}
func (*StopServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// The request's data for `DeployService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type DeployServiceRequest struct {
	// Types that are valid to be assigned to Value:
	//	*DeployServiceRequest_Url
	//	*DeployServiceRequest_Chunk
	Value isDeployServiceRequest_Value `protobuf_oneof:"value"`
}

func (m *DeployServiceRequest) Reset()                    { *m = DeployServiceRequest{} }
func (m *DeployServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceRequest) ProtoMessage()               {}
func (*DeployServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isDeployServiceRequest_Value interface {
	isDeployServiceRequest_Value()
}

type DeployServiceRequest_Url struct {
	Url string `protobuf:"bytes,2,opt,name=url,oneof"`
}
type DeployServiceRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,3,opt,name=chunk,proto3,oneof"`
}

func (*DeployServiceRequest_Url) isDeployServiceRequest_Value()   {}
func (*DeployServiceRequest_Chunk) isDeployServiceRequest_Value() {}

func (m *DeployServiceRequest) GetValue() isDeployServiceRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DeployServiceRequest) GetUrl() string {
	if x, ok := m.GetValue().(*DeployServiceRequest_Url); ok {
		return x.Url
	}
	return ""
}

func (m *DeployServiceRequest) GetChunk() []byte {
	if x, ok := m.GetValue().(*DeployServiceRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeployServiceRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeployServiceRequest_OneofMarshaler, _DeployServiceRequest_OneofUnmarshaler, _DeployServiceRequest_OneofSizer, []interface{}{
		(*DeployServiceRequest_Url)(nil),
		(*DeployServiceRequest_Chunk)(nil),
	}
}

func _DeployServiceRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeployServiceRequest)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceRequest_Url:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Url)
	case *DeployServiceRequest_Chunk:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Chunk)
	case nil:
	default:
		return fmt.Errorf("DeployServiceRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _DeployServiceRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeployServiceRequest)
	switch tag {
	case 2: // value.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceRequest_Url{x}
		return true, err
	case 3: // value.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &DeployServiceRequest_Chunk{x}
		return true, err
	default:
		return false, nil
	}
}

func _DeployServiceRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeployServiceRequest)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceRequest_Url:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case *DeployServiceRequest_Chunk:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Chunk)))
		n += len(x.Chunk)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The reply's data of `DeployService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeployServiceReply struct {
	// Types that are valid to be assigned to Value:
	//	*DeployServiceReply_Status_
	//	*DeployServiceReply_ServiceID
	//	*DeployServiceReply_ValidationError
	Value isDeployServiceReply_Value `protobuf_oneof:"value"`
}

func (m *DeployServiceReply) Reset()                    { *m = DeployServiceReply{} }
func (m *DeployServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceReply) ProtoMessage()               {}
func (*DeployServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isDeployServiceReply_Value interface {
	isDeployServiceReply_Value()
}

type DeployServiceReply_Status_ struct {
	Status *DeployServiceReply_Status `protobuf:"bytes,2,opt,name=status,oneof"`
}
type DeployServiceReply_ServiceID struct {
	ServiceID string `protobuf:"bytes,3,opt,name=serviceID,oneof"`
}
type DeployServiceReply_ValidationError struct {
	ValidationError string `protobuf:"bytes,4,opt,name=validationError,oneof"`
}

func (*DeployServiceReply_Status_) isDeployServiceReply_Value()         {}
func (*DeployServiceReply_ServiceID) isDeployServiceReply_Value()       {}
func (*DeployServiceReply_ValidationError) isDeployServiceReply_Value() {}

func (m *DeployServiceReply) GetValue() isDeployServiceReply_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DeployServiceReply) GetStatus() *DeployServiceReply_Status {
	if x, ok := m.GetValue().(*DeployServiceReply_Status_); ok {
		return x.Status
	}
	return nil
}

func (m *DeployServiceReply) GetServiceID() string {
	if x, ok := m.GetValue().(*DeployServiceReply_ServiceID); ok {
		return x.ServiceID
	}
	return ""
}

func (m *DeployServiceReply) GetValidationError() string {
	if x, ok := m.GetValue().(*DeployServiceReply_ValidationError); ok {
		return x.ValidationError
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeployServiceReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeployServiceReply_OneofMarshaler, _DeployServiceReply_OneofUnmarshaler, _DeployServiceReply_OneofSizer, []interface{}{
		(*DeployServiceReply_Status_)(nil),
		(*DeployServiceReply_ServiceID)(nil),
		(*DeployServiceReply_ValidationError)(nil),
	}
}

func _DeployServiceReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeployServiceReply)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceReply_Status_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *DeployServiceReply_ServiceID:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServiceID)
	case *DeployServiceReply_ValidationError:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ValidationError)
	case nil:
	default:
		return fmt.Errorf("DeployServiceReply.Value has unexpected type %T", x)
	}
	return nil
}

func _DeployServiceReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeployServiceReply)
	switch tag {
	case 2: // value.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeployServiceReply_Status)
		err := b.DecodeMessage(msg)
		m.Value = &DeployServiceReply_Status_{msg}
		return true, err
	case 3: // value.serviceID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceReply_ServiceID{x}
		return true, err
	case 4: // value.validationError
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceReply_ValidationError{x}
		return true, err
	default:
		return false, nil
	}
}

func _DeployServiceReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeployServiceReply)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceReply_Status_:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeployServiceReply_ServiceID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ServiceID)))
		n += len(x.ServiceID)
	case *DeployServiceReply_ValidationError:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ValidationError)))
		n += len(x.ValidationError)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeployServiceReply_Status struct {
	// message is status message.
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	// type is the type of status message.
	Type DeployServiceReply_Status_Type `protobuf:"varint,2,opt,name=type,enum=api.DeployServiceReply_Status_Type" json:"type,omitempty"`
}

func (m *DeployServiceReply_Status) Reset()                    { *m = DeployServiceReply_Status{} }
func (m *DeployServiceReply_Status) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceReply_Status) ProtoMessage()               {}
func (*DeployServiceReply_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *DeployServiceReply_Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeployServiceReply_Status) GetType() DeployServiceReply_Status_Type {
	if m != nil {
		return m.Type
	}
	return DeployServiceReply_Status_RUNNING
}

// Request's data of the `DeleteService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeleteServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *DeleteServiceRequest) Reset()                    { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()               {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `DeleteService` API doesn't contain any data.
type DeleteServiceReply struct {
}

func (m *DeleteServiceReply) Reset()                    { *m = DeleteServiceReply{} }
func (m *DeleteServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceReply) ProtoMessage()               {}
func (*DeleteServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Reply of `ListServices` API doesn't contain any data.
type ListServicesRequest struct {
}

func (m *ListServicesRequest) Reset()                    { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()               {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// The reply's data of the `ListServices` API.
//
// **Example**
// ```json
// [{
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }]
// ```
type ListServicesReply struct {
	Services []*service.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ListServicesReply) Reset()                    { *m = ListServicesReply{} }
func (m *ListServicesReply) String() string            { return proto.CompactTextString(m) }
func (*ListServicesReply) ProtoMessage()               {}
func (*ListServicesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListServicesReply) GetServices() []*service.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// The request's data for the `GetService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type GetServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *GetServiceRequest) Reset()                    { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()               {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// The reply's data of the `GetService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type GetServiceReply struct {
	Service *service.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *GetServiceReply) Reset()                    { *m = GetServiceReply{} }
func (m *GetServiceReply) String() string            { return proto.CompactTextString(m) }
func (*GetServiceReply) ProtoMessage()               {}
func (*GetServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetServiceReply) GetService() *service.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenEventRequest)(nil), "api.ListenEventRequest")
	proto.RegisterType((*EventData)(nil), "api.EventData")
	proto.RegisterType((*ListenResultRequest)(nil), "api.ListenResultRequest")
	proto.RegisterType((*ResultData)(nil), "api.ResultData")
	proto.RegisterType((*ExecuteTaskRequest)(nil), "api.ExecuteTaskRequest")
	proto.RegisterType((*ExecuteTaskReply)(nil), "api.ExecuteTaskReply")
	proto.RegisterType((*StartServiceRequest)(nil), "api.StartServiceRequest")
	proto.RegisterType((*StartServiceReply)(nil), "api.StartServiceReply")
	proto.RegisterType((*StopServiceRequest)(nil), "api.StopServiceRequest")
	proto.RegisterType((*StopServiceReply)(nil), "api.StopServiceReply")
	proto.RegisterType((*DeployServiceRequest)(nil), "api.DeployServiceRequest")
	proto.RegisterType((*DeployServiceReply)(nil), "api.DeployServiceReply")
	proto.RegisterType((*DeployServiceReply_Status)(nil), "api.DeployServiceReply.Status")
	proto.RegisterType((*DeleteServiceRequest)(nil), "api.DeleteServiceRequest")
	proto.RegisterType((*DeleteServiceReply)(nil), "api.DeleteServiceReply")
	proto.RegisterType((*ListServicesRequest)(nil), "api.ListServicesRequest")
	proto.RegisterType((*ListServicesReply)(nil), "api.ListServicesReply")
	proto.RegisterType((*GetServiceRequest)(nil), "api.GetServiceRequest")
	proto.RegisterType((*GetServiceReply)(nil), "api.GetServiceReply")
	proto.RegisterEnum("api.DeployServiceReply_Status_Type", DeployServiceReply_Status_Type_name, DeployServiceReply_Status_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Core service

type CoreClient interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error)
	// Subscribe to a stream that listens for task's result from a service.
	ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error)
	// Execute a service's task through [Core](../guide/start-here/core.md).
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error)
	// Start a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error)
	// Stop a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error)
	// Deploy a service to [Core](../guide/start-here/core.md). This will give you an unique identifier which is used to interact with the service.
	DeployService(ctx context.Context, opts ...grpc.CallOption) (Core_DeployServiceClient, error)
	// Delete a service from Core. This function only deletes a deployed service in [Core](../guide/start-here/core.md). If the service's code is on your computer, the source code will not be deleted.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error)
	// List all services already deployed in [Core](../guide/start-here/core.md).
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error)
	// Get the definition of an already-deployed service from its ID.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[0], c.cc, "/api.Core/ListenEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenEventClient interface {
	Recv() (*EventData, error)
	grpc.ClientStream
}

type coreListenEventClient struct {
	grpc.ClientStream
}

func (x *coreListenEventClient) Recv() (*EventData, error) {
	m := new(EventData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[1], c.cc, "/api.Core/ListenResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenResultClient interface {
	Recv() (*ResultData, error)
	grpc.ClientStream
}

type coreListenResultClient struct {
	grpc.ClientStream
}

func (x *coreListenResultClient) Recv() (*ResultData, error) {
	m := new(ResultData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error) {
	out := new(ExecuteTaskReply)
	err := grpc.Invoke(ctx, "/api.Core/ExecuteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error) {
	out := new(StartServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StartService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error) {
	out := new(StopServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StopService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeployService(ctx context.Context, opts ...grpc.CallOption) (Core_DeployServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[2], c.cc, "/api.Core/DeployService", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreDeployServiceClient{stream}
	return x, nil
}

type Core_DeployServiceClient interface {
	Send(*DeployServiceRequest) error
	Recv() (*DeployServiceReply, error)
	grpc.ClientStream
}

type coreDeployServiceClient struct {
	grpc.ClientStream
}

func (x *coreDeployServiceClient) Send(m *DeployServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreDeployServiceClient) Recv() (*DeployServiceReply, error) {
	m := new(DeployServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error) {
	out := new(DeleteServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error) {
	out := new(ListServicesReply)
	err := grpc.Invoke(ctx, "/api.Core/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Core service

type CoreServer interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(*ListenEventRequest, Core_ListenEventServer) error
	// Subscribe to a stream that listens for task's result from a service.
	ListenResult(*ListenResultRequest, Core_ListenResultServer) error
	// Execute a service's task through [Core](../guide/start-here/core.md).
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskReply, error)
	// Start a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StartService(context.Context, *StartServiceRequest) (*StartServiceReply, error)
	// Stop a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StopService(context.Context, *StopServiceRequest) (*StopServiceReply, error)
	// Deploy a service to [Core](../guide/start-here/core.md). This will give you an unique identifier which is used to interact with the service.
	DeployService(Core_DeployServiceServer) error
	// Delete a service from Core. This function only deletes a deployed service in [Core](../guide/start-here/core.md). If the service's code is on your computer, the source code will not be deleted.
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceReply, error)
	// List all services already deployed in [Core](../guide/start-here/core.md).
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	// Get the definition of an already-deployed service from its ID.
	GetService(context.Context, *GetServiceRequest) (*GetServiceReply, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_ListenEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenEvent(m, &coreListenEventServer{stream})
}

type Core_ListenEventServer interface {
	Send(*EventData) error
	grpc.ServerStream
}

type coreListenEventServer struct {
	grpc.ServerStream
}

func (x *coreListenEventServer) Send(m *EventData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ListenResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenResult(m, &coreListenResultServer{stream})
}

type Core_ListenResultServer interface {
	Send(*ResultData) error
	grpc.ServerStream
}

type coreListenResultServer struct {
	grpc.ServerStream
}

func (x *coreListenResultServer) Send(m *ResultData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StopService(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeployService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServer).DeployService(&coreDeployServiceServer{stream})
}

type Core_DeployServiceServer interface {
	Send(*DeployServiceReply) error
	Recv() (*DeployServiceRequest, error)
	grpc.ServerStream
}

type coreDeployServiceServer struct {
	grpc.ServerStream
}

func (x *coreDeployServiceServer) Send(m *DeployServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreDeployServiceServer) Recv() (*DeployServiceRequest, error) {
	m := new(DeployServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Core_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _Core_ExecuteTask_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _Core_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Core_StopService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Core_DeleteService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Core_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Core_GetService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvent",
			Handler:       _Core_ListenEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenResult",
			Handler:       _Core_ListenResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployService",
			Handler:       _Core_DeployService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/mesg-foundation/core/interface/grpc/core/api.proto",
}

func init() {
	proto.RegisterFile("github.com/mesg-foundation/core/interface/grpc/core/api.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x25, 0x2d, 0x5a, 0xb2, 0x47, 0xb2, 0x2d, 0xaf, 0x6f, 0x2a, 0xd1, 0x1a, 0xc2, 0xb6, 0x0f,
	0x86, 0xd1, 0x4a, 0xae, 0xec, 0xa2, 0x45, 0x51, 0xc3, 0xa8, 0x23, 0xc5, 0x32, 0x1c, 0x28, 0x00,
	0xa5, 0xbc, 0xe4, 0x8d, 0x56, 0xd6, 0x32, 0x61, 0x5a, 0x64, 0xb8, 0x4b, 0x21, 0xca, 0x57, 0xe4,
	0x2d, 0x8f, 0xf9, 0x81, 0xfc, 0x51, 0x7e, 0x26, 0xd8, 0x0b, 0xa9, 0xa5, 0xa8, 0xf8, 0xf2, 0x24,
	0xcc, 0x99, 0x99, 0xb3, 0x87, 0x67, 0x67, 0x07, 0x82, 0xd3, 0x91, 0xc7, 0x6e, 0xe3, 0xeb, 0xc6,
	0x30, 0xb8, 0x6f, 0xde, 0x13, 0x3a, 0xfa, 0xe3, 0x26, 0x88, 0xc7, 0xef, 0x5c, 0xe6, 0x05, 0xe3,
	0xe6, 0x30, 0x88, 0x48, 0xd3, 0x1b, 0x33, 0x12, 0xdd, 0xb8, 0x43, 0xd2, 0x1c, 0x45, 0xe1, 0x50,
	0x62, 0x6e, 0xe8, 0x35, 0xc2, 0x28, 0x60, 0x01, 0x2a, 0xb8, 0xa1, 0x67, 0xff, 0xf5, 0x18, 0x07,
	0x25, 0xd1, 0xc4, 0x1b, 0xa6, 0xbf, 0xb2, 0x17, 0x0f, 0x00, 0xbd, 0xf2, 0x28, 0x23, 0xe3, 0xce,
	0x84, 0x8c, 0x99, 0x43, 0xde, 0xc7, 0x84, 0x32, 0xf4, 0x33, 0xac, 0xaa, 0xb2, 0xcb, 0x76, 0xcd,
	0xac, 0x9b, 0x07, 0xab, 0xce, 0x0c, 0x40, 0x75, 0x28, 0x13, 0x5e, 0xfd, 0xd2, 0xf3, 0x19, 0x89,
	0x6a, 0x4b, 0x22, 0xaf, 0x43, 0xb8, 0x03, 0xab, 0x82, 0xaf, 0xed, 0x32, 0x17, 0xd9, 0xb0, 0x22,
	0x72, 0x57, 0x64, 0xaa, 0xb8, 0xd2, 0x98, 0x1f, 0x44, 0x92, 0x42, 0x45, 0x34, 0x03, 0xf0, 0x67,
	0x13, 0xb6, 0xa4, 0x3a, 0x87, 0xd0, 0xd8, 0x7f, 0xa2, 0xbc, 0x7d, 0x00, 0xe6, 0xd2, 0xbb, 0x8c,
	0x3a, 0x0d, 0x41, 0x18, 0x2a, 0x41, 0xcc, 0xc2, 0x38, 0xd1, 0x5f, 0x10, 0x15, 0x19, 0x4c, 0x72,
	0x8c, 0x64, 0x40, 0x6b, 0x56, 0xbd, 0x20, 0x39, 0x12, 0x04, 0x7f, 0x35, 0x01, 0xa4, 0x26, 0xf1,
	0x89, 0xdc, 0x91, 0x0f, 0x64, 0x18, 0x73, 0xb7, 0x53, 0x49, 0x3a, 0x84, 0x6a, 0x50, 0xe2, 0x12,
	0xb8, 0x07, 0x52, 0x51, 0x12, 0xf2, 0x8f, 0x91, 0x47, 0xf3, 0x9c, 0xd4, 0x32, 0x03, 0xb8, 0x10,
	0x19, 0x08, 0x87, 0x2c, 0xf9, 0x31, 0x33, 0x04, 0xfd, 0x06, 0x6b, 0xe9, 0x31, 0x03, 0x77, 0x44,
	0x6b, 0xcb, 0x42, 0x6b, 0x16, 0xc4, 0x9f, 0x4c, 0x40, 0x1d, 0x81, 0x90, 0x81, 0x4b, 0xef, 0x9e,
	0xe6, 0xe3, 0x83, 0x92, 0xbd, 0x71, 0xa2, 0x49, 0x49, 0x4e, 0x81, 0xbc, 0x24, 0x6b, 0x91, 0xa4,
	0x13, 0xa8, 0x66, 0x14, 0x85, 0xfe, 0xf4, 0x71, 0x1b, 0xf1, 0x31, 0x6c, 0xf5, 0x99, 0x1b, 0xb1,
	0xbe, 0x54, 0xf9, 0xa4, 0x0f, 0xc1, 0x5b, 0xb0, 0x99, 0x6d, 0x0a, 0xfd, 0x29, 0x6e, 0x01, 0xea,
	0xb3, 0x20, 0x7c, 0x16, 0x11, 0x82, 0x6a, 0xa6, 0x87, 0xf3, 0x5c, 0xc1, 0x76, 0x9b, 0x84, 0x7e,
	0x30, 0x9d, 0x63, 0x42, 0x50, 0x88, 0x23, 0x5f, 0x3a, 0xd7, 0x35, 0x1c, 0x1e, 0xa0, 0x5d, 0x58,
	0x1e, 0xde, 0xc6, 0xe3, 0x3b, 0xe1, 0x59, 0xa5, 0x6b, 0x38, 0x32, 0x3c, 0x2f, 0xc1, 0xf2, 0xc4,
	0xf5, 0x63, 0x82, 0xbf, 0x2c, 0x01, 0x9a, 0x63, 0xe3, 0xbe, 0xfc, 0x03, 0x45, 0xca, 0x5c, 0x16,
	0x53, 0x41, 0x57, 0x6e, 0xed, 0x37, 0xf8, 0xe3, 0xcf, 0x17, 0x36, 0xfa, 0xa2, 0xaa, 0x6b, 0x38,
	0xaa, 0x1e, 0xed, 0xeb, 0xdf, 0x53, 0x50, 0x5a, 0xb4, 0x3b, 0x3e, 0x84, 0x8d, 0x89, 0xeb, 0x7b,
	0x72, 0x4f, 0x74, 0xa2, 0x28, 0x88, 0xe4, 0x8c, 0x75, 0x0d, 0x67, 0x3e, 0x61, 0x7f, 0x84, 0xa2,
	0xe4, 0xe7, 0x93, 0x71, 0x4f, 0x28, 0x75, 0x47, 0x44, 0x79, 0x94, 0x84, 0xe8, 0x6f, 0xb0, 0xd8,
	0x34, 0x24, 0x42, 0xe7, 0x7a, 0xeb, 0xd7, 0x87, 0x75, 0x36, 0x06, 0xd3, 0x90, 0x38, 0xa2, 0x01,
	0xff, 0x02, 0x16, 0x8f, 0x50, 0x19, 0x4a, 0xce, 0x9b, 0x5e, 0xef, 0xb2, 0x77, 0x51, 0x35, 0xd0,
	0x0a, 0x58, 0xed, 0xd7, 0xbd, 0x4e, 0xd5, 0x9c, 0x39, 0x74, 0xc2, 0xed, 0xf6, 0x09, 0x23, 0xcf,
	0xba, 0xb8, 0x6d, 0x6e, 0x6b, 0xa6, 0x8b, 0x5f, 0xdd, 0x8e, 0xdc, 0x2e, 0x0a, 0xa3, 0x8a, 0x0a,
	0xff, 0x0f, 0x9b, 0x59, 0x98, 0x5f, 0xc1, 0xef, 0xb0, 0xa2, 0xe8, 0x68, 0xcd, 0xac, 0x17, 0x0e,
	0xca, 0xad, 0x6a, 0x23, 0xd9, 0xa4, 0x09, 0x69, 0x5a, 0x81, 0xff, 0x84, 0xcd, 0x0b, 0xf2, 0xbc,
	0x21, 0x3d, 0x85, 0x0d, 0xbd, 0x85, 0x9f, 0x79, 0x08, 0x25, 0x95, 0x17, 0xe5, 0x8b, 0x8e, 0x4c,
	0x0a, 0x5a, 0xdf, 0x2c, 0xb0, 0x5e, 0x04, 0x11, 0x41, 0xff, 0x42, 0x59, 0x5b, 0xe8, 0x68, 0x4f,
	0x5c, 0x41, 0x7e, 0xc5, 0xdb, 0xeb, 0x22, 0x91, 0x6e, 0x69, 0x6c, 0x1c, 0x99, 0xe8, 0x14, 0x2a,
	0xfa, 0xba, 0x45, 0x35, 0xad, 0x39, 0xb3, 0x81, 0xed, 0x0d, 0x91, 0x99, 0x6d, 0x40, 0xd1, 0x7e,
	0x06, 0x65, 0xed, 0x49, 0xab, 0xa3, 0xf3, 0x6b, 0xc7, 0xde, 0xc9, 0x27, 0xf8, 0x75, 0x18, 0xe8,
	0x1c, 0x2a, 0xfa, 0x43, 0x55, 0xe7, 0x2f, 0x78, 0xf0, 0xf6, 0xee, 0x82, 0x8c, 0xe4, 0x38, 0x83,
	0xb2, 0xf6, 0x46, 0x95, 0x88, 0xfc, 0x4b, 0x57, 0x22, 0x72, 0xcf, 0xd9, 0x40, 0x97, 0xb0, 0x96,
	0x99, 0x58, 0xf4, 0xd3, 0xa2, 0x29, 0x96, 0x24, 0x7b, 0x3f, 0x18, 0x70, 0x6c, 0x1c, 0x98, 0x47,
	0x26, 0xea, 0x70, 0x2a, 0x6d, 0xec, 0x52, 0xaa, 0xfc, 0x00, 0xa7, 0x54, 0xb9, 0x29, 0x15, 0xb6,
	0xe8, 0x03, 0xa9, 0x5d, 0xcb, 0xdc, 0xe8, 0x2a, 0x5b, 0x72, 0xd3, 0x8b, 0x0d, 0xf4, 0x1f, 0xc0,
	0x6c, 0xbc, 0x90, 0xac, 0xcb, 0x8d, 0xa8, 0xbd, 0x9d, 0xc3, 0x45, 0xf7, 0x79, 0xf1, 0xad, 0xc5,
	0xff, 0x43, 0x5c, 0x17, 0xc5, 0x9f, 0x86, 0xe3, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x45,
	0xd6, 0xf6, 0xb1, 0x08, 0x00, 0x00,
}
