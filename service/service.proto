syntax = "proto3";

package service;

message Service {
  string name = 1;                          // Name of the service
  string description = 2;                   // Description of the service
  map<string, Task> tasks = 5;              // Map of tasks that the service can execute
  map<string, Event> events = 6;            // Map of events that the service can emits
  map<string, Dependency> dependencies = 7; // Docker dependencies that the service requires
  Dependency configuration = 8;             // Docker configurations for the service
  string repository = 9;                    // Repository where the source code of this service is accessible
}

message Task {
  string name = 1;                    // Name of the task
  string description = 2;             // Description of the task
  map<string, Parameter> inputs = 6;  // Map of inputs that can be given for this task
  map<string, Output> outputs = 7;    // Map of outputs that the task can returns as result
}

message Event {
  string name = 1;                  // Name of the event
  string description = 2;           // Description of the event
  map<string, Parameter> data = 3;  // Map of data associated to this event
}

message Output {
  string name = 1;                  // Name of the output
  string description = 2;           // Description of the output
  map<string, Parameter> data = 3;  // Map of data associated to this output
}

message Parameter {
  string name = 1;        // Name of the parameter
  string description = 2; // Description of the parameter
  string type = 3;        // Type of the parameter `String`, `Number`, `Boolean` or `Object`
  bool optional = 4;      // Mark this parameter as optional
}

message Dependency {
  string image = 1;                 // Docker image name or sha
  repeated string volumes = 2;      // List of Docker volumes 
  repeated string volumesfrom = 3;  // List of volumes mounted from other dependencies
  repeated string ports = 4;        // List of ports that the container needs to expose
  string command = 5;               // Command needed to run the container
}