// Code generated by go-bindata.
// sources:
// service/assets/schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xea\x36\x14\x7f\xe7\x53\x58\x2e\x0f\xed\x5a\x4a\xf7\x32\x69\xbc\x54\x5d\x85\xa6\x6a\x1d\x54\xb0\x6a\xd2\x10\x9d\x4c\x72\x02\xee\x12\x3b\x75\x1c\x34\xd6\xf1\xdd\xaf\x92\x90\x60\x27\x36\x09\x6d\xa9\xae\x2e\x17\xe9\x4a\xb9\xe7\xff\x39\x3e\xfe\x9d\xe3\xbe\xb6\x10\xc2\xed\xc8\x59\x40\x40\x70\x0f\xe1\x85\x94\x61\xaf\xdb\x7d\x8e\x38\xeb\x64\xd4\x4b\x2e\xe6\x5d\x57\x10\x4f\x76\xae\x7e\xea\x66\xb4\x13\x7c\x91\xe8\xc9\x55\x08\x89\x12\x9f\x3d\x83\x23\x33\x9a\x80\x97\x98\x0a\x70\x71\x0f\x4d\x5a\x08\x21\x84\x19\x09\x00\xb7\x10\x9a\xa6\x7c\xe2\xba\x54\x52\xce\x88\xff\x20\x78\x08\x42\x52\x88\x70\x0f\x79\xc4\x8f\x20\x15\x08\x55\xf2\x6b\x66\x62\x09\x22\xa2\x9c\x15\x04\xc5\x77\x24\x05\x65\x73\x9c\x92\xd7\x17\x8a\x47\xbb\xec\x45\x4e\x0f\x28\xbb\x07\x36\x97\x0b\xdc\x43\x3f\x6a\x16\x5c\x88\x1c\x41\x43\xb9\x87\xd3\x25\x8d\xe8\x8c\xfa\x54\xae\x54\x8d\xb6\x00\x2f\xd1\x38\xe9\xba\xe0\x51\x96\xa6\x1e\x75\x15\x59\xcd\x46\x18\xcf\x7c\x1a\x2d\xea\x0d\xe4\x82\x9a\xb6\x80\x90\x47\x54\x72\xb1\x6a\x1a\x33\x2c\x81\xc9\x48\x95\xe6\x0c\x86\x5e\x71\x76\xc9\xef\x75\x6b\x82\xc5\xbe\x8f\x73\xe5\x94\x57\x7c\x99\xbb\xa1\xe0\xd5\x9d\x7a\x21\x18\x12\x29\x41\xb0\x87\x6a\x13\x14\x22\x4f\x13\xd2\xf9\xef\xa6\xf3\xd7\xdf\x9d\xe9\x79\xbb\xc2\xb6\x96\x2c\xcd\x15\x6b\xb2\xeb\x96\xe9\x3b\xff\x9a\x6a\xa5\x92\x24\xfa\xe7\x48\x2a\x95\xa4\xfa\xf6\x42\xb9\x10\x02\x73\x81\x39\x7a\x48\xb6\xa4\x1b\x25\x5c\x93\xec\xce\x44\x2d\x49\x16\x61\xae\xf4\xfa\x57\xf0\xab\xe0\xd0\x80\xcc\x41\xad\xcb\xb4\x52\x89\xb5\x56\x09\x87\x33\x8f\xce\x63\x41\xca\x30\x52\x1b\x51\x2b\x37\x96\x9a\xc2\x8a\x94\x82\x89\x46\xbc\xb1\x41\x9d\x0b\x1e\x89\x7d\x99\xb0\x6e\xee\xef\xb7\x74\x60\x71\xa0\xa5\x8a\x95\x72\x68\xa2\x08\xe1\xc7\x71\x7f\x34\x56\x09\x7f\x0e\x47\xbf\x95\x48\x83\xe1\xa0\x8f\x8d\x8d\x61\x00\xb7\x83\x46\x3b\x1e\x3e\x8e\x6e\xfb\x2a\xe5\x76\x38\xf8\xe3\xe6\x6e\xd0\x1f\x35\x0c\x98\x08\x12\x80\x04\xf1\xcd\xdd\xfb\x1d\x81\xec\x15\x0c\xda\x79\x63\xb6\xae\x4a\xe4\x69\xc5\x86\x61\xe8\x6b\xfc\xd2\x44\x37\x26\xa3\x0e\x38\xf5\xb7\x2e\x7b\xb3\xce\xf7\x77\x9b\xe5\x61\x56\xb5\x3a\x9b\x33\xce\x7d\x20\xac\x99\xd1\x8d\x52\x93\x20\xab\xda\xa6\x4b\xa3\x71\xc7\x76\xcd\xe4\x72\xc4\xc1\x0c\x84\x8d\xfb\xcb\x26\x0d\x0b\x7b\x98\x75\x97\x81\x59\x69\x00\x54\xba\xf5\x63\x5b\xd1\x5b\xbb\xfe\xbf\xcf\x98\xf2\xe0\x23\xc7\x93\x65\x2e\x41\x40\x65\x09\x3f\x50\xcd\xb1\xe5\xf7\x3b\x61\x3f\xb5\xff\x7f\x3a\x9d\x5c\x75\x7e\x9e\xfe\x30\xb9\x9c\x5e\xa7\x5f\xe7\x67\xa7\xe8\xf4\xf7\xfe\xf8\xd7\xb3\xb3\xeb\xf6\xb6\x40\x4a\xe3\x60\x17\x96\xe0\x27\x01\x7d\xae\x5b\xf8\x17\x9c\x58\xf2\x4f\xf6\xba\x24\x3e\x75\xc9\xe7\xb8\x35\x4e\xf9\x74\x5b\xfa\xa8\x46\x32\x62\x29\xe6\xb1\x0c\x63\x19\x15\x53\xaa\xb6\xef\x0c\x70\x69\xc5\x33\xbd\x73\x6c\xb0\xd8\x48\x7d\x09\x82\x7a\x94\xcc\x7c\xab\xf3\x0a\xf0\xa9\xea\x21\x59\xbd\x59\xb7\x74\x9d\x91\x7d\xcd\x4a\x25\x1b\xae\x7c\x45\x4b\x23\x84\xcc\x8b\x9f\x12\x02\x65\xe9\x21\x35\x0a\x42\x59\x2d\x8c\xb6\x22\x70\x04\x7c\x94\xb1\xbc\x7d\x2c\x75\x3d\xa6\x6d\xc4\x25\x92\x1c\xcd\x36\x92\x26\x6b\xb1\xd7\xbc\x93\x0a\x0f\xef\x18\xbd\x3a\x62\x66\x2f\xf1\xc3\x42\xa6\x7a\xd0\x5f\x2d\x5e\x1e\x08\xb4\xf2\xa5\xa3\x09\x68\x19\x7a\x64\x1f\x94\x31\x9e\xaf\xf2\x90\x3d\xf4\x82\x95\xbd\xc9\xf7\x98\xfc\xd5\x3f\xf9\x95\x2b\xe2\xf0\x20\x20\xcc\x7d\xd3\xfc\xe3\x7e\x1c\x54\x8f\xb4\xfa\x62\x44\x35\xaf\x46\x54\x7a\x39\x6a\x11\x10\x21\xc8\xaa\x8a\x92\x31\xa3\x2f\x31\xdc\x49\x08\x92\x00\xa4\x88\xab\xd8\x48\x37\x4c\x03\xa4\xed\xc6\x17\xfb\x5d\x37\x77\xd5\xa6\x10\x9e\xe0\xc1\xf7\x62\x84\x5c\x54\x87\xef\x91\x94\x41\xc7\x87\x56\xf2\x6f\xfd\x25\x00\x00\xff\xff\x77\x22\x71\x67\x73\x18\x00\x00")

func serviceAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceAssetsSchemaJson,
		"service/assets/schema.json",
	)
}

func serviceAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/assets/schema.json", size: 6259, mode: os.FileMode(420), modTime: time.Unix(1530266530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/assets/schema.json": serviceAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"schema.json": &bintree{serviceAssetsSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

