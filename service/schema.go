// Code generated by go-bindata.
// sources:
// service/schema.json
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x4f\xdb\x30\x14\xbf\xf7\x53\x58\xa6\x07\x18\x94\xb2\xcb\xa4\xf5\x82\x18\xaa\x26\x34\xd6\xa2\x76\x68\xd2\xaa\x30\xb9\xcd\x4b\x6b\x96\xd8\xc1\x71\xaa\x75\x8c\xef\x3e\x25\x69\x52\xa7\xb1\x93\x14\x5a\xb4\x0d\x72\x80\xf0\xfe\xf9\xfd\xfd\xf9\x85\xfb\x06\x42\xb8\x19\x4c\x66\xe0\x11\xdc\x41\x78\x26\xa5\xdf\x69\xb7\x6f\x03\xce\x5a\x09\xf5\x98\x8b\x69\xdb\x16\xc4\x91\xad\x93\x77\xed\x84\xb6\x87\x8f\x22\x3d\xb9\xf0\x21\x52\xe2\xe3\x5b\x98\xc8\x84\x26\xe0\x2e\xa4\x02\x6c\xdc\x41\xa3\x06\x42\x08\x61\x46\x3c\x88\x79\x08\x61\x1b\x7c\x60\x36\xb0\x09\x85\x00\x37\x10\xb2\x62\x1d\x62\xdb\x54\x52\xce\x88\x7b\x25\xb8\x0f\x42\x46\xdc\x0e\x72\x88\x1b\x40\x2c\xe0\xab\xe4\xfb\xc4\xd4\x1c\x44\x40\x39\xcb\x08\x8a\x3f\x81\x14\x94\x4d\x71\x4c\x7e\x38\x52\xbc\x30\xcb\x1e\xa5\x74\x8f\xb2\x4b\x60\x53\x39\xc3\x1d\xf4\x36\x67\xc1\x86\x60\x22\xa8\x2f\x37\x38\x74\x4e\x03\x3a\xa6\x2e\x95\x0b\x55\xa3\x29\xc0\x89\x34\xf6\xda\x36\x38\x94\xc5\xa1\x07\x6d\x45\x36\x67\xc3\x0f\xc7\x2e\x0d\x66\xd5\x06\x52\xc1\x9c\x36\xcc\x81\xc9\x40\x55\xe6\x0c\xfa\x4e\x56\x9d\xe8\xb9\x5f\x05\xc1\x42\xd7\xc5\xa9\x72\xcc\xcb\xde\xf4\xf5\xce\x78\x55\x35\xcc\x04\x7d\x22\x25\x08\x76\x55\x2c\x69\x26\x72\x33\x22\xad\x5f\x67\xad\x6f\xdf\x5b\xd6\x61\xb3\xc0\x36\x26\x20\x8e\x15\xe7\x64\x1f\x1a\xba\xf7\xf4\xcd\xca\xa5\x4a\x92\xe0\xc7\x0b\xc9\x54\x14\xea\xe3\x13\x95\x1b\x62\xcd\x24\xac\x05\x5d\x2b\xe0\x8a\x60\x4b\x03\xdd\x4e\xb6\x0b\xc0\x95\x71\xa8\x47\xa6\xa0\xa6\xcb\xca\x97\xa9\xa4\x3e\x89\xaa\xa6\x2e\x06\xf8\xc9\xf8\x45\x18\xca\x6a\x92\x97\xc5\x13\xee\x79\x84\xd9\x35\x0e\x29\x35\x33\xe7\x6e\xe8\x69\x42\xd0\xce\x41\xfa\x94\xcd\x43\x26\x53\xa0\x28\x9e\x11\x21\xc8\xa2\x10\x7d\x2c\x12\x32\x7a\x17\xc2\x85\x04\x2f\x72\x4a\x8a\x10\xb4\x62\x74\x29\xa0\x3b\xa6\x22\x05\xcb\x44\x14\x68\xeb\x14\xab\x4e\xe2\x1c\xc1\xbd\xd7\xe4\x6d\x9a\x3c\x9f\x0b\xf9\xda\x73\xd5\x69\x2b\x45\xe7\xe4\x77\xf4\x33\x4e\x05\x56\x90\x5e\x59\x97\xb4\xab\x88\x69\x0b\xb2\xc1\x21\xa1\x2b\x23\xd6\xd9\xe5\xe5\x8a\x0e\x2c\xf4\x72\x55\xc1\x4a\x22\x73\xa2\x08\xe1\xeb\x61\x77\x30\x54\x09\x5f\xfb\x83\x4f\x6b\xa4\x5e\xbf\xd7\xc5\xda\x5b\x46\xb3\xf7\xec\xd4\xdb\x61\xff\x7a\x70\xde\x55\x29\xe7\xfd\xde\x97\xb3\x8b\x5e\x77\x50\xd3\x61\x22\x88\x07\x12\xc4\x7f\xb7\x44\x94\x38\xb2\x91\x33\xa8\xf4\x9e\x5d\x1d\xb5\x3e\x0b\x05\x1b\x25\x57\x2e\xd2\x2c\xfb\xda\x60\x4c\xd3\xa9\x81\x13\xc3\xea\xff\x64\xb3\xdc\x4f\xb2\x56\x65\x73\xcc\xb9\x0b\x84\xd5\x33\xba\x54\xaa\xe3\xa4\x16\xdc\x0a\x43\x93\xe3\x0e\xcd\x9a\xd1\x70\x84\xde\x18\x84\x89\xfb\x61\x19\x86\x81\xdd\x4f\xba\x4b\xc3\x2c\x34\x00\x5a\x9b\xfa\xa1\x29\xe9\x8d\xb2\xbf\x37\xd9\x79\x1d\xd8\xe6\xae\x6b\x58\x72\xc1\xa3\x72\x0d\x3f\x50\x45\xd9\xd2\xf9\x8e\xd8\x37\xcd\xdf\x37\xfb\xa3\x93\xd6\x7b\xeb\xcd\xe8\xd8\x3a\x8d\xdf\x0e\x0f\xf6\xd1\xfe\xe7\xee\xf0\xe3\xc1\xc1\x69\x73\x95\x20\xa5\x71\xb0\x0d\x73\x70\x23\x87\x9e\xf7\x58\xf8\x09\x93\x50\xf2\x67\x3e\x75\x4e\x5c\x6a\x93\xe7\x39\x36\x7f\x3d\x2b\x5f\x99\x5b\x6b\x24\x2d\x96\x62\x1e\x4a\x3f\x94\x41\x76\x4b\x55\xf6\x9d\x06\x2e\x8d\x78\x96\xef\x1c\x13\x2c\xd6\x52\x9f\x83\xa0\x0e\x25\x63\xd7\x78\x78\x01\xf8\x54\x75\x9f\x2c\x1e\xad\xbb\x36\xce\xc8\xfc\xa9\x1c\x4b\xd6\xfc\x50\xcc\x5a\x1a\x21\xa4\x70\x2c\xad\x0b\x94\xc5\x45\xaa\xe5\x84\xb2\x5a\x68\x6d\x05\x30\x11\xb0\x2d\x63\x69\xfb\xec\xe2\x23\xfb\x1f\xdb\x46\x6c\x22\xc9\x8b\xd9\x46\xe2\x60\x0d\xf6\xea\x77\x52\x76\xc2\x13\xae\xde\x3c\x62\x26\xff\xd6\xdb\x2d\x64\xaa\x85\xfe\x6b\xf1\x72\x47\xa0\x95\x2e\x1d\x75\x40\x4b\xd3\x23\x9b\xa0\x4c\xbe\xbe\xd1\x07\x6b\xe3\xe1\x4f\x00\x00\x00\xff\xff\x48\x28\xeb\x7b\x82\x18\x00\x00")

func serviceSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceSchemaJson,
		"service/schema.json",
	)
}

func serviceSchemaJson() (*asset, error) {
	bytes, err := serviceSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/schema.json", size: 6274, mode: os.FileMode(420), modTime: time.Unix(1525950493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/schema.json": serviceSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"schema.json": &bintree{serviceSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

