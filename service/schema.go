// Code generated by go-bindata.
// sources:
// service/schema.json
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xea\x36\x14\x7f\xe7\x53\x58\x2e\x0f\xed\x5a\x4a\xf7\x32\x69\xbc\x54\x5d\x85\xa6\x6a\x1d\x54\xb0\x6a\xd2\x10\x9d\x4c\x72\x02\xee\x12\x3b\x75\x1c\x34\xd6\xf1\xdd\xaf\x92\x90\x60\x27\x36\x09\x6d\xa9\xae\x2e\x17\xe9\x4a\xb9\xe7\x9f\xcf\x39\x3e\xe7\x77\x8e\xfb\xda\x42\x08\xb7\x23\x67\x01\x01\xc1\x3d\x84\x17\x52\x86\xbd\x6e\xf7\x39\xe2\xac\x93\x51\x2f\xb9\x98\x77\x5d\x41\x3c\xd9\xb9\xfa\xa9\x9b\xd1\x4e\xf0\x45\xa2\x27\x57\x21\x24\x4a\x7c\xf6\x0c\x8e\xcc\x68\x02\x5e\x62\x2a\xc0\xc5\x3d\x34\x69\x21\x84\x10\x66\x24\x80\x94\x87\x10\x76\x21\x04\xe6\x02\x73\x28\x44\xb8\x85\xd0\x34\xd5\x21\xae\x4b\x25\xe5\x8c\xf8\x0f\x82\x87\x20\x64\xc2\xed\x21\x8f\xf8\x11\xa4\x02\xa1\x4a\x7e\xcd\x4c\x2d\x41\x44\x94\xb3\x82\xa0\xf8\x13\x49\x41\xd9\x1c\xa7\xe4\xf5\x85\xe2\x85\x5d\xf6\x22\xa7\x07\x94\xdd\x03\x9b\xcb\x05\xee\xa1\x1f\x35\x0b\x2e\x44\x8e\xa0\xa1\xdc\xe3\xd0\x25\x8d\xe8\x8c\xfa\x54\xae\x54\x8d\xb6\x00\x2f\xd1\x38\xe9\xba\xe0\x51\x96\x86\x1e\x75\x15\x59\xcd\x46\x18\xcf\x7c\x1a\x2d\xea\x0d\xe4\x82\x9a\x36\x2c\x81\xc9\x48\x55\xe6\x0c\x86\x5e\x71\x3b\xc9\xef\x75\x1b\x04\x8b\x7d\x1f\xe7\xca\x29\xaf\xf8\x32\xdf\x77\xc1\xab\xbb\xc3\x42\x30\x24\x52\x82\x60\x0f\xd5\x2b\x2d\x44\x9e\x26\xa4\xf3\xdf\x4d\xe7\xaf\xbf\x3b\xd3\xf3\x76\x85\x6d\x4d\x40\x1a\x2b\xd6\x64\xd7\x2d\xd3\x77\xfe\x35\xd5\x52\x25\x49\xf4\xcf\x91\x64\x2a\x09\xf5\xed\x89\xd2\x9a\xd8\xd0\x09\xa5\xa0\x1b\x05\x5c\x13\xec\xce\x40\x2d\x41\x16\x6e\xae\xf4\xfc\x57\x10\xaa\xe0\xd0\x80\xcc\x41\xcd\xcb\xb4\x92\x89\xb5\x96\x09\x87\x33\x8f\xce\x63\x41\xca\xa0\x50\xeb\x51\x2b\x37\x96\x9a\xc2\x8a\x94\x82\x70\x46\xf4\xb0\x01\x97\x0b\x1e\x89\x7d\x99\xb0\x6e\xee\xef\xb7\x74\x60\x71\xa0\x85\x8a\x95\x74\x68\xa2\x08\xe1\xc7\x71\x7f\x34\x56\x09\x7f\x0e\x47\xbf\x95\x48\x83\xe1\xa0\x8f\x8d\x85\x61\x80\xaa\x83\x7a\x3b\x1e\x3e\x8e\x6e\xfb\x2a\xe5\x76\x38\xf8\xe3\xe6\x6e\xd0\x1f\x35\x74\x98\x08\x12\x80\x04\xf1\xcd\xf5\xfd\x0e\x47\xf6\x72\x06\xed\xec\x98\xed\x51\x25\xf2\xb4\x62\xc3\x30\xc2\x35\x7e\x69\x3e\x1b\x83\x51\x47\xac\xfa\x5b\x97\x4f\xb3\x4e\xeb\x77\x9b\xe5\x61\x96\xb5\x3a\x9b\x33\xce\x7d\x20\xac\x99\xd1\x8d\x52\x13\x27\xab\xda\xa6\xa6\xd1\xb8\x63\xbb\x66\xd2\x1c\x71\x30\x03\x61\xe3\xfe\xb2\x09\xc3\xc2\x1e\x66\xd5\x65\x60\x56\x0a\x00\x95\xba\x7e\x6c\x4b\x7a\x6b\xd7\xff\xf7\x19\x53\x1e\x7c\xe4\x78\xb2\xcc\x25\x08\xa8\x2c\xe1\x07\xaa\xb9\xb6\xbc\xbf\x13\xf6\x53\xfb\xff\xa7\xd3\xc9\x55\xe7\xe7\xe9\x0f\x93\xcb\xe9\x75\xfa\x75\x7e\x76\x8a\x4e\x7f\xef\x8f\x7f\x3d\x3b\xbb\x6e\x6f\x13\xa4\x14\x0e\x76\x61\x09\x7e\xe2\xd0\xe7\x1e\x0b\xff\x82\x13\x4b\xfe\xc9\xa7\x2e\x89\x4f\x5d\xf2\x39\xc7\x1a\xa7\x7c\xba\x2d\x7d\x54\x21\x19\xb1\x14\xf3\x58\x86\xb1\x8c\x8a\x29\x55\x5b\x77\x06\xb8\xb4\xe2\x99\x5e\x39\x36\x58\x6c\xa4\xbe\x04\x41\x3d\x4a\x66\xbe\xf5\xf0\x0a\xf0\xa9\xea\x21\x59\xbd\x59\xb7\xd4\xce\xc8\xbe\x66\xa5\x92\x0d\x57\xbe\xa2\xa4\x11\x42\xe6\xc5\x4f\x71\x81\xb2\xf4\x92\x1a\x39\xa1\xac\x16\x46\x5b\x11\x38\x02\x3e\xca\x58\x5e\x3e\x96\xbc\x1e\xd3\x36\xe2\x12\x49\x8e\x66\x1b\x49\x83\xb5\xd8\x6b\x5e\x49\xc5\x09\xef\x18\xbd\x3a\x62\x66\x2f\xf1\xc3\x42\xa6\x7a\xd1\x5f\x2d\x5e\x1e\x08\xb4\xf2\xa5\xa3\x09\x68\x19\x6a\x64\x1f\x94\x31\xde\xaf\xf2\x90\x3d\xf4\x82\x95\xbd\xc9\xf7\x98\xfc\xd5\x3f\xe0\x95\x33\xe2\xf0\x20\x20\xcc\x7d\xd3\xfc\xe3\x7e\x1c\x54\xaf\xb4\xfa\x62\x44\x35\xaf\x46\x54\x7a\x39\x6a\x1e\x10\x21\xc8\xaa\x8a\x92\x31\xa3\x2f\x31\xdc\x49\x08\x12\x07\xa4\x88\xab\xd8\x48\x37\x4c\x03\xa4\xed\xc6\x17\x7b\xaf\x9b\xab\x6a\x93\x08\x4f\xf0\xe0\x7b\x32\x42\x2e\xaa\xc3\xf7\x48\xd2\xa0\xe3\x43\x2b\xf9\xb7\xfe\x12\x00\x00\xff\xff\xe7\x28\xde\xcb\x55\x18\x00\x00")

func serviceSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceSchemaJson,
		"service/schema.json",
	)
}

func serviceSchemaJson() (*asset, error) {
	bytes, err := serviceSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/schema.json", size: 6229, mode: os.FileMode(420), modTime: time.Unix(1527896133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/schema.json": serviceSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"schema.json": &bintree{serviceSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

