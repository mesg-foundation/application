// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package service

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Service represents the service's type.
type Service struct {
	// Service's hash.
	// @hash: false
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,10,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash" validate:"required"`
	// Service's sid.
	// @hash: true
	Sid string `protobuf:"bytes,12,opt,name=sid,proto3" json:"sid,omitempty" validate:"required,printascii,max=63,domain"`
	// Service's name.
	// @hash: true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required,printascii"`
	// Service's description.
	// @hash: true
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" validate:"printascii"`
	// Configurations related to the service
	// @hash: true
	Configuration Service_Configuration `protobuf:"bytes,8,opt,name=configuration,proto3" json:"configuration" validate:"required"`
	// The list of tasks this service can execute.
	// @hash: true
	Tasks []*Service_Task `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty" validate:"dive,required"`
	// The list of events this service can emit.
	// @hash: true
	Events []*Service_Event `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty" validate:"dive,required"`
	// The container dependencies this service requires.
	// @hash: true
	Dependencies []*Service_Dependency `protobuf:"bytes,7,rep,name=dependencies,proto3" json:"dependencies,omitempty" validate:"dive,required"`
	// Service's repository url.
	// @hash: true
	Repository string `protobuf:"bytes,9,opt,name=repository,proto3" json:"repository,omitempty" validate:"omitempty,uri"`
	// The hash id of service's source code on IPFS.
	// @hash: true
	Source               string   `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty" validate:"required,printascii"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

// Events are emitted by the service whenever the service wants.
type Service_Event struct {
	// Event's key.
	// @hash: true
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty" validate:"printascii"`
	// Event's name.
	// @hash: true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"printascii"`
	// Event's description.
	// @hash: true
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" validate:"printascii"`
	// List of data of this event.
	// @hash: true
	Data                 []*Service_Parameter `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" validate:"dive,required"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Service_Event) Reset()         { *m = Service_Event{} }
func (m *Service_Event) String() string { return proto.CompactTextString(m) }
func (*Service_Event) ProtoMessage()    {}
func (*Service_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0}
}
func (m *Service_Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_Event.Unmarshal(m, b)
}
func (m *Service_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_Event.Marshal(b, m, deterministic)
}
func (m *Service_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_Event.Merge(m, src)
}
func (m *Service_Event) XXX_Size() int {
	return xxx_messageInfo_Service_Event.Size(m)
}
func (m *Service_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Service_Event proto.InternalMessageInfo

// Task is a function that requires inputs and returns output.
type Service_Task struct {
	// Task's key.
	// @hash: true
	Key string `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty" validate:"printascii"`
	// Task's name.
	// @hash: true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"printascii"`
	// Task's description.
	// @hash: true
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" validate:"printascii"`
	// List inputs of this task.
	// @hash: true
	Inputs []*Service_Parameter `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive,required"`
	// List of tasks outputs.
	// @hash: true
	Outputs              []*Service_Parameter `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty" validate:"dive,required"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Service_Task) Reset()         { *m = Service_Task{} }
func (m *Service_Task) String() string { return proto.CompactTextString(m) }
func (*Service_Task) ProtoMessage()    {}
func (*Service_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 1}
}
func (m *Service_Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_Task.Unmarshal(m, b)
}
func (m *Service_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_Task.Marshal(b, m, deterministic)
}
func (m *Service_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_Task.Merge(m, src)
}
func (m *Service_Task) XXX_Size() int {
	return xxx_messageInfo_Service_Task.Size(m)
}
func (m *Service_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Service_Task proto.InternalMessageInfo

// Parameter describes the task's inputs, the task's outputs, and the event's data.
type Service_Parameter struct {
	// Parameter's key.
	// @hash: true
	Key string `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty" validate:"printascii"`
	// Parameter's name.
	// @hash: true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"printascii"`
	// Parameter's description.
	// @hash: true
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" validate:"printascii"`
	// Parameter's type: `String`, `Number`, `Boolean`, `Object` or `Any`.
	// @hash: true
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" validate:"required,printascii,oneof=String Number Boolean Object Any"`
	// Set the parameter as optional.
	// @hash: true
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
	// Mark a parameter as an array of the defined type.
	// @hash: true
	Repeated bool `protobuf:"varint,9,opt,name=repeated,proto3" json:"repeated,omitempty"`
	// Optional object structure type when type is set to `Object`.
	// @hash: true
	Object               []*Service_Parameter `protobuf:"bytes,10,rep,name=object,proto3" json:"object,omitempty" validate:"unique,dive,required"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Service_Parameter) Reset()         { *m = Service_Parameter{} }
func (m *Service_Parameter) String() string { return proto.CompactTextString(m) }
func (*Service_Parameter) ProtoMessage()    {}
func (*Service_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 2}
}
func (m *Service_Parameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_Parameter.Unmarshal(m, b)
}
func (m *Service_Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_Parameter.Marshal(b, m, deterministic)
}
func (m *Service_Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_Parameter.Merge(m, src)
}
func (m *Service_Parameter) XXX_Size() int {
	return xxx_messageInfo_Service_Parameter.Size(m)
}
func (m *Service_Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Service_Parameter proto.InternalMessageInfo

// A configuration is the configuration of the main container of the service's instance.
type Service_Configuration struct {
	// List of volumes.
	// @hash: true
	Volumes []string `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty" validate:"unique,dive,printascii"`
	// List of volumes mounted from other dependencies.
	// @hash: true
	VolumesFrom []string `protobuf:"bytes,2,rep,name=volumesFrom,proto3" json:"volumesFrom,omitempty" validate:"unique,dive,printascii"`
	// List of ports the container exposes.
	// @hash: true
	Ports []string `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty" validate:"unique,dive,portmap"`
	// Args to pass to the container.
	// @hash: true
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" validate:"dive,printascii"`
	// Command to run the container.
	// @hash: true
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty" validate:"printascii"`
	// Default env vars to apply to service's instance on runtime.
	// @hash: true
	Env                  []string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" validate:"unique,dive,env"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service_Configuration) Reset()         { *m = Service_Configuration{} }
func (m *Service_Configuration) String() string { return proto.CompactTextString(m) }
func (*Service_Configuration) ProtoMessage()    {}
func (*Service_Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 3}
}
func (m *Service_Configuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_Configuration.Unmarshal(m, b)
}
func (m *Service_Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_Configuration.Marshal(b, m, deterministic)
}
func (m *Service_Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_Configuration.Merge(m, src)
}
func (m *Service_Configuration) XXX_Size() int {
	return xxx_messageInfo_Service_Configuration.Size(m)
}
func (m *Service_Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Service_Configuration proto.InternalMessageInfo

// A dependency is a configuration of an other container that runs separately from the service.
type Service_Dependency struct {
	// Dependency's key.
	// @hash: true
	Key string `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty" validate:"printascii"`
	// Image's name of the container.
	// @hash: true
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty" validate:"printascii"`
	// List of volumes.
	// @hash: true
	Volumes []string `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty" validate:"unique,dive,printascii"`
	// List of volumes mounted from other dependencies.
	// @hash: true
	VolumesFrom []string `protobuf:"bytes,3,rep,name=volumesFrom,proto3" json:"volumesFrom,omitempty" validate:"unique,dive,printascii"`
	// List of ports the container exposes.
	// @hash: true
	Ports []string `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty" validate:"unique,dive,portmap"`
	// Args to pass to the container.
	// @hash: true
	Args []string `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty" validate:"dive,printascii"`
	// Command to run the container.
	// @hash: true
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty" validate:"printascii"`
	// Default env vars to apply to service's instance on runtime.
	// @hash: true
	Env                  []string `protobuf:"bytes,9,rep,name=env,proto3" json:"env,omitempty" validate:"unique,dive,env"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service_Dependency) Reset()         { *m = Service_Dependency{} }
func (m *Service_Dependency) String() string { return proto.CompactTextString(m) }
func (*Service_Dependency) ProtoMessage()    {}
func (*Service_Dependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 4}
}
func (m *Service_Dependency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_Dependency.Unmarshal(m, b)
}
func (m *Service_Dependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_Dependency.Marshal(b, m, deterministic)
}
func (m *Service_Dependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_Dependency.Merge(m, src)
}
func (m *Service_Dependency) XXX_Size() int {
	return xxx_messageInfo_Service_Dependency.Size(m)
}
func (m *Service_Dependency) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_Dependency.DiscardUnknown(m)
}

var xxx_messageInfo_Service_Dependency proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Service)(nil), "mesg.types.Service")
	proto.RegisterType((*Service_Event)(nil), "mesg.types.Service.Event")
	proto.RegisterType((*Service_Task)(nil), "mesg.types.Service.Task")
	proto.RegisterType((*Service_Parameter)(nil), "mesg.types.Service.Parameter")
	proto.RegisterType((*Service_Configuration)(nil), "mesg.types.Service.Configuration")
	proto.RegisterType((*Service_Dependency)(nil), "mesg.types.Service.Dependency")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xdd, 0x6e, 0xe3, 0x44,
	0x1b, 0xc7, 0x37, 0x71, 0x3e, 0x9f, 0xb6, 0x27, 0xf3, 0xbe, 0x48, 0xb3, 0x01, 0x62, 0xaf, 0x11,
	0x52, 0xd0, 0x66, 0x93, 0x55, 0x2b, 0xad, 0xd0, 0xc2, 0x0a, 0x11, 0x58, 0xbe, 0x84, 0x28, 0x72,
	0xe1, 0x64, 0x25, 0x10, 0x13, 0xfb, 0xa9, 0x3b, 0xb4, 0x9e, 0xf1, 0xce, 0x8c, 0x23, 0x72, 0x25,
	0x9c, 0x70, 0x01, 0x5c, 0xca, 0x22, 0xee, 0x80, 0x03, 0x4b, 0x70, 0x01, 0x48, 0xf8, 0x0a, 0x90,
	0x27, 0x49, 0x93, 0xb4, 0xa1, 0xe9, 0xd2, 0x15, 0xda, 0x33, 0x4f, 0xf2, 0xff, 0xff, 0x3c, 0xcf,
	0xd7, 0x78, 0x60, 0x4f, 0xa3, 0x9a, 0xf0, 0x10, 0x07, 0xa9, 0x92, 0x46, 0x12, 0x48, 0x50, 0xc7,
	0x03, 0x33, 0x4d, 0x51, 0x77, 0xfc, 0x58, 0xc6, 0x72, 0x68, 0x7f, 0x1f, 0x67, 0xc7, 0xc3, 0x72,
	0x65, 0x17, 0xf6, 0x69, 0xa6, 0xf7, 0x7f, 0xfa, 0x3f, 0x34, 0x8f, 0x66, 0x04, 0xf2, 0x2d, 0xd4,
	0x4e, 0x98, 0x3e, 0xa1, 0xe0, 0x55, 0x7a, 0xbb, 0xa3, 0xcf, 0x9e, 0xe5, 0xee, 0xad, 0xdf, 0x72,
	0xf7, 0x6e, 0xcc, 0xcd, 0x49, 0x36, 0x1e, 0x84, 0x32, 0x19, 0x96, 0xf0, 0x7b, 0xc7, 0x32, 0x13,
	0x11, 0x33, 0x5c, 0x8a, 0x21, 0x8a, 0x98, 0x0b, 0x1c, 0x96, 0xae, 0xc1, 0x27, 0x4c, 0x9f, 0x14,
	0xb9, 0xfb, 0xbf, 0x09, 0x3b, 0xe3, 0x11, 0x33, 0xf8, 0xd0, 0x57, 0xf8, 0x34, 0xe3, 0x0a, 0x23,
	0x3f, 0xb0, 0x5c, 0x32, 0x02, 0x47, 0xf3, 0x88, 0xee, 0x7a, 0x95, 0x5e, 0x7b, 0x74, 0xbf, 0xc8,
	0xdd, 0xfe, 0x65, 0x6d, 0x3f, 0x55, 0x5c, 0x18, 0xa6, 0x43, 0xce, 0xfb, 0x09, 0xfb, 0xe1, 0xd1,
	0x83, 0x83, 0x7e, 0x24, 0x13, 0xc6, 0x85, 0x1f, 0x94, 0x66, 0xf2, 0x00, 0x6a, 0x82, 0x25, 0x48,
	0x2b, 0x16, 0xe2, 0x17, 0xb9, 0xdb, 0xbd, 0x12, 0xe2, 0x07, 0x56, 0x4f, 0xde, 0x81, 0x9d, 0x08,
	0x75, 0xa8, 0x78, 0x5a, 0x6e, 0x9c, 0x56, 0xad, 0xfd, 0x76, 0x91, 0xbb, 0xaf, 0x2c, 0xed, 0xab,
	0xae, 0x55, 0x35, 0x89, 0x60, 0x2f, 0x94, 0xe2, 0x98, 0xc7, 0x99, 0xb2, 0x71, 0xd3, 0x96, 0x57,
	0xe9, 0xed, 0xec, 0xdf, 0x19, 0x2c, 0x93, 0x3d, 0x98, 0x27, 0x71, 0xf0, 0xc1, 0xaa, 0x70, 0xf4,
	0x6a, 0x99, 0xc4, 0x7f, 0xca, 0xca, 0x3a, 0x94, 0x7c, 0x0e, 0x75, 0xc3, 0xf4, 0xa9, 0xa6, 0x75,
	0xcf, 0xe9, 0xed, 0xec, 0xd3, 0x4d, 0xf4, 0xaf, 0x98, 0x3e, 0x1d, 0xbd, 0x56, 0xe4, 0x2e, 0x5d,
	0x02, 0x23, 0x3e, 0xc1, 0xfe, 0x92, 0x3a, 0x83, 0x90, 0x43, 0x68, 0xe0, 0x04, 0x85, 0xd1, 0xb4,
	0x61, 0x71, 0xb7, 0x37, 0xe1, 0x1e, 0x97, 0x8a, 0x2d, 0xbc, 0x39, 0x86, 0x7c, 0x07, 0xbb, 0x11,
	0xa6, 0x28, 0x22, 0x14, 0x21, 0x47, 0x4d, 0x9b, 0x16, 0xdb, 0xdd, 0x84, 0xfd, 0x70, 0xa1, 0x9b,
	0x6e, 0x61, 0xaf, 0x11, 0xc9, 0xbb, 0x00, 0x0a, 0x53, 0xa9, 0xb9, 0x91, 0x6a, 0x4a, 0xdb, 0xb6,
	0x44, 0x17, 0xfc, 0x32, 0xe1, 0x06, 0x93, 0xd4, 0x4c, 0xfb, 0x99, 0xe2, 0x7e, 0xb0, 0xa2, 0x27,
	0x0f, 0xa1, 0xa1, 0x65, 0xa6, 0x42, 0xa4, 0x7b, 0xd7, 0xee, 0x8d, 0xb9, 0xa3, 0xf3, 0x57, 0x05,
	0xea, 0x36, 0x17, 0xe4, 0x2e, 0x38, 0xa7, 0x38, 0xa5, 0xb5, 0x6d, 0xfd, 0x51, 0xaa, 0xc8, 0xbd,
	0xb5, 0x66, 0xbc, 0x42, 0xfd, 0x02, 0x7a, 0xf0, 0x10, 0x6a, 0x11, 0x33, 0x8c, 0x3a, 0x36, 0xed,
	0xaf, 0x6f, 0x4a, 0xfb, 0x97, 0x4c, 0xb1, 0x04, 0x0d, 0xaa, 0x2d, 0x59, 0xb7, 0xa0, 0xce, 0xaf,
	0x55, 0xa8, 0x95, 0xed, 0xb4, 0x08, 0xb9, 0xf5, 0xd2, 0x85, 0x7c, 0x04, 0x0d, 0x2e, 0xd2, 0xec,
	0xbc, 0x85, 0x6f, 0x14, 0xf4, 0x1c, 0x45, 0xbe, 0x86, 0xa6, 0xcc, 0x8c, 0xa5, 0x36, 0x6f, 0x4e,
	0x5d, 0xb0, 0x3a, 0x3f, 0x3a, 0xd0, 0x3e, 0x37, 0xbd, 0xbc, 0x29, 0xfd, 0x06, 0x6a, 0x65, 0xa0,
	0xd4, 0xb1, 0xae, 0x4f, 0x8b, 0xdc, 0x7d, 0x7c, 0xf5, 0x19, 0x2c, 0x05, 0xca, 0xe3, 0x47, 0x47,
	0x46, 0x71, 0x11, 0x7b, 0x5f, 0x64, 0xc9, 0x18, 0x95, 0x37, 0x92, 0xf2, 0x0c, 0x99, 0xf0, 0x0e,
	0xc7, 0xdf, 0x63, 0x68, 0xbc, 0xf7, 0xc5, 0xd4, 0x0f, 0x2c, 0x96, 0x74, 0xa0, 0x25, 0xed, 0x8b,
	0xd8, 0x99, 0x1d, 0xa1, 0x56, 0x70, 0xbe, 0x2e, 0xff, 0x53, 0x98, 0x22, 0x33, 0x18, 0xd9, 0xd9,
	0x6e, 0x05, 0xe7, 0x6b, 0xf2, 0x04, 0x1a, 0xd2, 0xc2, 0x28, 0x5c, 0xa7, 0x26, 0x6f, 0x14, 0xb9,
	0xeb, 0x2e, 0xf7, 0x9d, 0x09, 0xfe, 0x34, 0xc3, 0xfe, 0xc5, 0x82, 0xcf, 0x88, 0x9d, 0x3f, 0xab,
	0xb0, 0xb7, 0x76, 0x28, 0x93, 0xf7, 0xa0, 0x39, 0x91, 0x67, 0x59, 0x82, 0x9a, 0x56, 0x3c, 0xa7,
	0xd7, 0x1e, 0xbd, 0x59, 0xe4, 0xee, 0x9d, 0xcd, 0xbc, 0xd5, 0x4c, 0x2e, 0x5c, 0xe4, 0x63, 0xd8,
	0x99, 0x3f, 0x7e, 0xa4, 0x64, 0x42, 0xab, 0xcf, 0x03, 0x59, 0x75, 0x92, 0xb7, 0xa1, 0x9e, 0x4a,
	0x65, 0xb4, 0x9d, 0xea, 0x4b, 0x47, 0xd6, 0x1a, 0x42, 0x2a, 0x93, 0xb0, 0xd4, 0x0f, 0x66, 0x06,
	0xb2, 0x0f, 0x35, 0xa6, 0x62, 0x4d, 0x6b, 0xd6, 0xd8, 0x2d, 0x72, 0xb7, 0x73, 0xa1, 0x49, 0xd7,
	0x3a, 0xa7, 0xd4, 0x92, 0x03, 0x68, 0x86, 0x32, 0x49, 0x98, 0x88, 0x68, 0x7d, 0x5b, 0xd7, 0x2c,
	0x94, 0xe4, 0x3e, 0x38, 0x28, 0x26, 0x76, 0x02, 0x2f, 0xbd, 0x67, 0x75, 0x83, 0x28, 0x26, 0x7e,
	0x50, 0x4a, 0x3b, 0xbf, 0x38, 0x00, 0xcb, 0x2f, 0xc0, 0xf3, 0xcd, 0xc2, 0x10, 0xea, 0x3c, 0x61,
	0xf1, 0x35, 0x86, 0x61, 0xa6, 0x5b, 0xad, 0x65, 0xf5, 0x45, 0xd4, 0xd2, 0xb9, 0x79, 0x2d, 0x6b,
	0xff, 0xb6, 0x96, 0x8d, 0xff, 0xa8, 0x96, 0xed, 0x6b, 0xd7, 0x72, 0x74, 0xf0, 0xec, 0xf7, 0xee,
	0xad, 0x9f, 0xff, 0xe8, 0x56, 0x9e, 0xbc, 0xb5, 0xfd, 0x1a, 0x38, 0xbf, 0x89, 0x8e, 0x1b, 0xf6,
	0x6a, 0x79, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x25, 0xff, 0x6e, 0x9b, 0x0a, 0x00,
	0x00,
}

func (this *Service) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service)
	if !ok {
		that2, ok := that.(Service)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if this.Sid != that1.Sid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Configuration.Equal(&that1.Configuration) {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if len(this.Dependencies) != len(that1.Dependencies) {
		return false
	}
	for i := range this.Dependencies {
		if !this.Dependencies[i].Equal(that1.Dependencies[i]) {
			return false
		}
	}
	if this.Repository != that1.Repository {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service_Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service_Event)
	if !ok {
		that2, ok := that.(Service_Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service_Task)
	if !ok {
		that2, ok := that.(Service_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service_Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service_Parameter)
	if !ok {
		that2, ok := that.(Service_Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Optional != that1.Optional {
		return false
	}
	if this.Repeated != that1.Repeated {
		return false
	}
	if len(this.Object) != len(that1.Object) {
		return false
	}
	for i := range this.Object {
		if !this.Object[i].Equal(that1.Object[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service_Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service_Configuration)
	if !ok {
		that2, ok := that.(Service_Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if this.Volumes[i] != that1.Volumes[i] {
			return false
		}
	}
	if len(this.VolumesFrom) != len(that1.VolumesFrom) {
		return false
	}
	for i := range this.VolumesFrom {
		if this.VolumesFrom[i] != that1.VolumesFrom[i] {
			return false
		}
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if this.Ports[i] != that1.Ports[i] {
			return false
		}
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if this.Command != that1.Command {
		return false
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Service_Dependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service_Dependency)
	if !ok {
		that2, ok := that.(Service_Dependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if this.Volumes[i] != that1.Volumes[i] {
			return false
		}
	}
	if len(this.VolumesFrom) != len(that1.VolumesFrom) {
		return false
	}
	for i := range this.VolumesFrom {
		if this.VolumesFrom[i] != that1.VolumesFrom[i] {
			return false
		}
	}
	if len(this.Ports) != len(that1.Ports) {
		return false
	}
	for i := range this.Ports {
		if this.Ports[i] != that1.Ports[i] {
			return false
		}
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if this.Command != that1.Command {
		return false
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
