// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\xb5\xb7\x35\x4b\x77\x19\xb0\xdc\xb6\xdb\x80\x61\x2d\xd0\xdb\x0a\x6f\x50\x6c\x3a\x51\x67\x4b\x2a\x25\x05\xc8\x8a\xfc\xfb\x60\xbb\x76\xe4\x48\x4a\x9c\xb6\x2b\x86\x65\x3d\xb9\xa4\x44\xf1\x3d\x52\x4f\xcc\x43\x42\x08\x3d\xd7\xd9\x12\x2a\x46\x67\x84\x2e\x8d\x51\xb3\xe9\xf4\x4e\x4b\x31\x69\xad\x6f\x25\x2e\xa6\x39\xb2\xc2\x4c\x2e\xdf\x4f\x5b\xdb\x19\xbd\xa8\xf7\x99\xb5\x82\x7a\x93\x9c\xdf\x41\x66\x5a\x1b\xc2\xbd\xe5\x08\x39\x9d\x91\xdb\x84\x10\x42\xa8\x60\x15\xd0\x84\x90\xb4\xf1\xb3\x3c\xe7\x86\x4b\xc1\xca\x6b\x94\x0a\xd0\x70\xd0\x74\x46\x0a\x56\x6a\x68\x16\x28\xd7\xfc\xd0\x86\x58\x01\x6a\x2e\x45\x6f\x70\xce\xd6\x06\xb9\x58\xd0\xc6\xbc\xb9\x70\x4e\x8c\xaf\xbd\xe8\xec\x15\x17\x5f\x40\x2c\xcc\x92\xce\xc8\xbb\x41\x84\x1c\x74\x86\x5c\x99\x23\x0e\x5d\x71\xcd\xe7\xbc\xe4\x66\x5d\xef\xe8\xac\xca\xce\x4b\xae\x97\xae\x09\x41\x49\xcd\x8d\xc4\xf5\xd8\xd0\xb0\x02\x61\xb4\xbb\x5a\x0a\xb8\x2a\x7a\x8a\xeb\xbf\x87\x6d\x08\x61\xcb\x92\x76\x9b\x1b\x5f\xff\x15\x2e\x5a\xef\x3b\x54\x9c\x7e\xa1\x62\xc6\x00\x8a\x6b\xbf\x56\xfd\x92\xef\xb7\x97\x93\x0f\x6c\xf2\xeb\xe3\xe4\xdb\x8f\x49\xfa\xe6\xdc\x5b\x51\x37\x1e\x42\x8d\x82\x9e\x4d\x73\x28\xb8\x68\xce\xd6\xd3\x06\x2e\x1d\xac\xdd\x24\xa1\xef\xee\x2b\x1d\xb0\x65\x98\xfe\x79\x3a\x64\xd5\x68\x9f\xce\x55\x0e\x0a\x44\x0e\x22\x1b\x66\x15\xc3\x3d\x0a\xf3\x01\xbc\x87\xb0\x46\x70\xf6\x99\xae\x87\x55\xf0\xf4\xa6\xf7\xf0\x8a\x2d\xc0\xa5\x26\xf5\xc8\xd8\x0c\xc8\xc8\xa4\x28\xf8\xc2\x22\xdb\xbd\xf6\x07\x33\x4a\xba\x60\x4d\x28\xea\xac\xda\x6a\x98\x62\xc8\x2a\x30\x80\xff\x62\x6f\xee\xc9\xe5\xa8\x7c\xf6\x97\x74\x7b\xd4\x8e\x39\xf5\x62\x04\x5e\x91\x81\x7f\xe7\x89\x08\x82\x71\xa5\xd8\xfd\xdb\xec\x9e\x16\x7d\x30\x9e\x1d\x56\xaa\x96\xb5\x43\x31\xe7\x52\x96\xc0\xc4\xb8\xa0\x8f\x9b\xc6\x24\xe9\xef\xae\x9f\x23\x61\xab\x60\x6d\x1a\xef\x4d\x7c\x27\x21\xf4\xab\xad\xe6\x80\x31\xef\xa7\x47\x18\x11\xf7\x55\xdb\x5d\x01\xa7\xd7\x00\xa4\x2d\x4a\xc1\x6c\x69\x6a\x3c\x37\x31\xd2\x93\x7d\xff\x1f\xfb\xec\xbc\x98\x84\x06\xaf\x00\x95\xd6\x28\x6b\x74\x87\x22\xdd\x2a\x6e\x44\x6a\x03\x5d\x1e\x6d\x43\xa7\x53\xf6\x74\xf3\xa8\xed\x2b\x40\x5e\x70\x36\x2f\xc1\x99\x7b\xda\x44\xd9\x3a\x64\x2e\xa0\xcd\xdc\xb5\x71\xd1\x60\x1d\xf5\x38\x38\xda\x1a\x4c\x48\x43\x86\xf0\x52\xc1\xba\x2a\x44\x88\x39\x31\x39\xce\x99\x61\x27\x23\xc7\x0d\xd8\x48\xbc\xf1\xcd\xd4\x9f\xf0\x0c\xed\x19\x4e\x2e\xed\xc4\xfc\x67\xc5\xc7\x2d\xf4\x5f\xab\x3c\x21\x21\x09\x14\xed\x98\x9b\x1f\x24\xdc\x99\xfd\x5e\x6c\x6a\x8e\x30\xd9\x8e\xb1\xfb\xb9\x18\x68\x88\xff\xab\x76\x97\xa5\x4c\x56\x15\x13\xf9\x53\x08\x66\xb8\xf0\x94\xcf\x9f\x61\xc9\x81\x39\x96\xec\xcc\xb2\x83\xe3\x19\x22\x5b\xfb\x9a\xc5\x0d\x54\x11\xf5\xd8\x7f\x95\xe3\xd7\x2a\x0d\xbf\x5e\xb2\xb4\x95\x27\x54\xaf\x84\xd2\x0a\x7e\x6f\xe1\xf3\x23\x56\x83\xd6\xd7\xe3\xd7\x26\xa2\x40\x59\xfd\x27\x43\x49\xf4\xdf\xfc\x13\xa1\x61\x28\x81\xf5\xcf\xdc\x64\xf3\x3b\x00\x00\xff\xff\xae\x38\x31\x42\x39\x14\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5177, mode: os.FileMode(420), modTime: time.Unix(1543576233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
