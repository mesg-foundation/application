// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x2c\x27\xb7\xf7\xdd\x6c\xaa\x4a\x95\xb2\xb7\xf4\x56\xa9\x6a\x22\xe5\xd6\x84\x56\x0e\x0c\xc4\x29\xd8\xce\x60\xa2\x6e\x57\xfb\xdf\x2b\x60\x97\x35\xd8\x06\xb6\xdd\x46\x51\xb7\x9c\xc0\xe3\xf9\x78\x9e\xb1\x67\x86\x55\x40\x08\x3d\x2d\xa2\x07\xc8\x19\x5d\x10\xfa\xa0\xb5\x5a\xcc\xe7\x8f\x85\x14\xb3\x66\xf5\x4c\x62\x3a\x8f\x91\x25\x7a\x76\xfe\x6e\xde\xac\x9d\xd0\xff\x2b\x3d\xbd\x54\x50\x29\xc9\xfb\x47\x88\x74\xb3\x86\xf0\x54\x72\x84\x98\x2e\xc8\x6d\x40\x08\x21\x54\xb0\x1c\x68\x40\x48\x58\xcb\x59\x1c\x73\xcd\xa5\x60\xd9\x35\x4a\x05\xa8\x39\x14\x74\x41\x12\x96\x15\x50\x6f\x50\xe6\xf2\xca\x30\xb1\xfd\x32\x1c\x17\x1a\xb9\x48\x6b\xc7\xf5\x7a\xce\xc5\x47\x10\xa9\x7e\xa0\x0b\xf2\xa6\x5e\x5c\x37\x32\x5a\xf0\x78\x92\x01\xf6\xbd\x35\xf0\xf6\xa2\x5d\x56\x4c\x6b\x40\x51\x69\x7c\xb9\x3d\x9f\x5d\xb0\xd9\x8f\xcb\xd9\xe7\xbb\xbb\xb3\xaf\xb3\xf0\xbf\x53\xda\xf1\x14\x43\x11\x21\x57\x15\xc6\x01\x8f\x1d\x15\x04\x25\x0b\xae\x25\x2e\xa7\x6a\xc0\x33\x08\x5d\x98\xbb\xa5\x80\xab\xa4\x25\xbd\x7a\x56\x3b\x13\xa2\xcc\x32\xba\x55\xae\x65\xed\x9b\x3b\x8d\xad\x6c\x2c\x5d\xed\xc6\x0d\x45\xd7\x76\xf6\xda\x2d\x06\x75\x0d\x6f\xfd\x1d\xd5\x51\x44\xa8\x50\xd0\x93\x79\x0c\x09\x17\xb5\xef\x62\x5e\xc3\xa5\x9d\xbd\xeb\xc0\xf5\xbe\x7d\x0b\x3b\x6c\x69\x56\x7c\x3b\x1e\xb2\x2a\xb4\xbf\xce\x55\x0c\x0a\x44\x0c\x22\xea\x46\xe5\xc3\x3d\x09\xf3\x08\xde\x31\xac\x1e\x9c\x6d\xa4\xcb\x6e\x16\xac\x0a\xd4\x4a\x78\xce\x52\x30\xa9\x09\x2d\x32\xd6\x1d\x32\x22\x29\x12\x9e\x96\xc8\xfa\xb7\x79\x34\xa2\x60\x6b\xac\x36\x45\x8d\x5d\xbb\xaa\xa6\x18\xb2\x1c\x34\xe0\xdf\x78\x36\x07\x62\xd9\x2b\x9e\xe1\x94\xee\x5c\xf5\x96\x43\xcb\x86\xa3\xaf\x74\xe4\xbd\x1e\xe3\x04\x63\x96\x62\xf3\x59\xf7\xbd\x79\xfb\xc0\x6f\x9b\x95\xaa\x61\x6d\xcc\xe6\xbd\x94\x19\x30\x31\xcd\x28\x82\x02\xa6\x21\x3e\xa8\xd1\x8d\xd2\x14\xe4\xb6\x76\xd5\xe3\x44\x99\x3b\x13\x5e\x4b\x6f\xfc\x9a\x84\xd0\x4f\x65\x7e\x0f\xe8\x93\xbe\xdf\xc0\xf0\x88\xaf\xdc\x47\x76\x23\xbd\x14\x4b\x1b\xbf\xe3\xc0\x91\xe6\x10\x24\xac\xcc\x74\x05\xf5\x66\x9f\x24\x37\x11\x78\xc8\x73\x17\x1f\xa3\x9a\xd8\x3e\x82\xa1\xef\x7d\x5b\xe9\xc1\xda\x82\xf3\x5a\x53\x59\x6a\x55\xea\x16\x45\xb8\xeb\x22\x9e\xf6\xe1\xb8\xb9\xde\xab\x65\xb0\x3d\x70\x43\x27\xa9\x73\x51\x87\x39\xa9\x57\xb9\x92\x63\xda\x2a\x20\x42\x38\x94\xb1\x2d\x81\x1e\x4c\x47\xd6\x1d\x62\xa6\xd9\xd1\x74\x87\x1a\xec\xab\x28\x1b\xdd\x41\xaa\x19\xe0\xff\x6c\xdd\x30\x13\xfd\x6a\x8b\x86\x23\x41\xfb\xdc\x72\x27\xb9\xc6\xd8\x79\xb0\x81\xdd\xc3\x5a\x33\x41\x0f\xe3\xee\xd4\x0b\xfb\x8f\xbc\xcf\x48\x24\xf3\x9c\x89\xfe\xe8\x31\x89\x4c\x86\xa9\x55\xe5\xec\xf1\x99\x8c\x8c\xd0\xa4\x37\x46\x77\xdc\x33\x44\xb6\xb4\xeb\x13\xd7\x90\x7b\x2a\xc5\xf0\xb5\xf5\x5f\xa1\xd0\x09\xf1\x59\x66\x65\x6e\x15\xa5\x17\x42\x59\x0a\xfe\x54\xc2\x87\x0d\x56\x8d\xa5\x5d\x7b\x5f\x9a\x88\x04\x65\xfe\x8f\x0c\x25\xd1\xee\xef\xc7\x47\x03\x88\x67\x5f\xd9\xb0\xa3\x1f\x89\xdc\x13\xf5\x40\xc4\xde\x9e\x57\xfd\xf5\x07\xeb\xe0\x67\x00\x00\x00\xff\xff\xdc\x75\x12\x45\x5b\x15\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5467, mode: os.FileMode(420), modTime: time.Unix(1547305818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
