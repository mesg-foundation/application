// Code generated by go-bindata.
// sources:
// service/importer/assets/schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x6f\xd3\x30\x10\x7f\xcf\xa7\xb0\xbc\xbd\xb1\xd2\xf1\x82\x44\xdf\xe0\x0d\x09\xb1\x49\x7b\x63\x0a\xc8\x4d\x2e\xad\x47\x62\x7b\x67\xbb\x52\x99\xfa\xdd\x51\x92\x25\x75\x1a\x3b\x49\xb7\x22\x21\xca\x9e\xb2\xfb\xe7\xbb\xdf\x9d\x7f\xbe\x3e\x45\x84\xd0\x4b\x9d\xac\xa1\x60\x74\x41\xe8\xda\x18\xb5\x98\xcf\x1f\xb4\x14\xb3\x5a\xfa\x56\xe2\x6a\x9e\x22\xcb\xcc\xec\xfa\xfd\xbc\x96\x5d\xd0\xab\xd2\xcf\x6c\x15\x94\x4e\x72\xf9\x00\x89\xa9\x65\x08\x8f\x96\x23\xa4\x74\x41\xee\x23\x42\x08\xa1\x82\x15\x40\x23\x42\xe2\x4a\xcf\xd2\x94\x1b\x2e\x05\xcb\x6f\x51\x2a\x40\xc3\x41\xd3\x05\xc9\x58\xae\xa1\x32\x50\xae\xf8\xa9\x0e\xb1\x01\xd4\x5c\x8a\x56\xe0\x9c\xad\x0d\x72\xb1\xa2\x95\x78\x77\xe5\x9c\x18\xb6\xbd\x6a\xe4\x05\x17\x5f\x40\xac\xcc\x9a\x2e\xc8\xbb\x4e\x84\x14\x74\x82\x5c\x99\x23\x0e\xdd\x70\xcd\x97\x3c\xe7\x66\x5b\x7a\x34\x52\x65\x97\x39\xd7\x6b\x57\x84\xa0\xa4\xe6\x46\xe2\x76\x6a\x68\xd8\x80\x30\xda\xb5\x96\x02\x6e\xb2\x16\xe2\xf2\xef\x69\x1f\x42\xd8\x3c\xa7\x8d\x73\xa5\x6b\xbf\xfc\x4d\x6b\x75\x63\xcd\x69\x0d\x15\x33\x06\x50\xdc\xf6\x7b\xd5\x9a\x7c\xbf\xbf\x9e\x7d\x60\xb3\x5f\x1f\x67\xdf\x7e\xcc\xe2\x37\x97\x3d\x8b\x72\xf0\x10\xca\x2a\xe8\xc5\x3c\x85\x8c\x8b\xea\x6c\x3d\xaf\xca\xa5\x1d\xdb\x5d\xe4\xfb\x6e\xbe\xe2\x0e\x5a\x86\xe9\x9f\xe7\x03\x56\x59\xed\xcb\xb1\x4a\x41\x81\x48\x41\x24\xdd\xac\x42\x75\x4f\xaa\x79\xa4\xde\xb1\x5a\x03\x75\xb6\x99\x6e\xbb\x5d\xe8\xf1\x4d\xab\xe1\x05\x5b\x81\x0b\x4d\xdc\x03\x63\xd7\x01\x23\x91\x22\xe3\x2b\x8b\xec\xf0\xda\x8f\x66\x14\x35\xc1\xaa\x50\xd4\xb1\xda\x73\x98\x62\xc8\x0a\x30\x80\xff\xe2\x6c\x0e\xe4\x72\x54\x3e\xc3\x2d\xdd\x1f\x75\x20\x8e\x7b\x31\x3c\xaf\x48\x47\x7f\xf0\x44\x78\x8b\x71\xa9\xd8\xfd\xdb\x1d\x9e\x16\x7c\x30\x5e\x1d\x56\xaa\x1a\xb5\xb1\x98\x4b\x29\x73\x60\x62\x5a\xd0\x67\xa7\x29\x49\xf6\xbd\xcb\xe7\x48\xd8\xc2\xdb\x9b\x4a\x7b\x17\xf6\x24\x84\x7e\xb5\xc5\x12\x30\xa4\xfd\xf4\x5c\x46\x40\x7d\x53\x4f\x97\x47\xd9\x1b\x00\x52\x37\x25\x63\x36\x37\x65\x3d\x77\x21\xd0\xa3\xa1\xff\x8f\x7d\x76\x4e\x46\xa1\xde\x2b\x40\xa5\x35\xca\x1a\xdd\x54\x11\xef\x19\x37\x40\xb5\x9e\x29\x0f\x8e\xa1\x33\x29\x03\xd3\x3c\xc9\x7d\x03\xc8\x33\xce\x96\x39\x38\x7b\x4f\x9d\x28\xdb\xfa\xc4\x19\xd4\x99\xbb\x32\x2e\xaa\x5a\x27\x3d\x0e\x0e\xb7\x7a\x13\xd2\x90\x20\x9c\x2a\x58\xd3\x85\x00\x30\x67\x46\xc7\x29\x33\xec\x6c\xe8\xb8\x2a\x36\x10\x6f\xfa\x30\xb5\x27\xbc\x82\x7b\xba\x9b\x4b\xbd\x31\xff\x59\xf2\x71\x1b\xfd\xd7\x32\x8f\x8f\x48\x3c\x4d\x3b\xe6\xe6\x7b\x01\x77\x76\xbf\x93\x6d\xcd\x01\x24\xeb\x35\x76\x18\x8b\x0e\x87\xf4\x7f\xd5\x1e\xa2\x94\xc8\xa2\x60\x22\x7d\x11\xb5\xcb\xdc\x16\xbd\x5b\xec\x59\x63\xc9\xc8\x2a\x4b\x0e\xd6\xd9\x4e\x06\x0c\x91\x6d\xfb\xb4\x65\x05\x7f\xb4\xf0\xd9\x40\x51\x26\x60\xd0\xf6\xc9\x8a\x3f\x2b\x3d\x1c\x33\x7c\xe1\xc3\x97\x2f\x1e\x02\x22\x43\x59\xfc\x07\x43\x49\xec\x3f\x88\x67\x02\x43\x97\x1f\xca\xdf\x80\xd1\xee\x77\x00\x00\x00\xff\xff\xbd\x1c\xc5\x50\x56\x13\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 4950, mode: os.FileMode(420), modTime: time.Unix(1537766523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

