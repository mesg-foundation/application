// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\x9c\x3c\x10\xbe\xf3\x2b\x2c\x27\xb7\xf7\xdd\x92\x5e\x2a\x75\x6f\xed\xad\x52\xd5\x44\xca\xad\x11\xad\x1c\x18\x36\x4e\xf1\x47\xfc\x11\x69\x1b\xf1\xdf\x2b\x4c\x60\x01\xdb\x40\x3e\x2a\x55\xdd\x72\x02\x8f\x67\x3c\xcf\x33\xe3\xc7\xe6\x21\x41\x08\x9f\xea\xfc\x06\x18\xc1\x5b\x84\x6f\x8c\x91\xdb\x34\xbd\xd5\x82\x6f\xda\xd1\x37\x42\xed\xd2\x42\x91\xd2\x6c\xce\xde\xa5\xed\xd8\x09\xfe\xbf\xf1\x33\x7b\x09\x8d\x93\xb8\xbe\x85\xdc\xb4\x63\x0a\xee\x2c\x55\x50\xe0\x2d\xba\x4a\x10\x42\x08\x73\xc2\x00\x27\x08\x65\xce\x4e\x8a\x82\x1a\x2a\x38\xa9\x2e\x94\x90\xa0\x0c\x05\x8d\xb7\xa8\x24\x95\x06\x37\x41\x0e\x87\x1f\x06\x21\xba\xaf\xc1\xc2\xda\x28\xca\x77\x6e\x61\x37\xce\x28\xff\x0c\x7c\x67\x6e\xf0\x16\xbd\x75\x83\x75\x6b\xc3\xa4\xa2\x44\xcf\x84\x18\x4d\x2e\x40\xe7\x8a\xca\x26\xcd\xb5\x2e\x0a\xa4\xd0\xd4\x08\xb5\x5f\xeb\x01\xf7\xc0\xcd\x28\x25\xc1\xe1\xbc\xec\x79\x6b\x9e\x87\x43\x08\x6e\xab\x0a\x77\xce\xce\xd6\xbf\x85\x2b\xd1\xdb\x96\x18\xef\x27\x4a\x62\x0c\x28\x7e\xe1\x17\xa0\x9f\xf2\xed\xea\x6c\xf3\x9e\x6c\x7e\x7e\xd8\x7c\xfd\xbe\xc9\xfe\x3b\xf5\x66\x34\xdd\xa4\xa0\x41\x81\x4f\xd2\x02\x4a\xca\xdd\xda\x3a\x75\x70\xf1\x68\x6e\x9d\x84\xde\xbb\xb7\x6c\xc4\x96\x21\xfa\xc7\xf1\x90\xd5\xa0\x7d\x3e\x57\x05\x48\xe0\x05\xf0\x7c\x9c\x55\x0c\xf7\x2a\xcc\x0b\x78\x97\xb0\x46\x70\xf6\x99\xee\xc7\x55\xf0\x44\xa4\xb7\x50\x46\x76\x30\xa4\x26\xf3\xc8\xa8\x47\x64\xe4\x82\x97\x74\x67\x15\x99\xee\xe6\xc5\x8c\x92\x2e\x98\x0b\x85\x07\xb3\x0e\xc2\x24\x89\x22\x0c\x0c\xa8\xbf\xb1\x37\x67\x72\x79\x52\x3e\xf3\x25\x3d\x2c\x35\x19\xce\xbc\x18\x81\xa3\x61\x64\x9f\x1c\x13\x41\x30\x43\x29\x1e\x3e\xf5\x74\xb5\xe8\x39\xf0\xe2\xb0\x42\xb6\xac\x2d\xc5\xbc\x16\xa2\x02\xc2\xd7\x05\x7d\x74\x5a\x93\xa4\xef\xdd\x1c\x47\xdc\xb2\x60\x6d\x9c\xf5\x32\xee\x89\x10\xfe\x62\xd9\x35\xa8\x98\xf5\xe3\x23\x8c\x88\xf9\xbc\xed\xae\x80\xd1\x6b\x00\xd4\x16\xa5\x24\xb6\x32\x0d\x9e\xcb\x18\xe9\xc9\xdc\xf7\x53\x8f\x9d\x57\x93\xd0\xe0\x16\xc0\xc2\x1a\x69\x8d\xee\x50\x64\x07\xc5\x8d\x48\x6d\xa0\xcb\xa3\x6d\x38\xe8\x94\x99\x6e\x5e\xe5\x4e\xb9\x4b\x73\x95\xae\x0f\x64\x31\x18\x4b\x43\xae\xe0\xb5\x82\x75\x04\x46\x30\x1d\x99\x92\x16\xc4\x90\xa3\x51\x52\x07\x36\x12\x6f\x7d\x33\xf5\x2b\xbc\x40\x36\x6a\xff\x6e\xff\x9b\x75\x63\x58\xe8\x3f\x56\x34\x02\x05\x7a\xca\x2e\x0f\x92\x3b\xb8\xa2\xbd\xda\xe5\x36\xc2\x5a\x7b\xdb\x9c\xc7\x3d\xd2\x0b\xff\x07\x74\xca\x48\x2e\x18\x23\xbc\x78\x0e\x99\xf7\xa2\xb2\xcc\xdb\xb1\x81\xdb\x26\x5a\xb8\x71\xa2\xc9\xad\x73\x94\x01\x51\x8a\xec\x7d\x89\xb2\x9c\xde\x59\xf8\x64\x80\x35\x09\x18\x65\x7d\x61\xa2\x8f\xc6\x80\x9e\xcc\x6f\xee\xf8\x46\xcb\xe6\x88\x28\x95\x60\xff\xc8\x90\x42\xf9\x87\xdf\x91\xd0\x30\xd6\x87\xe6\x57\x2d\xa9\x7f\x05\x00\x00\xff\xff\x6d\x00\xe3\x9e\xd2\x12\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 4818, mode: os.FileMode(420), modTime: time.Unix(1543308590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
