// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6f\xd3\x30\x14\xbe\xe7\xaf\xb0\xbc\xdd\xa0\xeb\x10\x12\xd2\x7a\x83\x1b\x12\x62\x93\x76\x63\x0b\xc8\x4b\x5e\x3a\x8f\xc4\xf6\x9e\x9d\x89\x32\xf5\x7f\x47\x49\xda\xd4\x89\xed\x24\x63\x65\x42\x94\x9e\x5a\x3f\xbf\x1f\xdf\xf7\xec\xef\xb9\x8f\x11\x21\xf4\x58\x27\xb7\x50\x30\xba\x20\xf4\xd6\x18\xb5\x98\xcf\xef\xb4\x14\xb3\x66\xf5\x44\xe2\x72\x9e\x22\xcb\xcc\xec\xf4\xdd\xbc\x59\x3b\xa2\xaf\x2b\x3f\xb3\x52\x50\x39\xc9\x9b\x3b\x48\x4c\xb3\x86\x70\x5f\x72\x84\x94\x2e\xc8\x55\x44\x08\x21\x54\xb0\x02\x68\x44\x48\x5c\xdb\x59\x9a\x72\xc3\xa5\x60\xf9\x05\x4a\x05\x68\x38\x68\xba\x20\x19\xcb\x35\xd4\x1b\x94\xbd\xfc\x68\x85\xd8\xfe\xb2\x12\x6b\x83\x5c\x2c\xeb\xc4\xf5\x7a\xc1\xc5\x27\x10\x4b\x73\x4b\x17\xe4\x4d\xbd\xb8\x6e\x6c\x54\xf3\x74\x52\x00\xf6\xa3\x0d\xf0\xf6\xac\x5d\x56\xcc\x18\x40\x51\x79\x7c\xbd\x3a\x9d\x9d\xb1\xd9\xcf\xf7\xb3\x2f\xd7\xd7\x27\xdf\x66\xf1\xab\x63\xda\xc9\x94\x82\x4e\x90\xab\x0a\xe3\x40\xc6\x8e\x0b\x82\x92\x9a\x1b\x89\xab\xa9\x1e\xf0\x00\xc2\x68\x7b\xb7\x14\x70\x9e\xb5\xa4\x57\x9f\xc7\x5d\x08\x51\xe6\x39\xdd\x3a\xd7\xb6\xf6\x9b\xbf\x8d\xad\x6d\xac\x5d\xed\xc6\x0d\x45\x17\x6e\xf7\xda\x2d\x16\x75\x0d\x6f\xfd\x1d\xd5\x51\x44\xa8\x50\xd0\xa3\x79\x0a\x19\x17\x75\x6e\x3d\xaf\xe1\xd2\xce\xde\x75\xe4\xfb\xbe\xfd\x16\x77\xd8\x32\x4c\x7f\x3f\x1c\xb2\x2a\xb4\xbf\xcf\x55\x0a\x0a\x44\x0a\x22\xe9\x56\x15\xc2\x3d\x09\xf3\x08\xde\x31\xac\x01\x9c\x6d\xa5\xab\x6e\x17\x1c\x05\x6a\x2d\xbc\x60\x4b\xb0\xa9\x89\x1d\x32\xd6\x1d\x32\x12\x29\x32\xbe\x2c\x91\xf5\x6f\xf3\x68\x45\xd1\x36\x58\x1d\x8a\x5a\xbb\x76\xaa\xa6\x18\xb2\x02\x0c\xe0\xbf\x78\x36\x07\x6a\x79\x52\x3d\xc3\x2d\xdd\xa5\xea\x2d\xc7\x4e\x0c\xcf\x5c\xe9\xd8\x7b\x33\xc6\x0b\xc6\x96\x62\xfb\xb3\xee\x67\x0b\xce\x81\x67\x87\x95\xaa\x61\x6d\x2c\xe6\x8d\x94\x39\x30\x31\x2d\x28\x82\x02\x66\x20\xdd\x6b\xd0\x8d\xd3\x14\xe4\xae\x77\x35\xe3\x44\x59\x78\x1b\x5e\x5b\x2f\xc3\x9e\x84\xd0\xcf\x65\x71\x03\x18\xb2\x7e\xd8\xc0\x08\x98\xcf\x9b\x23\xeb\x31\x3a\xa7\x8a\x34\x9d\xce\x58\x99\x9b\x0a\xcf\x65\xa8\x93\xd1\xd0\xef\xa7\xce\xb2\xbd\xe9\xb2\xf7\x5e\x51\x59\x1a\x55\x1a\xbd\x45\x11\xef\x64\x3c\xa0\xdf\x9e\xab\x13\x3c\xdb\xd6\x49\x19\xb8\x22\x93\xdc\xb9\xa8\xcb\x9c\x34\x2c\x2c\xad\xf5\xc6\xd2\x90\x20\xec\x2b\xd8\x96\xc0\x00\xa6\x03\x93\xe7\x94\x19\x76\x30\xf2\x5c\x83\x0d\xc4\x9b\x7e\x98\xda\x0c\xcf\x90\x8d\xee\x4b\xa6\x79\x41\xff\x59\xdd\xb0\x1b\xfd\xd7\x8a\x86\xa7\x41\x4f\xb9\xe5\x5e\x72\xad\x77\xdf\xde\x5e\xcc\x01\xd6\x9a\x27\xec\x30\xee\x8e\x5e\xb8\x7f\x89\xfb\x8c\x24\xb2\x28\x98\xe8\xcf\xfe\x49\x64\x32\x5c\x3a\x2a\xe7\xbe\x5f\xc9\xc8\x1b\x96\xf4\xde\xb1\x9d\xf4\x0c\x91\xad\x5c\x7d\xe2\x06\x8a\x80\x52\x0c\x5f\xdb\xf0\x15\x8a\xbd\x10\x1f\x64\x5e\x16\x8e\x28\xbd\x10\xca\x52\xf0\xfb\x12\x3e\x6e\xb0\x1a\x2c\x5d\xed\x7d\x69\x22\x32\x94\xc5\x7f\x32\x94\x44\x77\xbe\x1f\x1e\x0d\x20\x1e\x42\xb2\xe1\x56\x3f\x52\x79\xa0\xea\x81\x8a\x83\x33\xaf\xfa\xdb\x1d\xad\xa3\x5f\x01\x00\x00\xff\xff\x82\xf8\xb9\xa7\xdc\x14\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5340, mode: os.FileMode(420), modTime: time.Unix(1546333141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
