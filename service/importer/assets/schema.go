// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\x58\x6e\x6f\xb0\x6c\x11\x12\x52\xf7\x06\x37\x24\x44\x2b\xf5\x46\x15\xd0\x34\x99\x6c\x5d\x12\x3b\x75\xec\x8a\xa5\xda\xff\x8e\xe2\xec\x66\xed\xd8\xce\xa6\x1f\x54\x88\x25\xa7\xc4\xe3\x99\xf1\x7b\x33\x7e\x76\xee\x13\x42\xe8\x71\x93\x5d\x63\x05\x74\x41\xe8\xb5\x52\xf5\x62\x3e\xbf\x69\x04\x9f\x75\xa3\x6f\x84\x5c\xce\x73\x09\x85\x9a\x9d\xbc\x9f\x77\x63\x47\xf4\x75\xeb\xa7\x56\x35\xb6\x4e\xe2\xea\x06\x33\xd5\x8d\x49\xbc\xd5\x4c\x62\x4e\x17\xe4\x32\x21\x84\x10\xca\xa1\x42\x9a\x10\x92\x1a\x3b\xe4\x39\x53\x4c\x70\x28\xcf\xa5\xa8\x51\x2a\x86\x0d\x5d\x90\x02\xca\x06\xcd\x84\xda\x1e\xbe\xb7\x42\x6c\xbf\xac\xc4\x8d\x92\x8c\x2f\x4d\x62\x33\x5e\x31\xfe\x19\xf9\x52\x5d\xd3\x05\x79\x6b\x06\xd7\x9d\x8d\x42\xc9\xa0\x99\x14\x02\x7e\xf6\x21\xde\x9d\xf6\xc3\x35\x28\x85\x92\xb7\x1e\xdf\x2e\x4f\x66\xa7\x30\xfb\xf5\x61\xf6\xf5\xfb\x62\x96\xbe\x3a\xa6\x4e\xa6\x1c\x9b\x4c\xb2\xba\xc5\x38\x92\xcf\x71\x91\x58\x8b\x86\x29\x21\x57\x53\x3d\xf0\x0e\xb9\x72\xf0\x08\x8e\x67\x45\x4f\x7a\xfb\xdc\xef\x42\x70\x5d\x96\x74\xeb\x6c\x6c\xfd\x5b\xb8\x8c\xbd\x6d\x5f\xb9\xfa\x89\x1b\x82\xce\xfd\xea\xf5\x53\x6c\xe2\x0c\x6f\xc3\x19\x6d\x2b\x4a\x6c\x51\xd0\xa3\x79\x8e\x05\xe3\x26\x77\x33\x37\x70\xa9\x33\x77\x9d\x84\xde\xb7\x6f\xa9\xc3\x96\x82\xe6\xc7\xe1\x90\xd5\xa2\x7d\x3c\x57\x39\xd6\xc8\x73\xe4\x99\xbb\xaa\x18\xee\x49\x98\xf7\xe0\xdd\x87\x35\x82\xb3\x5f\xe9\xca\xad\x82\xa7\x40\xbd\x85\x55\xb0\x44\x9b\x9a\xd4\x23\x63\xed\x90\x91\x09\x5e\xb0\xa5\x96\x30\xdc\xcd\x7b\x57\x94\x6c\x83\x99\x50\xd4\x9a\xb5\x53\xb5\x1a\x24\x54\xa8\x50\xfe\x8b\xbd\x39\xb2\x96\x07\xad\x67\xbc\xa4\xbb\x54\x83\xe1\xd4\x8b\x11\x38\x57\x1c\xfb\xe0\x8c\x09\x82\xb1\xa5\xd8\x7e\xd6\xc3\x6c\xd1\x73\xe0\xc9\x61\x45\xdd\xb1\xb6\x2f\xe6\x95\x10\x25\x02\x9f\x16\x74\xe3\x34\x65\x91\xbe\x77\x7b\x1c\x71\x5d\x05\x6b\x63\xac\x17\x71\x4f\x42\xe8\x17\x5d\x5d\xa1\x8c\x59\x3f\x6e\x60\x44\xcc\x67\x5d\x77\x05\x8c\x5e\x03\x90\xae\x28\x05\xe8\x52\xb5\x78\x2e\x62\xa4\x27\x63\xdf\x0f\x3d\x76\x9e\x4d\x42\x83\x5b\x80\x0a\xad\x6a\xad\x9a\x2d\x8a\x74\xa7\xb8\x11\xa9\x0d\x74\x79\xb4\x0d\xad\x4e\x19\xe9\xe6\x49\xee\x8c\x9b\x65\x4e\xd2\x75\x4b\x16\x83\xb1\x1a\xcc\x24\x3e\x57\xb0\x2d\x81\x11\x4c\x07\xa6\xa4\x39\x28\x38\x18\x25\x35\x60\x23\xf1\xa6\x37\x53\x9f\xe1\x09\xb2\xb1\xf6\xef\xf6\x7f\x58\x37\xec\x42\xff\xb5\xa2\x11\x28\xd0\x43\x76\x79\x90\x5c\xeb\x8a\xf6\x6c\x97\xdb\x08\x6b\xdd\x6d\x73\x1c\xb7\xa3\x17\xfe\xdf\xeb\x90\x91\x4c\x54\x15\xf0\xfc\x31\x64\x82\x5c\x7a\x2a\xe7\x5f\x35\xc9\x9e\xeb\x26\x19\x5c\x39\x9d\xf4\x20\x25\xac\x7c\x7d\x62\x0a\xab\x88\x52\x8c\x6f\xdb\xf8\x16\x4a\x83\x10\xef\x44\xa9\x2b\x4f\x94\x5e\x08\xa5\xe6\xec\x56\xe3\xa7\x0d\x56\x25\xb5\xaf\xbd\x2f\x4d\x44\x21\x45\xf5\x9f\x8c\x5a\x48\xff\x7c\x3f\x10\x1a\x5c\x09\x6c\xff\x46\x93\x75\xf2\x3b\x00\x00\xff\xff\xd8\x3a\x6a\x74\xf3\x13\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5107, mode: os.FileMode(420), modTime: time.Unix(1543646089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
