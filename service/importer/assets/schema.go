// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x4f\xdb\x30\x10\x7e\xcf\xaf\xb0\x0c\x6f\x5b\x29\xd3\xa4\x49\xf4\x8d\xbd\x4d\x9a\x06\x12\x6f\x83\x6c\x32\xc9\xa5\x98\x25\xb6\xb9\x38\x68\x1d\xea\x7f\x9f\x92\xb4\xae\x13\xdb\x69\x0a\x1d\x9a\xd6\x45\x42\x4a\xed\xbb\xf3\x7d\xdf\xd9\xdf\x39\x3c\x45\x84\xd0\xe3\x32\xb9\x83\x82\xd1\x19\xa1\x77\x5a\xab\xd9\x74\x7a\x5f\x4a\x31\x69\x47\x4f\x24\xce\xa7\x29\xb2\x4c\x4f\x4e\x3f\x4c\xdb\xb1\x23\xfa\xb6\xf6\xd3\x0b\x05\xb5\x93\xbc\xbd\x87\x44\xb7\x63\x08\x0f\x15\x47\x48\xe9\x8c\x5c\x47\x84\x10\x42\x05\x2b\x80\x46\x84\xc4\xcd\x3c\x4b\x53\xae\xb9\x14\x2c\xbf\x44\xa9\x00\x35\x87\x92\xce\x48\xc6\xf2\x12\x1a\x03\x65\x0f\x3f\x59\x21\xd6\xbf\xac\x85\x4b\x8d\x5c\xcc\x9b\x85\x9b\xf1\x82\x8b\xcf\x20\xe6\xfa\x8e\xce\xc8\xbb\x66\x70\xd9\xce\xd1\x92\xa7\xa3\x02\xb0\x9f\x26\xc0\xfb\x33\x33\xac\x98\xd6\x80\xa2\xf6\xf8\x76\x7d\x3a\x39\x63\x93\x5f\xe7\x93\xaf\x37\x37\x27\xdf\x27\xf1\x9b\x63\xda\x59\x29\x85\x32\x41\xae\x6a\x8c\x03\x2b\x76\x5c\x10\x94\x2c\xb9\x96\xb8\x18\xeb\x01\x8f\x20\x74\x69\x5b\x4b\x01\x17\x99\x21\xbd\x7e\x9e\x36\x21\x44\x95\xe7\x74\xed\xdc\xcc\x99\x37\x7f\x19\xcd\xdc\xb6\x72\x19\xc3\x15\x45\x97\x6e\xf5\x8c\x89\x45\x5d\xcb\x5b\xdf\xa2\xde\x8a\x08\x35\x0a\x7a\x34\x4d\x21\xe3\xa2\x59\xbb\x9c\x36\x70\x69\xc7\x76\x19\xf9\xde\xd7\x6f\x71\x87\x2d\xcd\xca\x1f\x87\x43\x56\x8d\xf6\xf9\x5c\xa5\xa0\x40\xa4\x20\x92\x6e\x56\x21\xdc\xa3\x30\x6f\xc1\xbb\x0d\x6b\x00\xa7\xc9\x74\xd1\xad\x82\xa3\x40\x66\x86\x17\x6c\x0e\x36\x35\xb1\x43\xc6\xb2\x43\x46\x22\x45\xc6\xe7\x15\xb2\xfe\x69\xde\x9a\x51\xb4\x0e\xd6\x84\xa2\x96\xd5\x46\xd5\x14\x43\x56\x80\x06\xfc\x17\xf7\xe6\x40\x2e\x3b\xe5\x33\x5c\xd2\xcd\x52\xbd\xe1\xd8\x89\xe1\xe9\x2b\x9d\xf9\x5e\x8f\xf1\x82\xb1\xa5\xd8\x7e\x96\xfd\xd5\x82\x7d\xe0\xc5\x61\xa5\x6a\x59\xdb\x16\xf3\x56\xca\x1c\x98\x18\x17\x74\xe5\xe4\x0d\xe8\xee\x47\xfb\xf1\xb9\xf8\xb0\xb9\x8b\xae\xec\x40\x54\x45\x30\x7a\x63\x71\x35\x1c\x81\x10\xfa\xa5\x2a\x6e\x01\x87\x2c\x3e\xae\xd8\x18\x30\xb9\xf0\x6f\x54\xcb\xe2\x5c\x2c\x5c\x3a\xdb\xc7\xd9\x6e\xc6\x29\x85\x8c\x55\xb9\xae\xa9\xb8\x0a\x94\x99\xf8\xab\x42\xc6\xd0\x1b\x38\x5e\xc6\xce\x2f\x54\x96\xf2\xf8\xb3\xf1\x8c\xc6\xa3\x76\x12\x82\x02\xa6\x21\x7d\xfe\xf6\x8c\x86\x7e\xef\xda\xf5\xf7\xd6\xc1\xbc\x0a\x44\x65\xa5\x55\xa5\x0d\x89\xf1\xa6\xe1\x05\x3a\x9d\x47\x64\x82\x2a\x60\xd1\x3b\x20\x26\xa3\xdc\xb9\x68\xd2\x1c\xd5\x56\x7d\x7b\xc3\x8e\x55\x42\x82\xb0\xaf\x60\x6b\x02\x03\x98\x0e\xac\x91\xa5\x4c\xb3\x83\x69\x64\x0d\xd8\x40\xbc\xdd\x55\xeb\x25\xb2\xd1\xbd\xf3\xb5\xdf\x1a\x7f\x56\x37\xec\x42\xff\xb5\xa2\xe1\x29\xd0\x2e\xa7\xdc\x4b\xae\x75\x43\xde\xdb\xb7\x45\x80\xb5\xf6\xb2\x3f\x8c\xbb\xa3\x17\xee\x3f\x0f\xfa\x8c\x24\xb2\x28\x98\xe8\xf7\xb6\x51\x64\x32\x9c\x3b\x2a\xe7\xbf\x59\x0d\xdd\xf6\x89\xe7\x4a\x60\xac\x19\x22\x5b\xb8\xfa\xc4\x35\x14\x01\xa5\x18\x3e\xb6\xe1\x23\x14\x7b\x21\x3e\xca\xbc\x2a\x1c\x51\x7a\x25\x94\x95\xe0\x0f\x15\x7c\x5a\x61\xd5\x58\xb9\xda\xfb\xda\x44\x64\x28\x8b\xff\x64\x28\x89\x6e\x7f\x3f\x3c\x1a\x40\x3c\x86\x64\xc3\xcd\x7e\x4b\xe6\x81\xac\x07\x32\x0e\xf6\xbc\xa8\xfe\x5b\x46\xbf\x03\x00\x00\xff\xff\xa4\x13\xfe\x61\x06\x16\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5638, mode: os.FileMode(420), modTime: time.Unix(1546412796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
