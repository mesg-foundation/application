// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x4f\xdb\x3e\x14\x7d\xcf\xa7\xb0\x0c\x6f\xbf\x5f\x29\xd3\xa4\x49\xf4\x8d\xbd\x4d\x9a\x06\x12\x6f\x83\x6c\x32\xc9\x4d\x31\x4b\x6c\x73\xed\xa0\x75\xa8\xdf\x7d\x4a\xd2\xa6\x4e\x6c\x27\x61\x74\x68\x5a\xd7\xa7\xd6\xd7\xf7\xcf\x39\xd7\x3e\xbe\x7d\x8a\x08\xa1\xc7\x3a\xb9\x83\x82\xd1\x05\xa1\x77\xc6\xa8\xc5\x7c\x7e\xaf\xa5\x98\x35\xab\x27\x12\x97\xf3\x14\x59\x66\x66\xa7\xef\xe6\xcd\xda\x11\xfd\xbf\xf2\x33\x2b\x05\x95\x93\xbc\xbd\x87\xc4\x34\x6b\x08\x0f\x25\x47\x48\xe9\x82\x5c\x47\x84\x10\x42\x05\x2b\x80\x46\x84\xc4\xb5\x9d\xa5\x29\x37\x5c\x0a\x96\x5f\xa2\x54\x80\x86\x83\xa6\x0b\x92\xb1\x5c\x43\xbd\x41\xd9\xcb\x4f\x56\x88\xed\x2f\x2b\xb1\x36\xc8\xc5\xb2\x4e\x5c\xaf\x17\x5c\x7c\x04\xb1\x34\x77\x74\x41\xde\xd4\x8b\xeb\xc6\x46\x35\x4f\x27\x05\x60\xdf\xdb\x00\x6f\xcf\xda\x65\xc5\x8c\x01\x14\x95\xc7\x97\xeb\xd3\xd9\x19\x9b\xfd\x38\x9f\x7d\xbe\xb9\x39\xf9\x3a\x8b\xff\x3b\xa6\x9d\x4c\x29\xe8\x04\xb9\xaa\x30\x0e\x64\xec\xb8\x20\x28\xa9\xb9\x91\xb8\x9a\xea\x01\x8f\x20\x8c\xb6\x77\x4b\x01\x17\x59\x4b\x7a\xf5\x79\xda\x85\x10\x65\x9e\xd3\xad\x73\x6d\x6b\xbf\xf9\xdb\xd8\xda\xc6\xda\xd5\x6e\xdc\x50\x74\xe9\x76\xaf\xdd\x62\x51\xd7\xf0\xd6\xdf\x51\x1d\x45\x84\x0a\x05\x3d\x9a\xa7\x90\x71\x51\xe7\xd6\xf3\x1a\x2e\xed\xec\x5d\x47\xbe\xef\xdb\x6f\x71\x87\x2d\xc3\xf4\xb7\xc3\x21\xab\x42\xfb\xeb\x5c\xa5\xa0\x40\xa4\x20\x92\x6e\x55\x21\xdc\x93\x30\x8f\xe0\x1d\xc3\x1a\xc0\xd9\x56\xba\xea\x76\xc1\x51\xa0\xd6\xc2\x0b\xb6\x04\x9b\x9a\xd8\x21\x63\xdd\x21\x23\x91\x22\xe3\xcb\x12\x59\xff\x36\x8f\x56\x14\x6d\x83\xd5\xa1\xa8\xb5\x6b\xa7\x6a\x8a\x21\x2b\xc0\x00\xfe\x8d\x67\x73\xa0\x96\x67\xd5\x33\xdc\xd2\x5d\xaa\xde\x72\xec\xc4\xf0\xbc\x2b\x1d\x7b\xef\x8d\xf1\x82\xb1\xa5\xd8\xfe\xac\xfb\xd9\x82\xef\xc0\x8b\xc3\x4a\xd5\xb0\x36\x16\xf3\x56\xca\x1c\x98\x98\x16\x14\x41\x01\x33\x90\xee\x35\xe8\xc6\x69\x0a\x72\xd7\xbb\x7a\xe3\x44\x59\x78\x1b\x5e\x5b\xaf\xc2\x9e\x84\xd0\x4f\x65\x71\x0b\x18\xb2\xbe\xdf\xc0\x08\x98\x2f\xfc\x47\x76\x63\x3d\x17\x2b\x17\xbf\xe7\xc0\x91\xe6\x10\x64\xac\xcc\x4d\x05\xf5\x2a\xd4\xe4\x68\xe8\xf7\x73\x9f\xb9\xbd\x49\xb6\xf7\xca\x51\x59\x1a\x55\x1a\xbd\x45\x11\xef\x14\x3e\x20\xed\x9e\x5b\x15\x3c\xf6\xd6\x21\x1a\xb8\x3d\x93\xdc\xb9\xa8\xcb\x9c\xf4\x8e\x58\x32\xec\x8d\xa5\x21\x41\xd8\x57\xb0\x2d\x81\x01\x4c\x07\xa6\xdc\x29\x33\xec\x60\x94\xbb\x06\x1b\x88\x37\xfd\x30\xb5\x19\x5e\x20\x1b\xdd\x21\xa7\x19\xae\x7f\xaf\x6e\xd8\x8d\xfe\x63\x45\xc3\xd3\xa0\xe7\xdc\x72\x2f\xb9\xd6\x48\xb8\xb7\x61\x3a\xc0\x5a\x33\xdd\x0e\xe3\xee\xe8\x85\xfb\x6f\xb9\xcf\x48\x22\x8b\x82\x89\xfe\x58\x30\x89\x4c\x86\x4b\x47\xe5\xdc\xd1\x96\x8c\x8c\xb7\xa4\x37\xe2\x76\xd2\x33\x44\xb6\x72\xf5\x89\x1b\x28\x02\x4a\x31\x7c\x6d\xc3\x57\x28\xf6\x42\x7c\x94\x79\x59\x38\xa2\xf4\x4a\x28\x4b\xc1\x1f\x4a\xf8\xb0\xc1\x6a\xb0\x74\xb5\xf7\xb5\x89\xc8\x50\x16\xff\xc8\x50\x12\xdd\xf7\xfd\xf0\x68\x00\xf1\x18\x92\x0d\xb7\xfa\x91\xca\x03\x55\x0f\x54\x1c\x7c\xf3\xaa\x7f\xe4\xd1\x3a\xfa\x19\x00\x00\xff\xff\xa9\xaf\xd0\xe7\xf7\x14\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5367, mode: os.FileMode(420), modTime: time.Unix(1546878705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
