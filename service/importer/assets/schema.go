// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x4f\xdb\x30\x10\x7e\xcf\xaf\xb0\x0c\x6f\x5b\x29\xd3\xa4\x49\xf4\x8d\xbd\x4d\x9a\x06\x12\x6f\x83\x6c\x32\xc9\xa5\x98\x25\xb6\xb9\x38\x68\x1d\xea\x7f\x9f\x92\xb4\xae\x13\xdb\x69\x0a\x1d\x9a\xd6\x45\x42\x4a\xcf\x77\x67\x7f\xdf\xd9\xdf\x39\x3c\x45\x84\xd0\xe3\x32\xb9\x83\x82\xd1\x19\xa1\x77\x5a\xab\xd9\x74\x7a\x5f\x4a\x31\x69\xad\x27\x12\xe7\xd3\x14\x59\xa6\x27\xa7\x1f\xa6\xad\xed\x88\xbe\xad\xe3\xf4\x42\x41\x1d\x24\x6f\xef\x21\xd1\xad\x0d\xe1\xa1\xe2\x08\x29\x9d\x91\xeb\x88\x10\x42\xa8\x60\x05\xd0\x88\x90\xb8\x19\x67\x69\xca\x35\x97\x82\xe5\x97\x28\x15\xa0\xe6\x50\xd2\x19\xc9\x58\x5e\x42\xe3\xa0\x6c\xf3\x93\x95\x62\xfd\xcb\x9a\xb8\xd4\xc8\xc5\xbc\x99\xb8\xb1\x17\x5c\x7c\x06\x31\xd7\x77\x74\x46\xde\x35\xc6\x65\x3b\x46\x4b\x9e\x8e\x4a\xc0\x7e\x9a\x04\xef\xcf\x8c\x59\x31\xad\x01\x45\x1d\xf1\xed\xfa\x74\x72\xc6\x26\xbf\xce\x27\x5f\x6f\x6e\x4e\xbe\x4f\xe2\x37\xc7\xb4\x33\x53\x0a\x65\x82\x5c\xd5\x18\x07\x66\xec\x84\x20\x28\x59\x72\x2d\x71\x31\x36\x02\x1e\x41\xe8\xd2\xf6\x96\x02\x2e\x32\x43\x7a\xfd\x3c\x6d\x52\x88\x2a\xcf\xe9\x3a\xb8\x19\x33\x6f\xfe\x32\x9a\xb1\x6d\xe5\x32\x8e\x2b\x8a\x2e\xdd\xea\x19\x17\x8b\xba\x96\xb7\xbe\x47\xbd\x15\x11\x6a\x14\xf4\x68\x9a\x42\xc6\x45\x33\x77\x39\x6d\xe0\xd2\x8e\xef\x32\xf2\xbd\xaf\xdf\xe2\x0e\x5b\x9a\x95\x3f\x0e\x87\xac\x1a\xed\xf3\xb9\x4a\x41\x81\x48\x41\x24\xdd\x55\x85\x70\x8f\xc2\xbc\x05\xef\x36\xac\x01\x9c\x66\xa5\x8b\x6e\x15\x1c\x05\x32\x23\xbc\x60\x73\xb0\xa9\x89\x1d\x32\x96\x1d\x32\x12\x29\x32\x3e\xaf\x90\xf5\x4f\xf3\xd6\x15\x45\xeb\x64\x4d\x2a\x6a\x79\x6d\x54\x4d\x31\x64\x05\x68\xc0\x7f\x71\x6f\x0e\xac\x65\xa7\xf5\x0c\x97\x74\x33\x55\xcf\x1c\x3b\x39\x3c\x7d\xa5\x33\xde\xeb\x31\x5e\x30\xb6\x14\xdb\xcf\xb2\x3f\x5b\xb0\x0f\xbc\x38\xad\x54\x2d\x6b\xdb\x72\xde\x4a\x99\x03\x13\xe3\x92\xae\x82\xbc\x09\xdd\xfd\x68\x3f\xbe\x10\x1f\x36\x77\xd2\x95\x1f\x88\xaa\x08\x66\x6f\x3c\xae\x86\x33\x10\x42\xbf\x54\xc5\x2d\xe0\x90\xc7\xc7\x15\x1b\x03\x2e\x17\xfe\x8d\x6a\x79\x9c\x8b\x85\x4b\x67\xfb\x38\xdb\xcd\x04\xa5\x90\xb1\x2a\xd7\x35\x15\x57\x81\x32\x13\x7f\x55\xc8\x18\x7a\x03\xc7\xcb\xf8\xf9\x85\xca\x52\x1e\xff\x6a\x3c\xd6\x78\xd4\x4e\x42\x50\xc0\x34\xa4\xcf\xdf\x9e\xd1\xd0\xef\x5d\xbb\xfe\xde\x3a\x98\x57\x81\xa8\xac\xb4\xaa\xb4\x21\x31\xde\x34\xbc\x40\xa7\xf3\x88\x4c\x50\x05\x2c\x7a\x07\xc4\x64\x54\x38\x17\xcd\x32\x47\xb5\x55\xdf\xde\xb0\x73\x95\x90\x20\xec\x2b\xd9\x9a\xc0\x00\xa6\x03\x6b\x64\x29\xd3\xec\x60\x1a\x59\x03\x36\x90\x6f\x77\xd5\x7a\x89\x6c\x74\xef\x7c\xed\xb7\xc6\x9f\xd5\x0d\xbb\xd0\x7f\xad\x68\x78\x0a\xb4\xcb\x29\xf7\x92\x6b\xdd\x90\xf7\xf6\x6d\x11\x60\xad\xbd\xec\x0f\xe3\xee\xe8\x85\xfb\xcf\x83\x3e\x23\x89\x2c\x0a\x26\xfa\xbd\x6d\x14\x99\x0c\xe7\x8e\xca\xf9\x6f\x56\x43\xb7\x7d\xe2\xb9\x12\x18\x6f\x86\xc8\x16\xae\x3e\x71\x0d\x45\x40\x29\x86\x8f\x6d\xf8\x08\xc5\x5e\x88\x8f\x32\xaf\x0a\x47\x94\x5e\x09\x65\x25\xf8\x43\x05\x9f\x56\x58\x35\x56\xae\xf6\xbe\x36\x11\x19\xca\xe2\x3f\x19\x4a\xa2\xdb\xdf\x0f\x84\x86\xae\x04\x46\xf5\xdf\x32\xfa\x1d\x00\x00\xff\xff\x5b\x07\x20\x4b\x72\x15\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5490, mode: os.FileMode(420), modTime: time.Unix(1544964977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
