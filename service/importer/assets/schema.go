// Code generated by go-bindata.
// sources:
// service/importer/assets/schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\xb5\xb7\x35\xcb\x76\xd9\x21\xb7\xed\x36\x60\x58\x0b\xf4\xb6\xc2\x1b\x14\x9b\x4e\xd4\xd9\x92\x4a\x49\x01\xb2\x22\xff\x3e\xd8\xae\x1d\x39\x92\x1c\xa7\xed\x80\x61\x59\x4e\x0a\x29\x52\xe4\x23\xf5\x44\x3f\x26\x84\xd0\x4b\x9d\xad\xa1\x62\x74\x41\xe8\xda\x18\xb5\x98\xcf\xef\xb5\x14\xb3\x56\xfa\x56\xe2\x6a\x9e\x23\x2b\xcc\xec\xdd\x87\x79\x2b\xbb\xa0\x57\xb5\x9d\xd9\x2a\xa8\x8d\xe4\xf2\x1e\x32\xd3\xca\x10\x1e\x2c\x47\xc8\xe9\x82\xdc\x25\x84\x10\x42\x05\xab\x80\x26\x84\xa4\x8d\x9e\xe5\x39\x37\x5c\x0a\x56\xde\xa0\x54\x80\x86\x83\xa6\x0b\x52\xb0\x52\x43\xb3\x41\xb9\xe2\xc7\xd6\xc5\x06\x50\x73\x29\x7a\x81\x73\xb6\x36\xc8\xc5\x8a\x36\xe2\xdd\x95\x73\x62\x7c\xef\x55\x27\xaf\xb8\xf8\x02\x62\x65\xd6\x74\x41\xde\x0f\x3c\xe4\xa0\x33\xe4\xca\x9c\x70\xe8\x86\x6b\xbe\xe4\x25\x37\xdb\xda\xa2\x93\x2a\xbb\x2c\xb9\x5e\xbb\x22\x04\x25\x35\x37\x12\xb7\x53\x5d\xc3\x06\x84\xd1\xee\x6e\x29\xe0\xba\xe8\x21\xae\x7f\x8f\x7b\x17\xc2\x96\x25\xed\x8c\x1b\x5d\xbf\x0a\x17\xad\xd7\x1d\x2b\x4e\xbf\x51\x31\x63\x00\xc5\x8d\x5f\xab\x7e\xcb\xf7\x3b\x36\xfb\xf5\x71\xf6\xed\xc7\x2c\x7d\x73\xe9\xa9\xeb\xae\x43\xa8\x53\xa0\x17\xf3\x1c\x0a\x2e\x9a\x83\xf5\xbc\xc9\x95\x0e\xf6\xee\x92\xd0\xba\x5b\xa5\x03\xa8\x0c\xd3\x3f\xcf\x04\xa9\x3a\xd5\xe7\x03\x95\x83\x02\x91\x83\xc8\x86\x21\xc5\x92\x9e\x94\xf0\x91\x64\x47\x13\x8d\x24\xd9\x87\xb9\x1d\xe2\xef\xd1\x4c\xaf\xe1\x15\x5b\x81\x8b\x4b\xea\x21\xb1\x1b\x20\x91\x49\x51\xf0\x95\x45\x76\x78\xdb\x8f\x46\x94\x74\xce\x1a\x57\xd4\xd9\xb5\xa7\x2e\xc5\x90\x55\x60\x00\xff\xb9\xae\x1c\x09\xe4\xa4\x60\xc6\xeb\xb9\x3f\xea\x40\x9c\x7a\x3e\x02\x2f\xc7\x40\x7f\xf0\x2c\x04\x93\x71\xe9\xd7\xfd\xed\x0e\x4f\x8b\x3e\x12\x2f\x76\x2b\x55\x8b\xda\x31\x9f\x4b\x29\x4b\x60\x62\x9a\xd3\x27\xa3\x29\x41\xfa\xd6\xf5\x13\x24\x6c\x15\xac\x4d\xa3\xbd\x8d\x5b\x12\x42\xbf\xda\x6a\x09\x18\xd3\x7e\x7a\x4a\x23\xa2\xbe\x6e\xbb\x2b\xa0\xf4\x1a\x80\xb4\x45\x29\x98\x2d\x4d\x9d\xcf\x6d\x0c\xf4\x64\xec\xff\xa9\xaf\xcd\xab\x91\x67\xf0\x0a\x50\x69\x8d\xb2\x46\x77\x59\xa4\x7b\xae\x8d\x90\x6c\xa0\xcb\xa3\x6d\xe8\x74\xca\x48\x37\x4f\x32\xdf\x00\xf2\x82\xb3\x65\x09\xce\xac\xd3\x06\xca\xb6\x21\x71\x01\x6d\xe4\xae\x8c\x8b\x26\xd7\x49\x2f\x83\x43\xac\xc1\x80\x34\x64\x08\xaf\xe5\xac\xab\x42\x04\x98\x73\xe2\xe2\x9c\x19\x76\x36\x5c\xdc\x24\x1b\xf1\x37\xbd\x93\xfa\x13\x5e\x40\x3c\xc3\x99\xa5\x9d\x92\xff\x2c\xf3\xb8\x85\xfe\x6b\x69\x27\xc4\x22\x81\xa2\x9d\x72\xed\x83\x80\x3b\x53\xdf\xab\x0d\xcb\x11\x24\xdb\x01\x76\x1c\x8b\x01\x81\xf8\x9f\xb1\x87\x28\x65\xb2\xaa\x98\xc8\x9f\xc5\xeb\xb2\xb4\x95\x77\x8b\x03\x03\x2c\x39\x32\xc4\x92\x83\x41\x76\x10\x01\x43\x64\x5b\x9f\xb6\xac\xe0\x0f\x16\x3e\x1b\xa8\xea\x00\x0c\x5a\x9f\xac\xf8\x93\x32\xc0\x31\xe3\x17\x3e\x7e\xf9\xd2\x31\x20\x0a\x94\xd5\x7f\x30\x94\x44\xff\x35\x3c\x13\x18\x86\xfc\x50\x7f\xfd\x25\xbb\xdf\x01\x00\x00\xff\xff\x76\x66\xfa\xcb\x47\x13\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 4935, mode: os.FileMode(420), modTime: time.Unix(1532601999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

