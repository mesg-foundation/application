// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// service/importer/assets/schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serviceImporterAssetsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4b\x6f\xd4\x30\x10\xbe\xe7\x57\x58\x6e\x6f\xb0\xdd\x22\x24\xa4\xee\xad\xdc\x90\x10\xad\xc4\x8d\x36\x20\x37\x99\x6c\x5d\x12\xdb\xb5\x9d\x8a\xa5\xda\xff\x8e\xe2\x3c\xd6\x89\xed\x24\xa5\x4b\x85\x58\x72\x4a\x3c\x9e\xc7\xf7\xd9\xf3\xc8\x63\x84\x10\x3e\x56\xc9\x2d\x14\x04\xaf\x10\xbe\xd5\x5a\xac\x96\xcb\x3b\xc5\xd9\xa2\x5e\x3d\xe1\x72\xbd\x4c\x25\xc9\xf4\xe2\xf4\xdd\xb2\x5e\x3b\xc2\xaf\x2b\x3d\xbd\x11\x50\x29\xf1\x9b\x3b\x48\x74\xbd\x26\xe1\xbe\xa4\x12\x52\xbc\x42\x57\x11\x42\x08\x61\x46\x0a\xc0\x11\x42\xb1\x91\x93\x34\xa5\x9a\x72\x46\xf2\x4b\xc9\x05\x48\x4d\x41\xe1\x15\xca\x48\xae\xc0\x6c\x10\xf6\xf2\xa3\x65\xa2\xfd\xb2\x1c\x2b\x2d\x29\x5b\x1b\xc7\x66\xbd\xa0\xec\x23\xb0\xb5\xbe\xc5\x2b\xf4\xc6\x2c\x6e\x6b\x19\x56\x34\x9d\x65\x80\xfc\xe8\x0c\xbc\x3d\xeb\x96\x05\xd1\x1a\x24\xab\x34\xbe\x5e\x9d\x2e\xce\xc8\xe2\xe7\xf9\xe2\xcb\xf5\xf5\xc9\xb7\x45\xfc\xea\x18\xf7\x3c\xa5\xa0\x12\x49\x45\x85\x71\xc4\x63\x4f\x45\x82\xe0\x8a\x6a\x2e\x37\x73\x35\xe0\x01\x98\x56\xf6\x6e\xce\xe0\x22\xeb\x48\xaf\x9e\xc7\x9d\x09\x56\xe6\x39\x6e\x95\x8d\xac\x7b\xf3\x1f\x63\x27\x9b\x3a\xae\x6e\x63\x43\xd1\xa5\x7b\x7a\xdd\x16\x8b\xba\x9a\xb7\xe1\x8e\xea\x2a\x4a\xa8\x50\xe0\xa3\x65\x0a\x19\x65\xc6\xb7\x5a\x1a\xb8\xb8\xb7\x77\x1b\xf9\xde\xdb\xb7\xb8\xc7\x96\x26\xea\xfb\xe1\x90\x55\xa1\xfd\x7d\xae\x52\x10\xc0\x52\x60\x49\x3f\xaa\x10\xee\x59\x98\x27\xf0\x4e\x61\x0d\xe0\xec\x22\xdd\xf4\x4f\xc1\xa9\x40\x9d\x84\x16\x64\x0d\x36\x35\xb1\x43\xc6\xb6\x47\x46\xc2\x59\x46\xd7\xa5\x24\xc3\x6c\x9e\x8c\x28\x6a\x8d\x19\x53\xd8\xda\xb5\xab\x6a\x82\x48\x52\x80\x06\xf9\x2f\xde\xcd\x91\x58\x9e\x14\xcf\xf8\x91\xee\x5c\x0d\x96\x63\xc7\x86\xa7\xaf\xf4\xe4\x83\x1e\xe3\x05\x63\x97\x62\xfb\xd9\x0e\xbd\x05\xfb\xc0\xb3\xcd\x72\x51\xb3\x36\x65\xf3\x86\xf3\x1c\x08\x9b\x67\x54\x82\x00\xa2\x21\xdd\xab\xd1\xe6\xe4\x27\x4c\x36\xbb\x66\x59\x6c\x74\xe6\x70\xe9\x6a\x57\x5d\x93\x95\x85\xf7\x0a\x19\xe9\xe7\xb0\x26\x42\xf8\x53\x59\xdc\x80\x0c\x49\xdf\x37\xc4\x04\xc4\x17\xfe\x24\x68\xa4\xe7\x6c\xe3\xe2\xf7\x5c\x61\x54\x5f\xab\x8c\x94\x79\x45\x6b\x1b\xb0\x4b\x5d\x34\xf6\xfd\xd4\xc6\xb9\xb7\x26\xe0\x4d\x62\xcc\x4b\x2d\x4a\xad\x5a\x14\xf1\xae\x67\x04\x9a\x85\x27\x4f\x83\x89\x64\x5d\xa2\x91\x7c\x9c\xa5\x4e\x99\x09\x73\x56\x67\xb2\x0a\xbb\xd7\x96\x82\x44\xc2\xbe\x8c\xb5\x04\x06\x30\x1d\x58\x2f\x48\x89\x26\x07\xd3\x0b\x0c\xd8\x80\xbd\xf9\x97\xa9\xf3\xf0\x8c\xb2\xd1\x1f\x9b\xea\x71\xfd\xcf\xd6\x0d\xfb\xa0\xff\xda\xa2\xe1\x39\xa0\xa7\x64\xb9\x97\x5c\x6b\xc8\xdc\xdb\x78\x1e\x60\xad\x9e\x97\xc7\x71\xf7\xea\x85\xfb\xff\x3d\x64\x24\xe1\x45\x41\xd8\x70\xd0\x98\x45\x26\x91\x6b\xa7\xca\xb9\xc3\x32\x9a\x18\x98\xd1\x60\x68\xee\xb9\x27\x52\x92\x8d\x5b\x9f\xa8\x86\x22\x50\x29\xc6\xd3\x36\x9c\x42\xb1\x17\xe2\x03\xcf\xcb\xc2\x29\x4a\x2f\x84\xb2\x64\xf4\xbe\x84\x0f\x0d\x56\x2d\x4b\xb7\xf6\xbe\x34\x11\x99\xe4\xc5\x7f\x32\x04\x97\x6e\x7f\x3f\x3c\x1a\x80\x3d\x84\xca\x86\x1b\xfd\x44\xe4\x81\xa8\x47\x22\x0e\xf6\xbc\xea\x1f\x3f\xda\x46\xbf\x02\x00\x00\xff\xff\xc1\x59\xbd\xe5\x49\x15\x00\x00")

func serviceImporterAssetsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_serviceImporterAssetsSchemaJson,
		"service/importer/assets/schema.json",
	)
}

func serviceImporterAssetsSchemaJson() (*asset, error) {
	bytes, err := serviceImporterAssetsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service/importer/assets/schema.json", size: 5449, mode: os.FileMode(420), modTime: time.Unix(1547338226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"service/importer/assets/schema.json": serviceImporterAssetsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"service": &bintree{nil, map[string]*bintree{
		"importer": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"schema.json": &bintree{serviceImporterAssetsSchemaJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
