// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// readme_template.go
// readme_template.md
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _readme_templateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5d\x8f\xdb\x36\xd6\xbe\x96\x7e\x05\x5f\x03\xed\x2b\xb5\xae\xfc\x21\xc9\x5f\x8b\xb9\x68\x93\x16\xc8\x62\x93\x2e\xd2\x2c\xf6\x22\x0c\x02\x4a\xa2\x66\x88\xc8\x92\x57\x92\x27\x9c\x0c\xfc\xdf\x17\x0f\x0f\x25\xcb\x13\xcf\x8c\x1b\x2c\x16\xd8\x01\x3c\xb2\x48\x9e\xef\xe7\x1c\x1e\xd2\x93\x09\x7b\x51\x65\x92\x5d\xcb\x52\xd6\xa2\x95\x19\x4b\xee\xd8\x75\xf5\x53\xa2\xca\x4c\xb4\x22\x60\x2f\x7f\x67\x6f\x7e\x7f\xc7\x7e\x7d\xf9\xea\x5d\xe0\x4e\x26\xac\xa9\xf6\x75\x2a\x9b\x0d\xbe\xa7\xdb\x6c\xd2\xc8\xfa\x56\xa5\x72\x22\x9a\x46\xb6\xcd\xa4\x96\x22\xdb\xca\x77\x72\xbb\x2b\x44\x2b\x83\x6d\xe6\xee\x44\xfa\x49\x5c\x4b\x46\x0b\x5c\x57\x6d\x77\x55\xdd\x32\xcf\x75\x46\xc9\x5d\x2b\x9b\x91\xeb\x8c\xd2\x6a\xbb\xab\x65\xd3\x4c\xae\xbf\xa8\x1d\x06\xf2\x6d\x8b\x87\xaa\xe8\xff\x44\x55\xfb\x56\x15\x78\xa9\x0c\xc1\x4e\xb4\x37\x93\x5c\x15\x12\x5f\x30\xd0\xb4\xb5\x2a\xaf\xcd\x5c\xab\xb6\x72\xe4\xfa\xae\x9b\xef\xcb\x94\x59\x43\xde\x4a\x91\x79\xf8\xc2\xde\x7f\x80\xd8\x31\x2b\xc5\x56\x32\x22\xf3\x99\xd7\x8d\xca\xba\xae\x6a\x9f\xdd\xbb\xce\xf5\x17\xf3\xc6\x36\x57\x0c\x5a\x05\x6f\xe4\x67\x30\x91\xb5\x67\xd4\xc6\xfb\x2f\xfb\x3c\x97\xb5\x61\xeb\xfb\xae\xa3\x72\x43\xf0\x7f\x57\xac\x54\x05\x58\x38\xb5\x6c\xf7\x75\x89\xd7\x31\xcb\xb7\x6d\xf0\x2b\xb8\xe7\xde\x08\x8c\xd8\x77\xff\xda\xb0\xef\x6e\x47\xa4\x89\x91\xe5\xbb\xce\xc1\x75\x9d\x5b\x51\xb3\x64\x9f\x33\x92\x43\x42\x5c\xe7\x23\xa9\x73\xc5\x54\x15\xbc\xa8\x76\x77\xde\xf7\xc9\x3e\x1f\xb3\xeb\x2f\xbe\xeb\xa4\xc5\xaf\x9d\xa6\xc1\x8b\xa2\x6a\xa4\xe7\xbb\xff\x29\x7d\xc0\x86\xf8\x3f\xc2\x48\xd6\x35\xe9\x6d\x07\x93\x7d\x1e\xfc\x02\xd5\x3d\x7f\x8c\x15\xee\xc1\x75\xdb\xbb\x9d\x45\x00\x5c\xbe\x4f\x5b\x70\x31\xf6\xd9\x78\xb8\x8e\x2a\xf3\x8a\xb1\xaa\x09\x7e\x53\x85\x7c\x55\xe6\x55\x4f\x67\x43\xd8\x8d\x0f\x38\x98\x18\x32\x66\xc3\xe8\x3a\x8d\xfa\x62\xde\x55\xd9\x2e\x22\xd7\xd9\x02\xd9\xac\x67\xfa\xba\xca\xa4\x19\x7c\xa7\xb6\x92\x01\x26\x01\xbe\x41\x8e\x81\x8a\x97\xab\x87\xb2\x7c\xf6\x46\x6c\xa5\xe7\x5b\x09\x90\x69\xad\xcc\x55\x00\xe9\xee\xe1\x09\xda\x3f\xd4\x17\xd0\x1a\x6d\x4e\x49\xa1\xe8\x93\xa4\xd0\xd5\xf3\x87\x9a\x9f\x32\x80\x69\xcf\x31\x80\x71\x9e\x7f\x34\xf4\x2b\x0e\xd6\xfa\xc7\x99\xbc\x6a\x5e\xaa\xda\xf3\x59\x52\x55\xc5\x90\x5a\x14\xcd\x33\x96\xdf\x35\x64\xb8\xac\x73\x91\xca\xfb\xc3\x80\xda\x42\x02\x28\xff\x98\x6e\xb3\x3f\xa8\x80\xfc\x6c\xca\xc3\x5b\x53\x3e\x5a\x5b\x3e\x5e\x67\xec\xca\xe2\xc3\x1b\x71\x3d\xcb\xb9\x5e\x25\x5c\x4f\x57\x5c\x4f\xa7\xe7\x3f\x79\xce\xb5\x48\xb9\x5e\xcf\xb9\x4e\x67\x5c\x2f\x24\xd7\xab\x90\xeb\x10\xf3\x29\xd7\xab\x05\xd7\x32\xe7\x7a\xb9\xe6\x7a\x2a\xb8\x8e\x12\xae\xf3\x88\xeb\x55\xc4\xf5\x74\xc1\xf5\x34\xe7\x3a\x9e\x72\xbd\x58\x73\x9d\x2c\xb9\x96\x19\xd1\xc6\x31\xd7\x99\xe0\x5a\x44\x5c\x8b\x35\xad\x8b\xa6\x5c\x67\x0b\xae\x97\x82\xeb\x59\xc6\xf5\x62\xce\xf5\x34\xe6\x3a\x8a\xb8\x5e\xac\xb8\x9e\xc7\x5c\xaf\x23\xae\x73\xc1\x75\x96\x71\x3d\x5f\x72\x1d\x26\x44\x37\x83\x7e\xa0\x85\x3e\xe0\x1b\x73\xbd\xc4\x47\x72\x9d\x41\xa7\x35\xd9\xb2\x4c\xb9\x5e\x64\x5c\x4f\xe7\x24\x4b\x2e\xb8\x16\x39\xf1\x5c\xa5\x24\x2b\x12\x5c\xc7\x6b\xae\xd7\x09\xd7\x21\xec\x9f\x71\x1d\xae\xb9\x5e\x42\x8f\x98\xf8\xad\x97\x5c\x47\x19\x7d\x8c\x0d\x29\xd7\xf3\x8c\xd6\xcf\x67\x5c\x2f\x73\xae\xd3\x25\xd7\xc9\x82\xeb\x70\x66\xe9\x72\xe2\x31\x0d\xb9\x5e\xcf\xb8\x9e\x43\xa6\xe0\x5a\xce\xb9\x8e\x42\x92\x37\xcf\x49\xef\x08\xb6\x84\x5c\xa7\x82\xeb\xa9\x24\x39\xab\x25\xd7\x8b\x29\xd7\x09\x3e\xd0\x01\xfe\x5d\x92\xaf\xe7\x21\xc9\x82\x8c\x34\xe3\x3a\x45\xec\x96\xa4\xd3\x6c\x49\x7e\x4b\x62\xae\xe3\x15\xc5\x5d\x2e\xb9\xce\xc1\x43\x92\xfd\x18\xc7\x7a\xc4\x73\x0e\x3c\xcc\xb8\x8e\x41\xbf\xe6\x7a\x91\x90\x9f\xe3\x8c\xeb\x75\xce\xf5\x6c\xca\x75\xb8\xe0\x7a\x16\x93\x6e\x88\x1d\x74\x8a\x40\xb3\xe0\x7a\x31\x23\xde\x72\x45\x31\x42\xac\xd3\x39\xf9\x30\x59\x93\x7e\xf0\x49\x14\x73\xbd\x8a\x09\x37\xab\x4e\xd7\x88\xeb\x75\xc8\x75\x2c\xb8\x5e\x4e\x09\x0b\xc0\x0d\xe8\x96\x2b\x8b\x3d\xf8\x2a\xa3\x35\x09\xb0\xb0\xa4\xb8\x85\x78\xae\xb8\xce\x42\xc2\x0f\x74\x5b\x58\x5c\xc6\x29\x61\x0f\x72\x66\x0b\x8a\x4d\x08\x0c\xac\xb8\x5e\x44\xa4\x8b\xc1\xd4\x94\xeb\x34\xa1\xb9\xd5\x8a\xeb\x50\x72\xbd\xcc\x68\x9d\x08\xb9\x96\x92\xeb\x1c\xf1\x91\x84\x21\x13\xa3\x98\xf0\x8f\x98\xaf\xd7\xe4\x4b\x83\x4b\xd8\x33\xe3\x7a\xb5\x26\xfe\xa1\x8d\x79\x68\xb1\x05\xcc\xc2\x87\xb0\x13\x76\x45\x6b\x5a\x1b\xcf\x29\x2f\x57\xb9\xcd\x15\xe0\x17\xbc\x04\xf9\x18\x3a\x20\x96\xc8\x1b\x93\x67\x92\xec\xc6\x98\x8c\xac\x4d\x88\x57\xc8\xf5\x74\x6d\xf3\x62\xcd\xf5\x5c\x12\x56\xd3\x15\x61\x0e\xba\xc0\x6f\xb1\x24\x19\x8b\x25\xc5\x1e\xbe\x05\xbe\xe1\xdb\x24\xa3\xf5\xc0\x08\xc6\xe6\x11\xd7\x12\xf9\x6c\x73\x0c\xba\x00\xcf\x49\x64\x65\xc3\xae\x94\xeb\x78\x46\xd8\x41\xfe\x22\x06\x98\x83\xdd\xf0\x2b\xf8\x9b\xda\x10\x72\x2d\x80\x91\x39\xf9\x30\x8e\x68\x0e\xf5\x03\x79\x64\xf2\x73\x45\xb9\xb3\xb0\xf2\x33\x49\x73\xc8\xe1\x30\x25\x7d\x81\x67\xe8\x07\x5f\x83\x8f\x8c\x29\x2e\xf0\x07\xb0\x39\x83\xfe\xa0\x13\x94\x4f\x39\x30\x14\x51\x0c\x92\x15\xe5\x8d\x58\x12\x66\x30\x8e\x27\xe8\x81\xdd\x79\x4a\x7e\x46\x5e\x21\xd7\x64\x42\xf2\x80\x47\xcc\x03\x2b\x39\x30\x93\x53\x7c\x60\xe7\x1a\x72\x10\x1b\x49\x7c\xa0\x17\x6a\x1d\xf4\x81\x3c\xe4\x1c\xb0\x08\x5c\xca\x90\x6c\xcc\x53\xae\x67\xe1\x69\xdd\xc5\xa7\xf3\xed\x34\xa3\xda\x6b\xea\x47\xd4\xad\x1b\x75\x5d\xd9\x73\x75\xdf\xf6\x0f\xe7\xfa\xb2\xae\xcb\x18\xf4\x75\xae\xe3\x3c\xbb\x93\x8c\x5d\xc7\x19\x5d\xd2\xb0\x8e\xc6\xae\xe3\xf7\x3d\xc1\x73\x6c\xa1\xe3\x0f\x86\xd5\x50\x47\xd3\xd9\xf4\xed\xe3\x85\xc6\x3e\xd7\xb0\xf5\x7d\x96\xe9\x94\x36\x57\x0f\x77\xdd\x7b\xf4\x23\x1b\x76\xa1\x91\x0c\x2d\xc8\x86\xcd\x66\xd1\x74\xcc\xd0\x4d\x6c\x86\xcd\x86\x17\xcd\xa7\xbe\x19\x47\x8f\xb0\xa1\x1e\xe2\x1f\xa5\xd2\xde\x2c\x0e\x67\xf3\x55\x1c\xc6\xeb\x31\x9b\xfa\x07\xd7\x11\x50\xe5\x7b\x23\xe8\xde\xd8\xbd\x61\xd6\x7c\xe8\xb9\x31\xff\x0f\x7d\xd8\x44\xdf\x12\x4e\x26\xcc\xb8\x83\x15\x95\xc8\x1a\x26\xca\x8c\xd1\x9a\x86\xb5\x37\x5d\xb3\x98\x57\xb5\x79\xbb\x56\xb7\xb2\x34\x8d\xa9\x39\x84\xbc\x6a\xfb\xb5\xa2\x24\xbf\x33\x95\x0f\xe8\xd2\x6a\x5f\x64\xac\xac\x5a\x96\x48\x96\x57\xfb\x32\x63\x55\x6d\x8e\x2c\xc3\x09\x48\x96\x59\x40\x91\x36\xca\x78\xcf\x9d\x0a\x52\x51\x96\x55\xa9\x52\x51\xa0\x31\x84\xe9\xf6\xe4\x11\xbc\x95\xbb\x42\xa4\xd2\xa3\xee\x79\xc4\xf9\x68\xcc\x46\x93\xd1\x98\xfd\x34\xa3\xd0\xe6\x63\x56\x7d\x02\xc5\x47\x1b\xb8\xf7\xa7\xcc\x3e\xfc\x05\xf3\x88\xba\xe8\xa1\x93\x03\x16\x67\x70\xf1\x68\x27\x4f\x2e\xfd\xae\x61\xa9\x28\xff\x1f\x5e\x12\xe6\x44\x67\x0c\x38\xd3\xde\xa3\xbf\xef\x43\x13\xd8\xb8\x21\x40\xce\xc1\x7d\x5e\x06\xdc\x68\x9c\x6b\xb9\xfa\x36\xae\xaf\xf7\x4d\x4b\x8b\x54\xc3\x0a\xf5\x49\xda\x48\x27\xfb\x96\xed\x44\xa9\xd2\x86\x7d\xbe\x91\xa5\x1d\xfd\x6c\x42\xd2\x29\x61\xc3\xd9\x85\xb9\x51\xdb\x5d\xa1\x72\x25\x1b\xd6\x88\x5c\x32\x55\xaa\x56\x89\x42\x7d\x11\xad\xaa\x4a\x56\xe5\xec\xba\xa8\x12\x51\xb0\x5b\x51\x2b\x91\x14\xb2\xb1\xe1\xec\x75\x38\x0d\x29\x45\x14\x3e\x3c\x3a\xf9\xb8\xec\x6c\x0e\x1a\x8d\xbd\x91\x01\xd6\xc6\x2e\x1e\xb1\x1f\xe9\x00\xf9\x23\x1b\xf9\x1b\x86\x57\x59\xd7\xe4\x21\xcf\xf7\x4f\xce\x43\x62\x88\x76\x73\x80\x79\x0a\xf1\x26\xb9\xff\xdb\xb0\x87\x56\x0f\xa0\x3f\x38\x88\xfd\xcf\xe1\xdf\x38\xf9\x1b\x73\x40\x19\x83\x2f\x4a\x81\x4e\xcc\x63\x69\x60\x16\xc1\xb2\xe6\x24\xce\xa5\x19\xa9\x06\x71\x6b\x86\xb1\x30\x04\x1e\x90\x7a\x3c\x73\x12\xc9\xe6\x8a\x6d\xc5\x27\xe9\x75\x33\x63\x36\x1d\xb3\x42\x96\x5e\xe7\x50\x00\x0f\xd0\x29\x6d\x68\x6a\x51\x5e\xcb\xde\xdd\xc6\x71\xc4\xe9\x8a\x89\xdd\x4e\x96\x99\x09\x56\xd3\x69\x3d\x34\x18\xe3\xd6\x8c\x9e\x5e\x35\x4c\xb0\x16\x49\x36\x66\x37\x55\x91\x41\x39\x29\xd2\x1b\x0b\x3e\x7b\x85\x54\xd5\x63\xb6\x05\xfb\x8c\xb5\x15\x53\x6d\x63\xf1\x6b\xce\x7b\x1d\x2b\x58\xb2\x7b\x4f\x66\x7c\x80\xed\x5f\xef\xa3\xf7\xee\x85\xfb\xf5\xe6\xd9\x0d\x76\x3c\x0c\xc8\x4b\x55\x9f\x84\x23\x57\x45\x17\x93\x44\x16\xd5\x67\x26\x58\x2a\xeb\x56\xa8\x12\x24\x99\xaa\x65\xda\x56\xf5\x1d\x93\xdb\x44\x66\x99\xcc\x98\x2a\x8f\x74\xa7\x97\x65\x20\xf8\xad\xaa\x99\xd4\x62\xbb\x2b\x24\x72\xf3\xae\xda\xb3\x7a\x5f\x0e\x56\xb1\xaa\x64\x78\x4e\x82\x20\x30\x35\xc0\x0c\xa6\x55\x09\x91\x46\x25\xb0\xc9\xab\xa2\xa8\x3e\xc3\xc3\x37\x4a\xd6\xa2\x4e\x6f\xee\xcc\x95\x1b\xfe\x0c\x75\xf7\xc2\x58\x5e\x55\x41\xab\xdb\xe3\x80\xda\x5e\x0f\xa6\x19\x13\xc1\xae\xbc\x1e\x0e\x24\xdd\x40\xdb\x57\x61\x9c\xf3\x47\x60\x3c\xf2\x4f\x0b\x72\x07\xb6\xfb\x91\x95\x83\xb4\x56\xdb\xeb\xd1\x61\xe8\x51\xa2\x9d\x60\xfc\x51\x7a\xa3\x06\xa8\x8d\xf8\x87\xf4\x1d\x77\xdf\xf8\xe4\x38\x5e\x56\xad\xd4\xaa\x69\x1f\xf2\xed\x0a\xe0\x29\x17\xac\x52\x45\xf1\xb5\x70\x63\xda\x61\x98\x67\x58\xff\x70\xb7\xef\xf2\xea\x58\xef\xca\x2a\x93\x5d\xcd\x6a\x6b\x29\x4d\x25\x43\xce\x99\x94\x41\x49\x9a\x9a\xbc\xfa\xd6\xba\xe8\xec\x44\x7b\xf3\x37\xd5\xb4\x43\x92\x3f\x76\x85\x6a\xbd\x53\x96\x86\x08\x04\x48\xf0\x8f\x63\xb6\x3b\x26\x78\xcf\xc2\x54\x46\xa3\xf1\x15\xc3\x23\x78\x71\xa3\x8a\xac\x96\xe5\xfb\xdd\x07\x4c\xa9\x9c\xd1\xec\xa0\x90\x7e\xcb\x2e\xef\x50\xcd\x3c\x74\xd7\x83\x46\xd6\x6f\xf0\xec\x05\x77\x8d\x4f\xf1\x45\x01\xba\x7d\xbc\xce\x9d\xd8\xd4\x15\xbb\x14\xef\x6f\x4e\x2a\xde\xc9\x3a\x52\xe6\xf6\x58\xf3\xea\xdb\xf1\x91\xe8\xa4\xea\x61\x66\x78\x61\x69\x63\x3e\xb8\x70\x34\x46\x9a\xa4\x3b\x5b\xb3\x5c\xa7\x97\x3a\xa8\x6f\x3f\x74\xd8\x39\xf4\x45\xd0\xb0\xbd\x62\xdf\xdb\xaf\xf7\xc6\x4b\x67\x48\x6c\x11\x1c\x6d\x2e\x5a\xea\x8c\x6c\xb1\xbc\x74\xbd\x43\x5d\x4d\x73\xf1\x7a\x67\x74\xae\xfe\xf6\xb4\xcf\x16\xe2\xb3\x8c\x0f\x87\xb1\x81\x94\x79\x98\xff\xf8\x77\xa0\x9a\xfd\x56\x36\x6d\x55\x13\x3f\x56\xd3\x8b\x69\x7f\x68\xd3\xd9\x97\x99\x1c\xf6\x4a\x7d\xbd\xa6\x4c\x1f\x52\x7b\x99\xaa\x1f\x5c\xfb\x53\x0b\x75\xef\x3a\x28\x0f\x97\xf6\x83\x16\x2c\xf6\x38\xe6\xa8\xae\x43\xea\x49\xfb\x6e\xea\x12\x72\xba\xd3\xaf\x9a\xe0\xf5\xa7\x4c\xd5\x3f\x17\x85\xf7\x11\x3b\xcb\xdf\x45\x7b\x43\x0a\x77\xbf\x72\x04\x5d\xc1\xf2\xfd\xf1\xc9\x51\x6d\xba\x8c\xe3\x27\x7f\x7e\x38\x15\x45\x3f\xa5\x04\xff\xac\x55\x2b\xc1\xe3\xa1\x3c\x23\x62\xcc\xc8\x23\x30\x2e\xa0\xbb\xe8\x3f\x65\xcc\x8b\x1b\x9c\x18\x9b\x47\x78\x77\x5c\xe9\x82\xfa\xe1\xfb\x25\x82\x4e\xaf\x92\x1f\xc0\xa4\xf9\x33\x38\x61\xb5\x4c\xf7\x75\xa3\x6e\x65\x71\x06\x33\xcd\x53\xa0\x49\x6d\xae\x9f\x46\xbf\x0f\x93\xeb\xa0\x1d\x50\x85\x7c\xc2\x9e\xf3\xf8\xa4\xa2\x34\x99\xb0\x97\xaa\x76\xbb\x82\x6f\xa4\x1d\x6b\x5c\x3a\x2c\x6f\xe4\xf7\x33\x8a\xf7\xe0\xf9\x6b\xa5\x4a\xbb\x05\x19\x4a\xff\xe9\xbe\xda\xf8\xd9\x16\xf8\x53\x5f\x1b\x17\x9d\x09\x6b\xef\x9e\x63\xd7\xfa\xad\x7b\x62\xff\x1b\xc5\x50\x77\x5b\xbc\xfb\x1d\x3d\x53\xf5\x61\x7c\xc1\x8e\x19\x04\x81\xf9\x40\xf7\x7f\x07\x00\x00\xff\xff\xee\xfd\x14\x4f\xed\x1c\x00\x00")

func readme_templateGoBytes() ([]byte, error) {
	return bindataRead(
		_readme_templateGo,
		"readme_template.go",
	)
}

func readme_templateGo() (*asset, error) {
	bytes, err := readme_templateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme_template.go", size: 7405, mode: os.FileMode(420), modTime: time.Unix(1536233986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6e\x83\x30\x0c\x86\xef\x79\x0a\x4b\xf4\x84\x06\x0f\x50\x69\xb7\xed\x30\x55\xda\xa4\xa9\x0f\x40\xd6\x7a\x1d\x62\x05\x44\x68\x25\x94\xfa\xdd\x27\x3b\x40\x12\xc6\x76\xea\xa5\x75\x7e\xdb\xf9\xff\x7c\x6d\x02\xd6\xe6\xaf\xfa\x8c\x44\x4a\x59\x9b\x3f\xa1\x39\x74\x65\xdb\x97\x4d\x4d\xa4\xac\x2d\x3f\x21\x7f\xc7\xb6\x31\x65\xdf\x74\x03\x91\x2a\x8a\xe2\x43\x9b\x2f\x75\x46\x73\xca\x0e\x4d\x87\x60\xb0\xbb\x96\x07\x84\x23\xb6\xdf\xcd\xc0\xf7\x2d\x17\x94\xb5\x58\x1f\xe7\xfb\x9e\xaf\x58\xf7\x86\x28\x01\x57\x29\x6b\x3b\x5d\x9f\x10\x36\x15\x0e\x0f\xb0\x41\x56\x61\xfb\xe8\x27\x55\xc2\x39\xb9\xcd\x31\x45\x85\x0a\x87\x2d\x14\x93\x5a\x70\x7a\xb7\xb9\x78\x83\x33\x9d\x5a\xba\xd7\x44\x37\x48\xd3\x1d\x0e\x69\x0a\x5c\xed\x87\x16\xc7\x32\xd8\x64\x45\xdd\x20\xcb\x32\x88\x3e\x7d\xd8\xa3\xee\xf5\x4e\x02\x73\xc5\x79\x7f\x99\x58\x3b\x4d\x11\x89\x45\x31\x2a\x39\x9b\x12\x15\x70\x83\x49\x89\x52\x8b\x8f\x30\x5b\xfd\x1a\x41\xee\xb5\xa9\x84\x0e\x48\xb5\xe4\xd8\x6b\x53\x09\xc6\x79\x2e\xa4\xc8\xe2\x2a\x44\x5e\x5b\x67\x28\x9d\x97\xba\xbd\xc8\xaf\x97\x24\xe0\x6a\xa5\xee\x03\xb4\xe4\xdb\x1c\x51\x29\x05\x69\xe4\x39\x32\x9d\x06\x03\xa8\x22\xc5\x54\x9d\xf4\x3f\xd6\xe8\x65\x6f\x97\xde\x3f\x6d\x3c\x28\x1f\xaf\x11\xc5\xe5\x73\xb5\x0f\x18\xae\x3a\xca\xf3\x34\x9b\xb8\xb6\xa7\x1d\x34\x1d\x73\x27\x2c\xa9\xdf\x07\xeb\x1f\xb9\x27\xcb\xf0\xcf\x1a\xe4\x9a\xc9\x8e\x73\x11\xda\xb5\xb8\x9e\xed\x0a\xe3\xe8\xfc\x13\x00\x00\xff\xff\x03\xb4\x0d\x6e\x74\x04\x00\x00")

func readme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_readme_templateMd,
		"readme_template.md",
	)
}

func readme_templateMd() (*asset, error) {
	bytes, err := readme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme_template.md", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1536233986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"readme_template.go": readme_templateGo,
	"readme_template.md": readme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"readme_template.go": &bintree{readme_templateGo, map[string]*bintree{}},
	"readme_template.md": &bintree{readme_templateMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

