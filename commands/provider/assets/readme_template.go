// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\xab\xe3\x36\x10\x7e\xd7\xaf\x18\xf0\x42\x9d\xb0\x76\xde\x43\xfb\xb4\x39\x94\xc3\xb6\x5d\x68\xf2\x52\x42\xc0\x8a\xad\xc4\x22\x8e\x94\x4a\xf2\x2e\x41\x47\xff\xbd\x8c\xe4\x8b\xe2\x78\x2f\x50\xf6\x25\x19\xcd\x4d\xdf\x37\x9f\x35\x09\x58\x9b\xff\x45\xaf\xcc\x39\xb0\x96\x9f\x20\xdf\xf2\xca\xb9\xf4\x75\xb3\xc6\x88\x3f\x2c\xac\x65\xa2\x72\x8e\x10\x6b\xf3\x0d\xd3\xa5\xe2\x37\xc3\xa5\x40\x4f\x02\x1f\xa4\x30\x4c\x18\x4d\x48\x06\xfb\x57\xa1\x0d\x6d\x1a\x8a\xe1\x43\x9a\xc4\xc7\x05\xc6\x37\xec\xc4\x05\xc7\xa3\x3e\xa4\x49\x74\x5a\x10\xe8\xee\x7f\xf9\x8c\xdd\x9c\xcb\x60\x1f\xcc\x43\x9a\x04\x63\x61\xad\xa2\xe2\xcc\xe0\xdd\x85\xdd\xdf\xc3\x3b\x86\x5e\x58\xff\x36\xd6\x10\x00\x80\x0c\xf6\xd6\x4a\xd5\xc5\x3d\x39\x5f\xe1\xdc\x21\x4d\x66\x23\xf0\x06\x54\x94\xb5\x54\x2f\xa2\x94\x15\x1b\x19\xf7\xc4\x7b\x6c\x3b\xaa\x2f\x01\x9a\xb7\x0e\x69\xe2\xff\xa7\xc0\x0c\xd5\x17\x8f\xab\xcb\x7f\x84\x85\xd1\x59\x54\x8f\x81\xef\x82\x22\x09\xc4\xf3\x25\x24\x49\xe0\xcf\x97\xed\xef\xf0\x41\x2a\x46\xc8\xae\xe6\x1a\x34\x53\x9f\x79\xc9\x40\xb1\x7f\x5b\xae\x98\x86\xfd\x90\x71\x48\x6b\x63\x6e\x7a\xbd\x5a\x9d\xb9\xa9\xdb\x63\x5e\xca\xeb\xea\xca\xf4\x39\x3b\xc9\x56\x54\xbe\xe7\xaa\x94\x8a\x2d\xc0\x48\x38\x32\xe0\xe1\x32\x56\xc1\x89\x2b\x6d\x72\x42\xfe\x91\x2d\x94\x54\xf4\x91\xf1\x76\x38\xde\x41\xb5\x42\x70\x71\x06\x53\x33\x38\xc9\xa6\x91\x5f\xf0\x54\xca\xeb\x95\x8a\x0a\xa4\x82\x7d\xf0\xfa\x04\x1e\x11\x81\x73\xcb\xab\x08\x5e\x25\x4b\x9d\x23\x30\x8f\xd0\x07\x57\xda\x50\x65\xb2\x9a\x29\xb6\x8a\x4b\xf3\xda\x5c\x9b\x45\x4e\x48\x51\x14\x47\xaa\x6b\x82\x3f\xf0\x6b\x5a\xb6\xaa\x81\xec\xa4\xb7\x7f\x40\xdf\x75\x68\xd8\xd5\x2f\xb0\xc6\xcf\x70\x1b\x66\x86\x5f\x3b\x6a\xfe\x37\xbb\x49\xcd\x8d\x54\x77\xe7\x76\x12\x2a\x76\x6b\xe4\x1d\x4c\x34\xdd\xf7\xc8\x75\x9e\xe7\x7a\x40\xe2\x27\x8b\xe3\x1c\x34\xe9\x3a\x59\xfb\x70\x85\x87\x61\x2d\x6b\x34\x73\x6e\x23\xbf\x88\x46\xd2\xca\x37\xd7\xb2\x55\x25\x03\xfc\x18\x40\x9e\x26\x08\x70\xa6\xa6\x66\xa8\x45\x48\x0e\x81\x5f\x34\x62\xaa\x98\xfa\x5f\x18\x7b\x4c\xfe\xb3\x4b\x20\x7a\xb6\xfd\x90\xfa\x07\x98\x40\xb0\xc8\xf7\x9f\x6a\x82\xab\x67\xf6\x99\x12\xe2\x93\xe0\xc2\xee\x6b\x28\xac\x0d\xde\x02\xef\xea\x92\x27\x4b\xc8\x63\xe8\x43\xd4\x50\xe7\xde\x60\xb9\xc4\x8e\xcb\x25\xa0\xf9\x91\xdd\x3b\x6b\x77\xbf\xf5\xce\xa8\x09\x7a\xc8\x1b\x64\x59\x06\x33\xbf\x23\x99\x8a\x1a\xfa\xd1\x13\x42\x0b\xf9\x3c\xdd\x1a\x38\x61\xb8\xa3\xd4\xd5\x38\xe7\xaf\x45\x3a\x83\xa7\x88\x1c\x39\x22\x0b\xae\x40\xc7\x3b\x3f\x79\x78\xb4\xc1\xea\x42\x76\x87\x62\xb9\x84\x61\x17\x84\xbc\x87\x81\x78\xc4\xf1\xaa\x98\x2c\x8e\x87\x5d\x96\x80\x37\xa6\x82\x3d\xad\xb0\x41\xae\xe9\xfa\x22\x04\x53\x66\xc5\xf2\xa9\xb3\x5a\xf9\xc8\xab\xb8\xb5\xfe\xa3\x49\x70\x93\xa1\x4d\xc8\x4f\x12\x8e\x63\xfb\xa0\x9c\x37\xbd\x74\x0f\x20\x46\xed\x7c\x42\xc7\xb0\xaf\x8b\xd4\x1b\x5d\x45\xec\x79\xd2\x2f\x78\x7f\x40\xc0\x90\xf8\x6d\x05\xe3\xb1\x7d\x6a\xcd\x38\xb7\xee\x40\x46\xaa\xd2\x7b\x02\xd7\x60\x8f\x64\xe3\xd2\x5e\xcf\x90\xd3\xf1\x1d\x8a\x51\xaa\x90\x3d\x2a\x1b\x05\x83\xbe\x5d\xe9\x44\xe1\x9f\x24\xe1\x57\x78\xf5\x18\x26\x0f\xf0\x6b\xac\x06\x19\x63\x32\x0f\xae\x27\x21\x3b\xf7\x0f\x28\x39\x37\x8f\x51\xca\x6f\x3f\xca\xff\x02\x00\x00\xff\xff\xaf\xfa\x60\xe8\x89\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2441, mode: os.FileMode(420), modTime: time.Unix(1557430480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
