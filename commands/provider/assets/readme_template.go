// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\x6b\xc3\x36\x14\x7e\xd7\xaf\x38\xe0\xc2\x92\x50\xdb\xef\x61\x7b\x6a\xcb\x28\xdd\x56\x58\xf3\x32\x42\xc0\x8a\xad\xc4\x26\x8e\x94\x49\x72\x4b\x50\xf5\xdf\xc7\x91\x7c\x51\x1c\xf7\x02\xa3\x2f\xc9\xd1\xb9\xe9\xfb\xce\x67\x9d\x08\x8c\x49\xfe\xa2\x47\x66\x2d\x21\xc6\x24\xf7\x4c\xe5\xb2\x3a\xe9\x4a\x70\xf4\x44\x70\x27\xb8\x66\x5c\x2b\x42\x62\x58\x3f\x72\xa5\x69\x5d\x53\x0c\x6f\x66\x51\x78\x9c\x63\xfc\x9e\xed\x2a\x5e\xe1\x51\x6d\x66\x51\x70\x9a\x13\x00\x63\xaa\x1d\x24\x0f\xaf\xd8\xcd\xda\x18\xd6\xde\xdc\xcc\x22\x6f\xcc\x8d\x91\x94\xef\x19\xdc\x1c\xd8\xf9\x16\x6e\x18\x7a\x61\xf9\xdb\x50\x43\x00\x00\x62\x58\x1b\x23\x64\x1b\x77\xd8\x5d\x85\xb5\x9b\x59\x34\x19\x81\x77\xa0\x3c\x2f\x85\x7c\xe0\xb9\x28\x98\xb5\x73\x63\x18\x2f\xac\x6d\xff\x7a\x6c\x2b\xaa\x0e\x1e\x9a\xb3\x36\xb3\xc8\xfd\x8f\x81\x69\xaa\x0e\x0e\x57\x9b\x7f\x09\x0b\xa3\x93\xa8\x2e\x03\x5f\x82\x22\x11\x84\xf3\x25\x24\x8a\xe0\xcf\x87\x97\xdf\xe1\x4e\x48\x46\xc8\xaa\xac\x14\x28\x26\x5f\xab\x9c\x81\x64\xff\x36\x95\x64\x0a\xd6\x7d\xc6\x66\x56\x6a\x7d\x52\xcb\x34\xdd\x57\xba\x6c\xb6\x49\x2e\x8e\xe9\x91\xa9\x7d\xbc\x13\x0d\x2f\x5c\xcf\x34\x17\x92\xcd\x41\x0b\xd8\x32\xa8\xfc\x65\x09\x21\xff\x88\x06\x72\xca\x3b\xcf\x70\x2b\x6c\xcf\x20\x1b\xce\x2b\xbe\x07\x5d\x32\xd8\x89\xba\x16\x6f\x78\xca\xc5\xf1\x48\x79\x01\x42\xc2\xda\x7b\x5d\x42\xd7\x61\xdf\x54\x45\x80\xa8\x10\xb9\x4a\x10\x4b\xa2\x59\x5e\xa6\x2e\x9a\x2a\x4d\xa5\x8e\x4b\x26\x59\x5a\x05\xbc\x93\x52\x1f\xeb\x79\x42\x48\x96\x65\x5b\xaa\x4a\x82\x3f\xf0\xeb\x2c\x6f\x64\x0d\xf1\x4e\xbd\xfc\x01\x5d\x5b\xd7\x11\x69\xb6\xf5\x73\xac\x71\x73\x7b\xf1\x73\xc2\x2f\x1c\x75\xfe\x9b\x9d\x84\xaa\xb4\x90\x67\x6b\x57\x02\x0a\x76\xaa\xc5\x19\x74\x30\xd1\x5b\xe4\x39\xcd\x71\xd9\x23\x71\xd3\xc4\x11\xf6\x3a\xb4\x9d\x8c\xb9\xb8\xc2\xc1\x30\x86\xd5\x8a\x59\x7b\x2f\xde\x78\x2d\x68\xe1\x9a\x2b\xd1\xc8\x9c\x01\x7e\x00\x20\x76\x23\x04\x38\x4f\x5d\x32\xd4\xc1\x27\xfb\xc0\x2f\x0a\x31\x15\x4c\xfe\x3f\x8c\x49\xda\xc1\x72\x5f\x5b\x04\xc1\x6b\xed\xe6\xd4\xbd\xbb\x08\xbc\x45\xbe\x7e\xa1\x11\x2e\x94\xc9\xd7\x49\x88\x4b\x82\x03\x3b\x2f\x21\x33\xc6\x7b\x33\xbc\xab\x4d\x1e\xed\x1e\x87\xa1\x0b\x51\x4d\xad\x7d\x87\xc5\x02\x3b\x2e\x16\x80\xe6\x13\x3b\xb7\xd6\xea\x7c\xea\x9c\x41\x13\xf4\x90\x77\x88\xe3\x18\x26\x7e\x07\x32\x05\xd5\xf4\xc9\x11\x42\x0b\xf9\x5c\xdd\xea\x39\x61\xb8\xa5\xd4\xd6\x58\xeb\xae\x45\x3a\xbd\x27\x0b\x1c\x09\x22\xf3\x2e\x4f\xc7\x39\x9f\x1d\x3c\x5a\x63\x75\x26\xda\x43\xb6\x58\x40\xbf\x02\x7c\xde\xc5\x40\x1c\xe2\x70\x43\x8c\xf6\xc5\xc5\x0a\x8b\xc0\x19\x63\xc1\xae\x36\x57\x2f\xd7\x78\x6b\x11\x82\x29\x93\x62\xb9\xd4\x49\xad\x5c\xe4\x91\x9f\x1a\xf7\xd1\x44\xb8\xc0\xd0\x26\xe4\x87\x84\xab\xb0\xbd\x57\xce\x99\x4e\xba\x0b\x10\x83\x76\x2e\xa1\x65\xd8\xd5\x05\xea\x0d\xae\x2c\xf4\x5c\xe9\xe7\xbd\xdf\x10\xd0\x27\x7e\xae\x60\x38\xb6\xe7\x46\x0f\x73\x6b\x0f\x64\xa0\x2a\x9c\xc7\x73\xf5\xf6\x40\x36\x2c\xed\xf4\xf4\x39\x2d\xdf\xbe\x18\xa5\xf2\xd9\x83\xb2\x41\xd0\xeb\xdb\x96\x8e\x14\xfe\x21\x09\x3f\xe0\xd5\x61\x18\x3d\xc0\x8f\x58\xf5\x32\x86\x64\x2e\x5c\x57\x42\xb6\xee\x6f\x28\x39\x35\x8f\x41\xca\xcf\x1f\xe5\x7f\x01\x00\x00\xff\xff\x2a\xc2\x04\x51\x5f\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2399, mode: os.FileMode(420), modTime: time.Unix(1543901644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
