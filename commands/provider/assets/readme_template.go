// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdd\x6f\xdb\x36\x10\x7f\xe7\x5f\x71\x80\x0a\xd4\x36\x62\xf9\xdd\xd8\x1e\x86\x26\x58\x83\xae\xcd\x50\x07\x03\x06\xc3\x98\x68\xe9\x64\x11\x96\x49\x8d\xa4\x92\x19\x8a\xfe\xf7\xe1\x48\x7d\xd0\x1f\x69\x3b\x0c\x79\xb1\xc9\xfb\xbe\xdf\xef\xa8\x8b\xa0\x69\xe2\x2f\xfc\x80\x6d\x0b\x4d\x23\x72\x88\x57\x22\x6b\xdb\xc9\xfd\xed\x92\x34\xee\x32\x6d\x1a\x94\x59\xdb\x32\xd6\x34\xf1\x2d\x9a\x54\x8b\xca\x0a\x25\x49\x12\xc1\x07\x25\x2d\x4a\x6b\x18\x9b\xc3\xfa\x5e\x1a\xcb\xcb\x92\x93\x7a\x33\x89\xc2\xeb\x94\xf4\xb7\x98\x0b\x29\xe8\x6a\x36\x93\x28\xb8\x4d\x19\x74\xf9\xef\x9e\x28\x5a\xdb\xce\x61\xed\x8f\x9b\x49\xe4\x0f\xd3\xa6\xd1\x5c\xee\x10\xde\xed\xf1\x78\x03\xef\x90\xa4\xb0\xfc\x79\xf4\x61\x00\x00\x73\x58\x37\x8d\xd2\x9d\xde\x35\xe7\x3c\xda\x76\x33\x89\xae\x6a\xe0\x05\xb8\x4c\x0b\xa5\xef\x64\xaa\x32\x1c\x3b\xee\x1b\xef\x6b\x7b\xe4\x66\xef\x4b\x73\xa7\xcd\x24\x72\xff\xe7\x85\x59\x6e\xf6\xae\xae\xce\xfe\xb4\x2c\xd2\x5e\xad\xea\x54\xf1\xdd\xa2\x58\x04\x21\xbe\x8c\x45\x11\x7c\xbe\x5b\xfd\x0a\x1f\x94\x46\xc6\x1e\x0b\x61\xc0\xa0\x7e\x12\x29\x82\xc6\xbf\x6b\xa1\xd1\xc0\x7a\xb0\xd8\x4c\x0a\x6b\x2b\xb3\x5c\x2c\x76\xc2\x16\xf5\x36\x4e\xd5\x61\x71\x40\xb3\x9b\xe7\xaa\x96\x99\x8b\xb9\x48\x95\xc6\x29\x58\x05\x5b\x04\xe1\x93\x61\x06\xb9\xd0\xc6\xc6\x8c\xfd\xa9\x6a\x48\xb9\xec\x35\x63\x76\xd8\x1e\x41\xd7\x52\x0a\xb9\x03\x5b\x20\xe4\xaa\x2c\xd5\x33\xdd\x52\x75\x38\x70\x99\x81\xd2\xb0\xf6\x52\x67\x20\x82\x46\x60\x57\x8b\x2c\x28\x2f\x53\xa9\x89\xa9\x30\x57\xa1\x53\x2e\x8c\xe5\xda\xce\x0b\xd4\xb8\x08\x5d\xe3\xc2\x1e\xca\x69\xcc\x58\x92\x24\x5b\x6e\x0a\x46\x3f\xf0\xd3\x24\xad\x75\x09\xf3\xdc\xac\x7e\x83\x3e\xea\x10\xb0\xf3\x9f\x92\x0f\x4d\xf8\xf0\x06\x08\xcf\xdf\x6b\x9d\x16\xdc\xa0\x2b\xb2\x03\x93\xb1\x47\x05\x19\x56\xa5\x3a\x82\x0d\x40\xbe\x81\xa3\xaa\x3d\x36\x20\x11\x33\x82\xad\xea\xfd\x95\x44\x50\x39\x08\x6b\x40\xe5\x39\x6a\x03\xb9\x56\x07\x17\xd6\xa1\xf6\x99\xeb\x3d\xda\xaa\xe4\x29\xc6\x3e\x81\x02\xa3\x6e\x60\xa7\x28\x4c\x90\xfd\xbd\x81\x8a\xef\x28\xe0\x55\x67\x20\x70\xd3\x02\xd3\xbd\x53\x77\xb9\x2c\xdf\x2e\xc7\xce\x83\x54\x03\x0a\x5d\x74\xb3\xe8\x1f\x7d\xe4\x5d\xd9\x38\x6d\x11\xdc\xf6\x4d\x07\x58\x04\x80\xbd\x06\x8b\xae\xe5\xf5\x29\x58\x0e\x3c\xb9\xb9\xa3\x61\x1b\x26\xb6\x8b\x44\x8a\xd3\x9a\xfb\x52\x17\x7f\xdc\x7d\x5d\xdd\x3f\x7c\xf9\xeb\xe3\x2f\xab\x8f\x8e\xbc\x7e\x1c\xf1\x9f\xaa\x0c\x42\xbd\x37\xf0\x84\xda\xd0\x57\x86\x50\xbb\x40\xcc\x2a\xd0\xe8\x8f\x49\x18\x33\x81\x67\x61\x0b\x22\x55\x43\x86\x46\x68\xcc\x88\xc6\x25\xfb\x8f\x40\xf6\xc9\x09\x2b\x2c\x0d\x02\x01\xf6\x15\x2b\x65\x84\x55\xfa\xf8\x36\xb8\x35\xcd\x49\x0a\x87\x8f\x4f\xdf\xb6\xb7\xea\x59\x96\x8a\x67\x9e\x48\x55\xeb\x14\x81\x3e\x31\x34\xa0\xa7\x15\xd0\x30\xd9\x02\xe9\x85\x9f\xcd\x60\x26\x34\xa6\x14\xfb\x7f\x95\xd9\x97\xd5\x7f\xcf\x82\x85\xd0\x4f\x56\xff\x69\x8f\xc0\x9f\xd8\xf7\x97\x40\x44\x4b\xed\xea\x02\x60\xcc\x19\xc1\x1e\x8f\x4b\x48\x9a\xc6\x4b\xdd\xb3\xef\x8c\xcf\xd6\x9b\xab\xa1\x57\x71\xcb\xdb\xf6\x05\x66\x33\x8a\x38\x9b\x01\x1d\x3f\xe1\xb1\x3b\x3d\x1e\xab\x5e\x18\x04\x21\x09\x7b\x81\xf9\x7c\x0e\x57\x7e\xc7\x66\x32\x6e\xf9\x27\xd7\x10\x9d\xa8\x9f\x8b\xac\xbe\x27\x52\x77\x2d\x75\x3e\x6d\xeb\xd2\x52\x3b\x83\x24\x09\x04\x31\x55\xe6\x45\xbe\x1d\x27\x7c\x70\xe5\xf1\x92\xbc\x13\xd5\x5d\x92\xd9\x0c\x86\x2d\xe3\xed\x4e\x00\x71\x15\x87\x4b\xe8\x6c\x25\x9d\x6c\xc9\x08\xdc\xe1\x9c\xb0\x8b\xe5\x38\xd0\x75\xbe\x18\x19\x23\x93\xab\x64\x39\xd3\xab\x5c\x39\xcd\xbd\xac\x6a\x37\x34\x11\xed\x48\x3a\x33\xf6\x46\xc4\x09\x0a\xef\x99\x73\x47\x47\xdd\x49\x11\x23\x77\xce\xa0\xeb\xb0\xf7\x0b\xd8\x1b\x45\x49\x28\xb9\xe0\xcf\x4b\x7f\x80\x40\x6f\xf8\x6d\x06\x43\xd8\x1e\x6a\x3b\xe2\xd6\x5d\xd8\xd8\xaa\x72\x12\xdf\xab\x3f\x8f\xcd\x86\xae\x3d\x9f\xde\xa6\xeb\x77\x70\x26\xaa\xbc\xf5\xc8\x6c\xa0\xf4\xfc\x76\xae\x67\x0c\xbf\x11\x85\xaf\xf4\xd5\xd7\x70\xf6\x00\x5f\xeb\x6a\xa0\x31\x6c\xe6\x44\x74\x41\x64\x27\xfe\x01\x26\xaf\xe1\x31\x52\xf9\xed\x47\xf9\x6f\x00\x00\x00\xff\xff\xbc\x67\x51\xf1\xe3\x0b\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 3043, mode: os.FileMode(420), modTime: time.Unix(1557732420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
