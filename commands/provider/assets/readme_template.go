// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\x8b\xe3\x36\x14\x7e\xd7\xaf\x38\xe0\x85\x26\x61\x6d\xbf\x87\xf6\x69\x67\x28\xcb\xb6\x5d\xe8\xe4\xa5\x84\x80\x15\x5b\x89\x45\x1c\x29\x95\xe4\x5d\x82\x46\xff\xbd\x1c\xc9\x17\xc5\xf1\x5c\xa0\xcc\x4b\x72\x74\x6e\xfa\xbe\xf3\x59\x27\x01\x6b\xb3\xbf\xe8\x99\x39\x47\x88\xb5\xd9\x03\xd3\xa5\xe2\x17\xc3\xa5\x40\x4f\x02\x5f\xa4\x30\x4c\x18\x4d\x48\x0a\xdb\xaf\x42\x1b\xda\x34\x14\xc3\xbb\x45\x12\x1f\x97\x18\x7f\x60\x07\x2e\x38\x1e\xf5\x6e\x91\x44\xa7\x25\x01\xb0\x96\x1f\x20\x7b\xfc\x81\xdd\x9c\x4b\x61\x1b\xcc\xdd\x22\x09\xc6\xd2\x5a\x45\xc5\x91\xc1\xa7\x13\xbb\x7e\x86\x4f\x0c\xbd\xb0\xfe\x6d\xac\x21\x00\x00\x29\x6c\xad\x95\xaa\x8b\x7b\xec\xbe\xc2\xb9\xdd\x22\x99\x8d\xc0\x33\x50\x51\xd6\x52\x3d\x8a\x52\x56\xcc\xb9\xa5\xb5\x4c\x54\xce\x75\x7f\x03\xb6\x0d\xd5\xa7\x00\xcd\x5b\xbb\x45\xe2\xff\xa7\xc0\x0c\xd5\x27\x8f\xab\xcb\xbf\x85\x85\xd1\x59\x54\xb7\x81\x37\x41\x91\x04\xe2\xf9\x12\x92\x24\xf0\xe7\xe3\xd3\xef\xf0\x45\x2a\x46\xc8\xa6\xe6\x1a\x34\x53\x3f\x78\xc9\x40\xb1\x7f\x5b\xae\x98\x86\xed\x90\xb1\x5b\xd4\xc6\x5c\xf4\x3a\xcf\x8f\xdc\xd4\xed\x3e\x2b\xe5\x39\x3f\x33\x7d\x4c\x0f\xb2\x15\x95\xef\x99\x97\x52\xb1\x25\x18\x09\x7b\x06\x3c\x5c\xc6\x2a\x38\x70\xa5\x4d\x46\xc8\x3f\xb2\x85\x92\x8a\x3e\x32\xde\x0e\xfb\x2b\xa8\x56\x08\x2e\x8e\x60\x6a\x06\x07\xd9\x34\xf2\x27\x9e\x4a\x79\x3e\x53\x51\x81\x54\xb0\x0d\x5e\x9f\xc0\x23\x22\x70\x6c\x79\x15\xc1\xab\x64\xa9\x33\x04\x96\x19\x56\xd6\xb9\x8f\xe6\xda\x50\x65\xd2\x9a\x29\x96\xc7\xb5\x59\x6d\xce\xcd\x32\x23\xa4\x28\x8a\x3d\xd5\x35\xc1\x1f\xf8\x75\x51\xb6\xaa\x81\xf4\xa0\x9f\xfe\x80\xbe\xad\xef\x88\x9c\xbb\xfa\x25\xd6\xf8\x21\x3e\x85\xa1\xe1\xe7\x8e\xa2\xff\xcd\x2e\x52\x73\x23\xd5\xd5\xb9\x8d\x84\x8a\x5d\x1a\x79\x05\x13\x8d\xf7\x33\x92\x9d\x27\xba\x1e\x90\xf8\xd1\xe2\x3c\x07\x51\xba\x4e\xd6\xde\x5c\xe1\x61\x58\xcb\x1a\xcd\x9c\x7b\x90\x3f\x45\x23\x69\xe5\x9b\x6b\xd9\xaa\x92\x01\x7e\x0d\x20\x0f\x13\x04\x38\x54\x53\x33\x14\x23\x24\x87\xc0\x2f\x1a\x31\x55\x4c\xfd\x3f\x8c\x59\xde\xc3\xf2\x9f\x5e\x02\xd1\xd3\xed\xe7\xd4\x3f\xc2\x04\x82\x45\xde\x7e\xae\x09\x6e\x97\xd9\xa7\x4a\x88\x4f\x82\x13\xbb\xae\xa1\xb0\x36\x78\x0b\xbc\xab\x4b\x9e\x2c\x22\x8f\xa1\x0f\x51\x43\x9d\x7b\x86\xd5\x0a\x3b\xae\x56\x80\xe6\x37\x76\xed\xac\xcd\xf5\xd2\x3b\xa3\x26\xe8\x21\xcf\x90\xa6\x29\xcc\xfc\x8e\x64\x2a\x6a\xe8\x37\x4f\x08\x2d\xe4\x73\x77\x6b\xe0\x84\xe1\x8e\x52\x57\xe3\x9c\xbf\x16\xe9\x0c\x9e\x22\x72\x64\x88\x2c\xb8\x02\x1d\xef\xfc\xee\xe1\xd1\x06\xab\x0b\xd9\x1d\x8a\xd5\x0a\x86\x7d\x10\xf2\x6e\x06\xe2\x11\xc7\xeb\x62\xb2\x3c\x6e\xf6\x59\x02\xde\x98\x0a\x76\xb7\xc6\x06\xb9\xa6\x2b\x8c\x10\x4c\x99\x15\xcb\xa7\xce\x6a\xe5\x23\x5f\xc5\xa5\xf5\x1f\x4d\x82\xdb\x0c\x6d\x42\x3e\x48\x38\x8e\xed\x83\x72\xde\xf4\xd2\xdd\x80\x18\xb5\xf3\x09\x1d\xc3\xbe\x2e\x52\x6f\x74\x15\xb1\xe7\x4e\xbf\xe0\x7d\x87\x80\x21\xf1\x75\x05\xe3\xb1\x7d\x6f\xcd\x38\xb7\xee\x40\x46\xaa\xd2\x7b\x02\xd7\x60\x8f\x64\xe3\xd2\x5e\xcf\x90\xd3\xf1\x1d\x8a\x51\xaa\x90\x3d\x2a\x1b\x05\x83\xbe\x5d\xe9\x44\xe1\x0f\x92\xf0\x05\x5e\x3d\x86\xc9\x03\x7c\x89\xd5\x20\x63\x4c\xe6\xc6\x75\x27\x64\xe7\x7e\x87\x92\x73\xf3\x18\xa5\x7c\xfd\x51\xfe\x17\x00\x00\xff\xff\xd2\xdc\x3f\x18\x6c\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2412, mode: os.FileMode(420), modTime: time.Unix(1543918329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
