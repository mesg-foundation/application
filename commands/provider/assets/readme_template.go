// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\x8b\xe3\x36\x14\x7e\xd7\xaf\x38\xe0\x85\x26\x61\xed\xbc\x87\xf6\x69\x67\x28\xcb\xb6\x5d\xe8\xe4\xa5\x84\x80\x15\x5b\x89\x45\x1c\x29\x95\xe4\x5d\x8c\x46\xff\xbd\x1c\xc9\x17\xc5\xf1\x5c\xa0\xcc\x4b\x72\x74\x6e\xfa\xbe\xf3\x59\x27\x01\x6b\xb3\xbf\xe8\x85\x39\x47\x88\xb5\xd9\x03\xd3\x85\xe2\x57\xc3\xa5\x40\x4f\x02\x5f\xa4\x30\x4c\x18\x4d\x48\x0a\xbb\xaf\x42\x1b\x5a\xd7\x14\xc3\xfb\x45\x12\x1f\x97\x18\x7f\x60\x47\x2e\x38\x1e\xf5\x7e\x91\x44\xa7\x25\x01\xb0\x96\x1f\x21\x7b\xfc\x81\xdd\x9c\x4b\x61\x17\xcc\xfd\x22\x09\xc6\xd2\x5a\x45\xc5\x89\xc1\xa7\x33\x6b\x3f\xc3\x27\x86\x5e\xd8\xfc\x36\xd6\x10\x00\x80\x14\x76\xd6\x4a\xd5\xc5\x3d\x76\x5f\xe1\xdc\x7e\x91\xcc\x46\xe0\x19\xa8\x28\x2a\xa9\x1e\x45\x21\x4b\xe6\xdc\xd2\x5a\x26\x4a\xe7\xba\xbf\x01\xdb\x96\xea\x73\x80\xe6\xad\xfd\x22\xf1\xff\x53\x60\x86\xea\xb3\xc7\xd5\xe5\xdf\xc2\xc2\xe8\x2c\xaa\xdb\xc0\x9b\xa0\x48\x02\xf1\x7c\x09\x49\x12\xf8\xf3\xf1\xe9\x77\xf8\x22\x15\x23\x64\x5b\x71\x0d\x9a\xa9\x1f\xbc\x60\xa0\xd8\xbf\x0d\x57\x4c\xc3\x6e\xc8\xd8\x2f\x2a\x63\xae\x7a\xb3\x5e\x9f\xb8\xa9\x9a\x43\x56\xc8\xcb\xfa\xc2\xf4\x29\x3d\xca\x46\x94\xbe\xe7\xba\x90\x8a\x2d\xc1\x48\x38\x30\xe0\xe1\x32\x56\xc2\x91\x2b\x6d\x32\x42\xfe\x91\x0d\x14\x54\xf4\x91\xf1\x76\x38\xb4\xa0\x1a\x21\xb8\x38\x81\xa9\x18\x1c\x65\x5d\xcb\x9f\x78\x2a\xe4\xe5\x42\x45\x09\x52\xc1\x2e\x78\x7d\x02\x8f\x88\xc0\xa9\xe1\x65\x04\xaf\x94\x85\xce\x10\x98\x47\xe8\x83\x6b\x6d\xa8\x32\x69\xc5\x14\x5b\xc7\xa5\x59\x65\x2e\xf5\x32\x23\x24\xcf\xf3\x03\xd5\x15\xc1\x1f\xf8\x75\x51\x34\xaa\x86\xf4\xa8\x9f\xfe\x80\xbe\xeb\xd0\xb0\xab\x5f\x62\x8d\x9f\xe1\x53\x98\x19\x7e\xed\xa8\xf9\xdf\xec\x2a\x35\x37\x52\xb5\xce\x6d\x25\x94\xec\x5a\xcb\x16\x4c\x34\xdd\xcf\xc8\x75\x9e\xe7\x66\x40\xe2\x27\x8b\xe3\x1c\x34\xe9\x3a\x59\x7b\x73\x85\x87\x61\x2d\xab\x35\x73\xee\x41\xfe\x14\xb5\xa4\xa5\x6f\xae\x65\xa3\x0a\x06\xf8\x31\x80\x3c\x4e\x10\xe0\x4c\x4d\xc5\x50\x8b\x90\x1c\x02\xbf\x68\x28\xb9\x62\x85\x34\xaa\xfd\x5f\x30\x7b\x58\xfe\xcb\x4b\x20\x7a\xb9\xfd\x9c\xfa\x37\x98\x40\xb0\xc8\xdb\xaf\x35\xc1\xe5\x32\xfb\x52\x09\xf1\x49\x70\x66\xed\x06\x72\x6b\x83\x37\xc7\xbb\xba\xe4\xc9\x1e\xf2\x18\xfa\x10\x35\xd4\xb9\x67\x58\xad\xb0\xe3\x6a\x05\x68\x7e\x63\x6d\x67\x6d\xdb\x6b\xef\x8c\x9a\xa0\x87\x3c\x43\x9a\xa6\x30\xf3\x3b\x92\x29\xa9\xa1\xdf\x3c\x21\xb4\x90\xcf\xdd\xad\x81\x13\x86\x3b\x4a\x5d\x8d\x73\xfe\x5a\xa4\x33\x78\xf2\xc8\x91\x21\xb2\xe0\x0a\x74\xbc\xf3\xbb\x87\x47\x6b\xac\xce\x65\x77\xc8\x57\x2b\x18\xd6\x41\xc8\xbb\x19\x88\x47\x1c\x6f\x8b\xc9\xee\xb8\x59\x67\x09\x78\x63\x2a\xd8\xdd\x16\x1b\xe4\x9a\x6e\x30\x42\x30\x65\x56\x2c\x9f\x3a\xab\x95\x8f\x7c\x15\xd7\xc6\x7f\x34\x09\x2e\x33\xb4\x09\xf9\x20\xe1\x38\xb6\x0f\xca\x79\xd3\x4b\x77\x03\x62\xd4\xce\x27\x74\x0c\xfb\xba\x48\xbd\xd1\x95\xc7\x9e\x3b\xfd\x82\xf7\x1d\x02\x86\xc4\xd7\x15\x8c\xc7\xf6\xbd\x31\xe3\xdc\xba\x03\x19\xa9\x4a\xef\x09\x5c\x83\x3d\x92\x8d\x4b\x7b\x3d\x43\x4e\xc7\x77\x28\x46\xa9\x42\xf6\xa8\x6c\x14\x0c\xfa\x76\xa5\x13\x85\x3f\x48\xc2\x17\x78\xf5\x18\x26\x0f\xf0\x25\x56\x83\x8c\x31\x99\x1b\xd7\x9d\x90\x9d\xfb\x1d\x4a\xce\xcd\x63\x94\xf2\xf5\x47\xf9\x5f\x00\x00\x00\xff\xff\x7b\x6d\x5d\x21\x6b\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2411, mode: os.FileMode(420), modTime: time.Unix(1556706556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
