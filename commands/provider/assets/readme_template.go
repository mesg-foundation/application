// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xeb\x2a\x10\xdd\xf3\x2b\x46\x75\x17\x76\x54\x3b\xfb\xe8\xbd\x55\x53\x3d\x55\x7d\x7d\x5d\x34\x9b\xa7\x28\x92\x89\x4d\x1c\x14\x07\x72\x0d\xee\x55\xe4\xfa\xbf\x5f\x0d\x60\x43\x3e\xfa\xb1\xe9\x26\x19\xce\xcc\xc0\x39\x1c\x0f\x11\x74\x5d\xf6\x1f\xdd\xb3\xbe\x87\xae\xe3\x1b\xc8\x5e\x79\xd9\xf7\xf1\xe3\x7c\x86\x19\xb3\x48\xba\x8e\x89\xb2\xef\x09\xe9\xba\x6c\xce\x54\xd1\xf0\x83\xe6\x52\x20\x12\xc1\xbd\x14\x9a\x09\xad\x08\x49\x61\xf9\x28\x94\xa6\x75\x4d\x31\xbd\x8a\xa3\x70\x99\x60\x7e\xce\x36\x5c\x70\x5c\xaa\x55\x1c\x05\xab\x84\x80\x3b\xff\xe1\x0d\x77\xeb\xfb\x14\x96\x36\x5c\xc5\x91\x0d\x92\xae\x6b\xa8\xa8\x18\xdc\xee\xd8\xf1\x0e\x6e\x19\xa2\x30\xfb\xdb\xf7\x10\x00\x80\x14\x96\x5d\x27\x1b\x97\x37\xe2\x4c\x47\xdf\xaf\xe2\xe8\x6a\x06\xde\x81\x8a\x62\x2b\x9b\x07\x51\xc8\x92\x79\xc5\x83\xf0\x81\xdb\x82\xaa\x9d\xa5\x66\xa2\x55\x1c\x99\xff\x73\x62\x9a\xaa\x9d\xe1\xe5\xea\x4f\x69\x61\xf6\x2a\xab\xd3\xc4\x97\xa4\x48\x04\xe1\xfd\x12\x12\x45\xf0\xfc\xf0\xfa\x0f\xdc\xcb\x86\x11\xb2\xd8\x72\x05\x8a\x35\x6f\xbc\x60\xd0\xb0\x5f\x2d\x6f\x98\x82\xe5\x58\xb1\x8a\xb7\x5a\x1f\xd4\x6c\x3a\xad\xb8\xde\xb6\xeb\xac\x90\xfb\xe9\x9e\xa9\x2a\xdd\xc8\x56\x94\x66\xcf\x69\x21\x1b\x96\x80\x96\xb0\x66\xc0\xed\x61\xac\x84\x0d\x6f\x94\xce\x08\xf9\x5f\xb6\x50\x50\x31\x64\xfc\xe9\xb0\x3e\x42\xd3\x0a\xc1\x45\x05\x7a\xcb\x60\x23\xeb\x5a\xfe\xc6\x55\x21\xf7\x7b\x2a\x4a\x90\x0d\x2c\x2d\x6a\x0a\x78\x20\x04\xaa\x96\x97\x01\xbd\x52\x16\x2a\x43\x62\x86\xa1\x49\x4e\xc3\xfa\x6c\xab\xf7\x75\x92\x11\x92\xe7\xf9\x9a\xaa\x2d\xc1\x1f\xf8\x2b\x2e\xda\xa6\x86\x74\xa3\x5e\xff\x85\x61\xab\x71\x17\xd7\x9f\x60\x8f\xb9\xb8\x39\x3b\xd4\xf2\x68\xb8\xb8\x3b\x23\x64\x21\xa1\x1c\x60\x7f\x97\x77\x50\x49\xbc\x91\x65\x08\xc2\x81\x56\x01\xe5\x3d\x6d\x76\x4c\x1f\x6a\x5a\x30\xcf\xdc\x95\xaa\xe9\x38\x57\x20\x85\x39\xd1\x9a\xf2\xec\x9b\x3e\xdf\x29\x01\xbc\xc1\xa2\xe6\xc5\xce\xb4\xaf\x5b\xad\xa5\x80\x9b\x8a\xe9\xe9\xba\x3d\x65\x7b\x93\xe1\x77\x12\x0c\x1a\x0e\x71\x38\x66\x11\xd8\x88\x7c\x3d\x5c\x11\x3e\x16\x57\x07\x8b\x10\x53\x04\x3b\x76\x9c\x41\xde\x75\x16\xcd\xf1\x2c\x57\x7c\xf6\x6c\x18\x0e\x43\x8a\x6a\xda\xf7\xef\x30\x99\xe0\x8e\x93\x09\x60\xf8\xc4\x8e\x2e\x5a\x1c\x0f\x03\x18\x6c\x82\x08\x79\x87\x34\x4d\xe1\xca\xaf\x17\x53\x52\x4d\x9f\x8c\x20\x8c\x50\xcf\xc5\xa9\x56\x13\xa6\x9d\x24\xd7\xd3\xf7\xe6\x58\x94\x33\x22\x79\x00\x64\xc8\xcc\x42\x56\x8e\x01\x5f\x0c\x3d\x5a\x63\x77\x2e\xdd\x22\x9f\x4c\x60\x9c\x5e\x5b\x77\x72\x21\x86\x71\x38\xdc\x67\xa3\x7e\xf2\xfa\x44\x60\x82\x73\xc3\x2e\x1e\x9d\xd1\xae\xf3\x07\x87\x10\x2c\xb9\x6a\x96\x29\xbd\xea\x95\xc9\x3c\x8a\x43\x6b\x3e\x9a\x08\xdf\x1e\x8c\x09\xf9\x21\xe3\x38\x6e\x6f\x9d\x33\xa1\xb1\xee\x84\x84\xf7\xce\x14\x38\x85\x43\x5f\xe0\x9e\x87\xf2\x10\xb9\xf0\xcf\xa2\xdf\x30\xd0\x16\x7e\xee\x60\x78\x6d\x2f\xad\xf6\xf7\xe6\x16\xc4\x4b\x95\x06\xb1\x5a\x6d\xec\xc5\x86\xad\x83\x9f\xb6\xc6\xe9\x1d\x9b\xd1\x2a\x5b\xed\x9d\x0d\x92\xd6\x5f\xd7\x7a\xe6\xf0\x0f\x59\xf8\x81\xae\x81\xc3\xd9\x00\x7e\xa4\x6a\xb4\x31\x14\x73\x02\x5d\x18\xe9\xe0\x6f\x38\x79\xed\x3e\xbc\x95\x9f\x0f\xe5\x9f\x00\x00\x00\xff\xff\xfc\x88\x00\xd2\x3b\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2363, mode: os.FileMode(420), modTime: time.Unix(1557897272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
