// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// commands/provider/assets/readme_template.md
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandsProviderAssetsReadme_templateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5b\xab\xe3\x36\x10\x7e\xd7\xaf\x18\xf0\x42\x9d\xb0\x76\xde\x43\xfb\xb4\x39\x94\xc3\xb6\x5d\x68\xf2\x52\x42\xc0\x8a\xad\xc4\x22\x8e\x94\x4a\xf2\x2e\x41\x47\xff\xbd\x8c\xe4\x8b\xe2\x78\x2f\x50\xf6\x25\x19\xcd\x4d\xdf\x37\x9f\x35\x09\x58\x9b\xff\x45\xaf\xcc\x39\xb0\x96\x9f\x20\xdf\xf2\xca\xb9\xf4\x75\xb3\xc6\x88\x3f\x2c\xac\x65\xa2\x72\x8e\x10\x6b\xf3\x0d\xd3\xa5\xe2\x37\xc3\xa5\x40\x4f\x02\x1f\xa4\x30\x4c\x18\x4d\x48\x06\xfb\x57\xa1\x0d\x6d\x1a\x8a\xe1\x43\x9a\xc4\xc7\x05\xc6\x37\xec\xc4\x05\xc7\xa3\x3e\xa4\x49\x74\x5a\x10\xe8\xee\x7f\xf9\x8c\xdd\x9c\xcb\x60\x1f\xcc\x43\x9a\x04\x63\x61\xad\xa2\xe2\xcc\xe0\xdd\x85\xdd\xdf\xc3\x3b\x86\x5e\x58\xff\x36\xd6\x10\x00\x80\x0c\xf6\xd6\x4a\xd5\xc5\x3d\x39\x5f\xe1\xdc\x21\x4d\x66\x23\xf0\x06\x54\x94\xb5\x54\x2f\xa2\x94\x15\x1b\x19\xf7\xc4\x7b\x6c\x3b\xaa\x2f\x01\x9a\xb7\x0e\x69\xe2\xff\xa7\xc0\x0c\xd5\x17\x8f\xab\xcb\x7f\x84\x85\xd1\x59\x54\x8f\x81\xef\x82\x22\x09\xc4\xf3\x25\x24\x49\xe0\xcf\x97\xed\xef\xf0\x41\x2a\x46\xc8\xae\xe6\x1a\x34\x53\x9f\x79\xc9\x40\xb1\x7f\x5b\xae\x98\x86\xfd\x90\x71\x48\x6b\x63\x6e\x7a\xbd\x5a\x9d\xb9\xa9\xdb\x63\x5e\xca\xeb\xea\xca\xf4\x39\x3b\xc9\x56\x54\xbe\xe7\xaa\x94\x8a\x2d\xc0\x48\x38\x32\xe0\xe1\x32\x56\xc1\x89\x2b\x6d\x72\x42\xfe\x91\x2d\x94\x54\xf4\x91\xf1\x76\x38\xde\x41\xb5\x42\x70\x71\x06\x53\x33\x38\xc9\xa6\x91\x5f\xf0\x54\xca\xeb\x95\x8a\x0a\xa4\x82\x7d\xf0\xfa\x04\x1e\x11\x81\x73\xcb\xab\x08\x5e\x25\x4b\x9d\x23\x30\x8f\xd0\x07\x57\x71\x7e\x5e\x9b\x6b\xb3\xc8\x09\x29\x8a\xe2\x48\x75\x4d\xf0\x07\x7e\x4d\xcb\x56\x35\x90\x9d\xf4\xf6\x0f\xe8\x5b\x0d\x5d\xba\xfa\x05\xd6\xf8\xc1\x6d\xc3\xa0\xf0\x13\x47\xa1\xff\x66\x37\xa9\xb9\x91\xea\xee\xdc\x4e\x42\xc5\x6e\x8d\xbc\x83\x89\x46\xfa\x1e\x09\xce\x93\x5b\x0f\x48\xfc\x38\x71\x86\x83\x10\x5d\x27\x6b\x1f\xae\xf0\x30\xac\x65\x8d\x66\xce\x6d\xe4\x17\xd1\x48\x5a\xf9\xe6\x5a\xb6\xaa\x64\x80\x5f\x00\xc8\xd3\x04\x01\x0e\xd2\xd4\x0c\x05\x08\xc9\x21\xf0\x8b\x86\x8a\x2b\x56\x62\xef\xff\x05\xb3\x87\xe5\x3f\xb7\x04\xa2\xe7\xda\xcf\xa9\x7f\x78\x09\x04\x8b\x7c\xff\x89\x26\xb8\x72\x66\x9f\x27\x21\x3e\x09\x2e\xec\xbe\x86\xc2\xda\xe0\x2d\xf0\xae\x2e\x79\xb2\x7c\x3c\x86\x3e\x44\x0d\x75\xee\x0d\x96\x4b\xec\xb8\x5c\x02\x9a\x1f\xd9\xbd\xb3\x76\xf7\x5b\xef\x8c\x9a\xa0\x87\xbc\x41\x96\x65\x30\xf3\x3b\x92\xa9\xa8\xa1\x1f\x3d\x21\xb4\x90\xcf\xd3\xad\x81\x13\x86\x3b\x4a\x5d\x8d\x73\xfe\x5a\xa4\x33\x78\x8a\xc8\x91\x23\xb2\xe0\x0a\x74\xbc\xf3\x93\x87\x47\x1b\xac\x2e\x64\x77\x28\x96\x4b\x18\x76\x40\xc8\x7b\x18\x88\x47\x1c\xaf\x88\xc9\xc2\x78\xd8\x61\x09\x78\x63\x2a\xd8\xd3\xea\x1a\xe4\x9a\xae\x2d\x42\x30\x65\x56\x2c\x9f\x3a\xab\x95\x8f\xbc\x8a\x5b\xeb\x3f\x9a\x04\x37\x18\xda\x84\xfc\x24\xe1\x38\xb6\x0f\xca\x79\xd3\x4b\xf7\x00\x62\xd4\xce\x27\x74\x0c\xfb\xba\x48\xbd\xd1\x55\xc4\x9e\x27\xfd\x82\xf7\x07\x04\x0c\x89\xdf\x56\x30\x1e\xdb\xa7\xd6\x8c\x73\xeb\x0e\x64\xa4\x2a\xbd\x27\x70\x0d\xf6\x48\x36\x2e\xed\xf5\x0c\x39\x1d\xdf\xa1\x18\xa5\x0a\xd9\xa3\xb2\x51\x30\xe8\xdb\x95\x4e\x14\xfe\x49\x12\x7e\x85\x57\x8f\x61\xf2\x00\xbf\xc6\x6a\x90\x31\x26\xf3\xe0\x7a\x12\xb2\x73\xff\x80\x92\x73\xf3\x18\xa5\xfc\xf6\xa3\xfc\x2f\x00\x00\xff\xff\xb7\x34\x0b\xee\x81\x09\x00\x00")

func commandsProviderAssetsReadme_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_commandsProviderAssetsReadme_templateMd,
		"commands/provider/assets/readme_template.md",
	)
}

func commandsProviderAssetsReadme_templateMd() (*asset, error) {
	bytes, err := commandsProviderAssetsReadme_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "commands/provider/assets/readme_template.md", size: 2433, mode: os.FileMode(420), modTime: time.Unix(1557731053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"commands/provider/assets/readme_template.md": commandsProviderAssetsReadme_templateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"commands": &bintree{nil, map[string]*bintree{
		"provider": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readme_template.md": &bintree{commandsProviderAssetsReadme_templateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
