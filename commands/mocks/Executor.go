// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import container "github.com/mesg-foundation/core/container"
import coreapi "github.com/mesg-foundation/core/protobuf/coreapi"
import io "io"
import mock "github.com/stretchr/testify/mock"
import provider "github.com/mesg-foundation/core/commands/provider"
import servicetemplate "github.com/mesg-foundation/core/utils/servicetemplate"

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

// CreateWorkflow provides a mock function with given fields: filePath, name
func (_m *Executor) CreateWorkflow(filePath string, name string) (string, error) {
	ret := _m.Called(filePath, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(filePath, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filePath, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflow provides a mock function with given fields: id
func (_m *Executor) DeleteWorkflow(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logs provides a mock function with given fields:
func (_m *Executor) Logs() (io.ReadCloser, error) {
	ret := _m.Called()

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceByID provides a mock function with given fields: id
func (_m *Executor) ServiceByID(id string) (*coreapi.Service, error) {
	ret := _m.Called(id)

	var r0 *coreapi.Service
	if rf, ok := ret.Get(0).(func(string) *coreapi.Service); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coreapi.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceDelete provides a mock function with given fields: deleteData, ids
func (_m *Executor) ServiceDelete(deleteData bool, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, deleteData)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, ...string) error); ok {
		r0 = rf(deleteData, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceDeleteAll provides a mock function with given fields: deleteData
func (_m *Executor) ServiceDeleteAll(deleteData bool) error {
	ret := _m.Called(deleteData)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(deleteData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceDeploy provides a mock function with given fields: path, statuses
func (_m *Executor) ServiceDeploy(path string, statuses chan provider.DeployStatus) (string, error, error) {
	ret := _m.Called(path, statuses)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, chan provider.DeployStatus) string); ok {
		r0 = rf(path, statuses)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, chan provider.DeployStatus) error); ok {
		r1 = rf(path, statuses)
	} else {
		r1 = ret.Error(1)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, chan provider.DeployStatus) error); ok {
		r2 = rf(path, statuses)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceExecuteTask provides a mock function with given fields: id, taskKey, inputData, tags
func (_m *Executor) ServiceExecuteTask(id string, taskKey string, inputData string, tags []string) error {
	ret := _m.Called(id, taskKey, inputData, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(id, taskKey, inputData, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceGenerateDocs provides a mock function with given fields: path
func (_m *Executor) ServiceGenerateDocs(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInitDownloadTemplate provides a mock function with given fields: t, dst
func (_m *Executor) ServiceInitDownloadTemplate(t *servicetemplate.Template, dst string) error {
	ret := _m.Called(t, dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*servicetemplate.Template, string) error); ok {
		r0 = rf(t, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInitTemplateList provides a mock function with given fields:
func (_m *Executor) ServiceInitTemplateList() ([]*servicetemplate.Template, error) {
	ret := _m.Called()

	var r0 []*servicetemplate.Template
	if rf, ok := ret.Get(0).(func() []*servicetemplate.Template); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*servicetemplate.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList provides a mock function with given fields:
func (_m *Executor) ServiceList() ([]*coreapi.Service, error) {
	ret := _m.Called()

	var r0 []*coreapi.Service
	if rf, ok := ret.Get(0).(func() []*coreapi.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*coreapi.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceListenEvents provides a mock function with given fields: id, eventFilter
func (_m *Executor) ServiceListenEvents(id string, eventFilter string) (chan *coreapi.EventData, chan error, error) {
	ret := _m.Called(id, eventFilter)

	var r0 chan *coreapi.EventData
	if rf, ok := ret.Get(0).(func(string, string) chan *coreapi.EventData); ok {
		r0 = rf(id, eventFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *coreapi.EventData)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(string, string) chan error); ok {
		r1 = rf(id, eventFilter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(id, eventFilter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceListenResults provides a mock function with given fields: id, taskFilter, outputFilter, tagFilters
func (_m *Executor) ServiceListenResults(id string, taskFilter string, outputFilter string, tagFilters []string) (chan *coreapi.ResultData, chan error, error) {
	ret := _m.Called(id, taskFilter, outputFilter, tagFilters)

	var r0 chan *coreapi.ResultData
	if rf, ok := ret.Get(0).(func(string, string, string, []string) chan *coreapi.ResultData); ok {
		r0 = rf(id, taskFilter, outputFilter, tagFilters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *coreapi.ResultData)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(string, string, string, []string) chan error); ok {
		r1 = rf(id, taskFilter, outputFilter, tagFilters)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, []string) error); ok {
		r2 = rf(id, taskFilter, outputFilter, tagFilters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceLogs provides a mock function with given fields: id, dependencies
func (_m *Executor) ServiceLogs(id string, dependencies ...string) ([]*provider.Log, func(), error) {
	_va := make([]interface{}, len(dependencies))
	for _i := range dependencies {
		_va[_i] = dependencies[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*provider.Log
	if rf, ok := ret.Get(0).(func(string, ...string) []*provider.Log); ok {
		r0 = rf(id, dependencies...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*provider.Log)
		}
	}

	var r1 func()
	if rf, ok := ret.Get(1).(func(string, ...string) func()); ok {
		r1 = rf(id, dependencies...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(id, dependencies...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceStart provides a mock function with given fields: id
func (_m *Executor) ServiceStart(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceStop provides a mock function with given fields: id
func (_m *Executor) ServiceStop(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceValidate provides a mock function with given fields: path
func (_m *Executor) ServiceValidate(path string) (string, error) {
	ret := _m.Called(path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Executor) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Executor) Status() (container.StatusType, error) {
	ret := _m.Called()

	var r0 container.StatusType
	if rf, ok := ret.Get(0).(func() container.StatusType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(container.StatusType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Executor) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
