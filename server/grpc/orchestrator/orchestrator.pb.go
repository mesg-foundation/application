// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/grpc/orchestrator/orchestrator.proto

package orchestrator

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	orchestrator "github.com/mesg-foundation/engine/orchestrator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Logs returns a stream of events that satisfy specified filter.
type OrchestratorLogsRequest struct {
	// process hashes to listen the log from. If empty, logs from any process will be returned.
	ProcessHashes        []github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,rep,name=processHashes,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"processHashes,omitempty" validate:"dive,required,hash"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *OrchestratorLogsRequest) Reset()         { *m = OrchestratorLogsRequest{} }
func (m *OrchestratorLogsRequest) String() string { return proto.CompactTextString(m) }
func (*OrchestratorLogsRequest) ProtoMessage()    {}
func (*OrchestratorLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bec0dafbca643bfb, []int{0}
}
func (m *OrchestratorLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrchestratorLogsRequest.Unmarshal(m, b)
}
func (m *OrchestratorLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrchestratorLogsRequest.Marshal(b, m, deterministic)
}
func (m *OrchestratorLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrchestratorLogsRequest.Merge(m, src)
}
func (m *OrchestratorLogsRequest) XXX_Size() int {
	return xxx_messageInfo_OrchestratorLogsRequest.Size(m)
}
func (m *OrchestratorLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrchestratorLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrchestratorLogsRequest proto.InternalMessageInfo

func (m *OrchestratorLogsRequest) GetProcessHashes() []github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.ProcessHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*OrchestratorLogsRequest)(nil), "mesg.grpc.orchestrator.OrchestratorLogsRequest")
}

func init() {
	proto.RegisterFile("server/grpc/orchestrator/orchestrator.proto", fileDescriptor_bec0dafbca643bfb)
}

var fileDescriptor_bec0dafbca643bfb = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x25, 0x02, 0x31, 0x44, 0x65, 0xc9, 0x00, 0x28, 0x08, 0x15, 0x32, 0x21, 0xb5, 0xd8, 0x08,
	0x36, 0x10, 0x4b, 0x27, 0x06, 0x24, 0x50, 0x27, 0xc4, 0xe6, 0x24, 0x57, 0xdb, 0x12, 0xcd, 0xa5,
	0x77, 0x76, 0x24, 0x3e, 0x83, 0x1f, 0xec, 0x47, 0x30, 0x32, 0x21, 0xbb, 0x12, 0x4a, 0xa1, 0xa8,
	0x9b, 0x9f, 0xef, 0xdd, 0xdd, 0x7b, 0xf7, 0xd2, 0x11, 0x03, 0x75, 0x40, 0x52, 0x53, 0x5b, 0x49,
	0xa4, 0xca, 0x00, 0x3b, 0x52, 0x0e, 0x69, 0x0d, 0x88, 0x96, 0xd0, 0x61, 0x76, 0x38, 0x07, 0xd6,
	0x22, 0x50, 0x45, 0xbf, 0x9a, 0x17, 0x1a, 0x35, 0xca, 0xc8, 0x29, 0xfd, 0x4c, 0x06, 0x14, 0x41,
	0x7c, 0xad, 0x7a, 0xf3, 0xf3, 0x9f, 0xb2, 0x7b, 0x6f, 0x81, 0x37, 0x8c, 0x2f, 0x3e, 0x92, 0xf4,
	0xe8, 0xa9, 0xf7, 0xfd, 0x88, 0x9a, 0xa7, 0xb0, 0xf0, 0xc0, 0x2e, 0xeb, 0xd2, 0x83, 0x96, 0xb0,
	0x02, 0xe6, 0x07, 0xc5, 0x06, 0xf8, 0x38, 0x39, 0xdb, 0xbd, 0x18, 0x4c, 0x9e, 0x3f, 0x97, 0xc3,
	0xd3, 0x4e, 0xbd, 0xd9, 0x5a, 0x39, 0xb8, 0x2d, 0x6a, 0xdb, 0xc1, 0x98, 0x60, 0xe1, 0x2d, 0x41,
	0x3d, 0x36, 0x8a, 0x4d, 0xf1, 0xb5, 0x1c, 0x8e, 0xb4, 0x75, 0xc6, 0x97, 0xa2, 0xc2, 0xb9, 0x0c,
	0x0e, 0x2e, 0x67, 0xe8, 0x9b, 0x5a, 0x39, 0x8b, 0x8d, 0x84, 0x46, 0xdb, 0x06, 0x64, 0xa0, 0x8a,
	0x30, 0x79, 0xba, 0xbe, 0xe6, 0xda, 0xa4, 0x83, 0xbe, 0xa4, 0xec, 0x25, 0xdd, 0x0b, 0xb2, 0x32,
	0x29, 0x36, 0xdf, 0x42, 0xfc, 0x63, 0x20, 0x3f, 0x59, 0x35, 0x44, 0xf3, 0xbf, 0x49, 0xc5, 0xce,
	0x55, 0x32, 0xb9, 0x7f, 0xbd, 0xdb, 0xae, 0x33, 0xa4, 0x65, 0x2b, 0xf8, 0x1b, 0x57, 0xb9, 0x1f,
	0x6f, 0x78, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x9a, 0xb5, 0x31, 0xd1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Logs returns a stream of orchestrator action that satisfy criteria specified.
	Logs(ctx context.Context, in *OrchestratorLogsRequest, opts ...grpc.CallOption) (Orchestrator_LogsClient, error)
}

type orchestratorClient struct {
	cc *grpc.ClientConn
}

func NewOrchestratorClient(cc *grpc.ClientConn) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) Logs(ctx context.Context, in *OrchestratorLogsRequest, opts ...grpc.CallOption) (Orchestrator_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orchestrator_serviceDesc.Streams[0], "/mesg.grpc.orchestrator.Orchestrator/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orchestrator_LogsClient interface {
	Recv() (*orchestrator.OrchestratorLog, error)
	grpc.ClientStream
}

type orchestratorLogsClient struct {
	grpc.ClientStream
}

func (x *orchestratorLogsClient) Recv() (*orchestrator.OrchestratorLog, error) {
	m := new(orchestrator.OrchestratorLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrchestratorServer is the server API for Orchestrator service.
type OrchestratorServer interface {
	// Logs returns a stream of orchestrator action that satisfy criteria specified.
	Logs(*OrchestratorLogsRequest, Orchestrator_LogsServer) error
}

// UnimplementedOrchestratorServer can be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (*UnimplementedOrchestratorServer) Logs(req *OrchestratorLogsRequest, srv Orchestrator_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

func RegisterOrchestratorServer(s *grpc.Server, srv OrchestratorServer) {
	s.RegisterService(&_Orchestrator_serviceDesc, srv)
}

func _Orchestrator_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrchestratorLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServer).Logs(m, &orchestratorLogsServer{stream})
}

type Orchestrator_LogsServer interface {
	Send(*orchestrator.OrchestratorLog) error
	grpc.ServerStream
}

type orchestratorLogsServer struct {
	grpc.ServerStream
}

func (x *orchestratorLogsServer) Send(m *orchestrator.OrchestratorLog) error {
	return x.ServerStream.SendMsg(m)
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mesg.grpc.orchestrator.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Orchestrator_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/grpc/orchestrator/orchestrator.proto",
}
