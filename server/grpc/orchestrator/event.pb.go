// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/grpc/orchestrator/event.proto

package orchestrator

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	event "github.com/mesg-foundation/engine/event"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Stream returns a stream of events that satisfy specified filter.
type EventStreamRequest struct {
	// Filter used to filter a stream of events.
	Filter               *EventStreamRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *EventStreamRequest) Reset()         { *m = EventStreamRequest{} }
func (m *EventStreamRequest) String() string { return proto.CompactTextString(m) }
func (*EventStreamRequest) ProtoMessage()    {}
func (*EventStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc57e99336b2294, []int{0}
}
func (m *EventStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventStreamRequest.Unmarshal(m, b)
}
func (m *EventStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventStreamRequest.Marshal(b, m, deterministic)
}
func (m *EventStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamRequest.Merge(m, src)
}
func (m *EventStreamRequest) XXX_Size() int {
	return xxx_messageInfo_EventStreamRequest.Size(m)
}
func (m *EventStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamRequest proto.InternalMessageInfo

func (m *EventStreamRequest) GetFilter() *EventStreamRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Filter contains filtering criteria.
type EventStreamRequest_Filter struct {
	// hash to filter events.
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"hash,omitempty" validate:"omitempty,hash"`
	// instance's hash to filter events.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=instanceHash,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash,omitempty" validate:"omitempty,hash"`
	// key is the key of the event.
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty" validate:"printascii"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventStreamRequest_Filter) Reset()         { *m = EventStreamRequest_Filter{} }
func (m *EventStreamRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*EventStreamRequest_Filter) ProtoMessage()    {}
func (*EventStreamRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc57e99336b2294, []int{0, 0}
}
func (m *EventStreamRequest_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventStreamRequest_Filter.Unmarshal(m, b)
}
func (m *EventStreamRequest_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventStreamRequest_Filter.Marshal(b, m, deterministic)
}
func (m *EventStreamRequest_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamRequest_Filter.Merge(m, src)
}
func (m *EventStreamRequest_Filter) XXX_Size() int {
	return xxx_messageInfo_EventStreamRequest_Filter.Size(m)
}
func (m *EventStreamRequest_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamRequest_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamRequest_Filter proto.InternalMessageInfo

func (m *EventStreamRequest_Filter) GetHash() github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EventStreamRequest_Filter) GetInstanceHash() github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.InstanceHash
	}
	return nil
}

func (m *EventStreamRequest_Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*EventStreamRequest)(nil), "mesg.grpc.orchestrator.EventStreamRequest")
	proto.RegisterType((*EventStreamRequest_Filter)(nil), "mesg.grpc.orchestrator.EventStreamRequest.Filter")
}

func init() {
	proto.RegisterFile("server/grpc/orchestrator/event.proto", fileDescriptor_ffc57e99336b2294)
}

var fileDescriptor_ffc57e99336b2294 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x4e, 0xe3, 0x40,
	0x10, 0x86, 0xcf, 0xc9, 0x9d, 0xa5, 0xdb, 0x4b, 0x73, 0x2b, 0xdd, 0x29, 0x71, 0x93, 0xc8, 0xa2,
	0x88, 0x08, 0xec, 0x42, 0xe8, 0x40, 0x34, 0x91, 0x40, 0x20, 0xa8, 0x0c, 0x15, 0x15, 0x1b, 0x67,
	0x62, 0xaf, 0x88, 0x77, 0xcd, 0xee, 0x38, 0x52, 0x1e, 0x81, 0x97, 0xcc, 0x0b, 0xd0, 0xa5, 0xa4,
	0x42, 0xbb, 0x46, 0x10, 0x14, 0x24, 0x68, 0xe8, 0x3c, 0x33, 0xdf, 0xfc, 0xbf, 0x35, 0xfb, 0x93,
	0x2d, 0x0b, 0x66, 0x0e, 0x86, 0x67, 0xa6, 0x4c, 0xb9, 0x36, 0x69, 0x0e, 0x16, 0x8d, 0x40, 0x6d,
	0x38, 0xcc, 0x41, 0x21, 0x2b, 0x8d, 0x46, 0x4d, 0xff, 0x17, 0x60, 0x33, 0xe6, 0x18, 0xb6, 0xce,
	0x44, 0x71, 0xa6, 0x33, 0xcd, 0x3d, 0x33, 0xae, 0xa6, 0xdc, 0x55, 0xbe, 0xf0, 0x5f, 0xf5, 0x6e,
	0x14, 0xbd, 0x8e, 0x71, 0x51, 0x82, 0x5d, 0xd7, 0x8d, 0x1f, 0x1b, 0x84, 0x9e, 0xb8, 0xfa, 0x0a,
	0x0d, 0x88, 0x22, 0x81, 0xfb, 0x0a, 0x2c, 0xd2, 0x73, 0x12, 0x4e, 0xe5, 0x0c, 0xc1, 0xb4, 0x83,
	0x5e, 0xd0, 0xff, 0x33, 0xdc, 0x67, 0x1f, 0xfb, 0xb3, 0xcd, 0x5d, 0x76, 0xea, 0x17, 0x93, 0x17,
	0x81, 0xe8, 0xa1, 0x41, 0xc2, 0xba, 0x45, 0x6f, 0xc9, 0xcf, 0x5c, 0xd8, 0xdc, 0x6b, 0xb6, 0x46,
	0x97, 0xab, 0x65, 0xb7, 0x33, 0x17, 0x33, 0x39, 0x11, 0x08, 0x87, 0xb1, 0x2e, 0x24, 0x42, 0x51,
	0xe2, 0x62, 0xc7, 0x31, 0xf1, 0xd3, 0xb2, 0x3b, 0xc8, 0x24, 0xe6, 0xd5, 0x98, 0xa5, 0xba, 0xe0,
	0xce, 0x7e, 0x77, 0xaa, 0x2b, 0x35, 0x11, 0x28, 0xb5, 0xe2, 0xa0, 0x32, 0xa9, 0x80, 0x3b, 0x94,
	0x9d, 0x09, 0x9b, 0x27, 0x5e, 0x99, 0x96, 0xa4, 0x25, 0x95, 0x45, 0xa1, 0x52, 0x70, 0xdd, 0x76,
	0xe3, 0x1b, 0x9c, 0xde, 0x39, 0xd0, 0x01, 0x69, 0xde, 0xc1, 0xa2, 0xdd, 0xec, 0x05, 0xfd, 0xdf,
	0xa3, 0xce, 0x6a, 0xd9, 0xfd, 0xf7, 0x66, 0x54, 0x1a, 0xa9, 0x50, 0xd8, 0x54, 0xca, 0x38, 0x71,
	0xd4, 0xf0, 0x9a, 0xfc, 0xf2, 0x07, 0xa3, 0x17, 0x24, 0xac, 0x8f, 0x46, 0xb7, 0xbf, 0x7e, 0xd9,
	0xe8, 0x6f, 0xcd, 0xfa, 0x57, 0xac, 0xe7, 0xf1, 0x8f, 0xbd, 0x60, 0x74, 0x7c, 0x73, 0xf4, 0xf9,
	0xff, 0xbb, 0x94, 0xc9, 0x14, 0x36, 0x63, 0x36, 0x0e, 0x7d, 0x12, 0x0e, 0x9e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0x31, 0xc6, 0xad, 0x89, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	// Stream returns a stream of events that satisfy criteria specified.
	Stream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Event_StreamClient, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Stream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (Event_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Event_serviceDesc.Streams[0], "/mesg.grpc.orchestrator.Event/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Event_StreamClient interface {
	Recv() (*event.Event, error)
	grpc.ClientStream
}

type eventStreamClient struct {
	grpc.ClientStream
}

func (x *eventStreamClient) Recv() (*event.Event, error) {
	m := new(event.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	// Stream returns a stream of events that satisfy criteria specified.
	Stream(*EventStreamRequest, Event_StreamServer) error
}

// UnimplementedEventServer can be embedded to have forward compatible implementations.
type UnimplementedEventServer struct {
}

func (*UnimplementedEventServer) Stream(req *EventStreamRequest, srv Event_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServer).Stream(m, &eventStreamServer{stream})
}

type Event_StreamServer interface {
	Send(*event.Event) error
	grpc.ServerStream
}

type eventStreamServer struct {
	grpc.ServerStream
}

func (x *eventStreamServer) Send(m *event.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mesg.grpc.orchestrator.Event",
	HandlerType: (*EventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Event_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/grpc/orchestrator/event.proto",
}
