// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/grpc/orchestrator/runner.proto

package orchestrator

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RunnerRegisterRequest is the request of the endpoint Register.
type RunnerRegisterRequest struct {
	// Service's hash to start the runner with.
	ServiceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=serviceHash,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"serviceHash,omitempty" validate:"required,hash"`
	// Hash of the environmental variables to start the runner with.
	EnvHash              github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=envHash,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"envHash,omitempty" validate:"omitempty,hash"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *RunnerRegisterRequest) Reset()         { *m = RunnerRegisterRequest{} }
func (m *RunnerRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RunnerRegisterRequest) ProtoMessage()    {}
func (*RunnerRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e34c5b198626b67, []int{0}
}
func (m *RunnerRegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerRegisterRequest.Unmarshal(m, b)
}
func (m *RunnerRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerRegisterRequest.Marshal(b, m, deterministic)
}
func (m *RunnerRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerRegisterRequest.Merge(m, src)
}
func (m *RunnerRegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RunnerRegisterRequest.Size(m)
}
func (m *RunnerRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerRegisterRequest proto.InternalMessageInfo

func (m *RunnerRegisterRequest) GetServiceHash() github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.ServiceHash
	}
	return nil
}

func (m *RunnerRegisterRequest) GetEnvHash() github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.EnvHash
	}
	return nil
}

// RunnerRegisterResponse is the response of the endpoint Register.
type RunnerRegisterResponse struct {
	// token to use with the other endpoints of this API.
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunnerRegisterResponse) Reset()         { *m = RunnerRegisterResponse{} }
func (m *RunnerRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RunnerRegisterResponse) ProtoMessage()    {}
func (*RunnerRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e34c5b198626b67, []int{1}
}
func (m *RunnerRegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerRegisterResponse.Unmarshal(m, b)
}
func (m *RunnerRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerRegisterResponse.Marshal(b, m, deterministic)
}
func (m *RunnerRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerRegisterResponse.Merge(m, src)
}
func (m *RunnerRegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RunnerRegisterResponse.Size(m)
}
func (m *RunnerRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerRegisterResponse proto.InternalMessageInfo

func (m *RunnerRegisterResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// RunnerDeleteRequest is the request of the endpoint DeleteRunner.
type RunnerDeleteRequest struct {
	RunnerHash           github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=runnerHash,proto3,casttype=github.com/mesg-foundation/engine/hash.Hash" json:"runnerHash,omitempty" validate:"required,hash"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *RunnerDeleteRequest) Reset()         { *m = RunnerDeleteRequest{} }
func (m *RunnerDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RunnerDeleteRequest) ProtoMessage()    {}
func (*RunnerDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e34c5b198626b67, []int{2}
}
func (m *RunnerDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerDeleteRequest.Unmarshal(m, b)
}
func (m *RunnerDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerDeleteRequest.Marshal(b, m, deterministic)
}
func (m *RunnerDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDeleteRequest.Merge(m, src)
}
func (m *RunnerDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_RunnerDeleteRequest.Size(m)
}
func (m *RunnerDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDeleteRequest proto.InternalMessageInfo

func (m *RunnerDeleteRequest) GetRunnerHash() github_com_mesg_foundation_engine_hash.Hash {
	if m != nil {
		return m.RunnerHash
	}
	return nil
}

// RunnerDeleteResponse is the response of the endpoint DeleteRunner.
type RunnerDeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunnerDeleteResponse) Reset()         { *m = RunnerDeleteResponse{} }
func (m *RunnerDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RunnerDeleteResponse) ProtoMessage()    {}
func (*RunnerDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e34c5b198626b67, []int{3}
}
func (m *RunnerDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerDeleteResponse.Unmarshal(m, b)
}
func (m *RunnerDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerDeleteResponse.Marshal(b, m, deterministic)
}
func (m *RunnerDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDeleteResponse.Merge(m, src)
}
func (m *RunnerDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_RunnerDeleteResponse.Size(m)
}
func (m *RunnerDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDeleteResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunnerRegisterRequest)(nil), "mesg.grpc.orchestrator.RunnerRegisterRequest")
	proto.RegisterType((*RunnerRegisterResponse)(nil), "mesg.grpc.orchestrator.RunnerRegisterResponse")
	proto.RegisterType((*RunnerDeleteRequest)(nil), "mesg.grpc.orchestrator.RunnerDeleteRequest")
	proto.RegisterType((*RunnerDeleteResponse)(nil), "mesg.grpc.orchestrator.RunnerDeleteResponse")
}

func init() {
	proto.RegisterFile("server/grpc/orchestrator/runner.proto", fileDescriptor_3e34c5b198626b67)
}

var fileDescriptor_3e34c5b198626b67 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x31, 0x4b, 0x03, 0x31,
	0x14, 0xf6, 0x04, 0xab, 0x46, 0xa7, 0x58, 0x4b, 0xed, 0x52, 0x09, 0x08, 0x42, 0xdb, 0x04, 0x74,
	0x53, 0x5c, 0x8a, 0x83, 0xa0, 0xd3, 0x8d, 0x6e, 0xd7, 0xeb, 0x6b, 0x2e, 0xb4, 0x97, 0x5c, 0x93,
	0x5c, 0xc1, 0xd5, 0xdf, 0x29, 0xfd, 0x09, 0x0e, 0x1d, 0x9d, 0x24, 0x89, 0x87, 0xad, 0x16, 0x2d,
	0x82, 0xd3, 0xdd, 0xe3, 0xbe, 0xf7, 0x7d, 0xdf, 0xfb, 0xde, 0x3b, 0x74, 0x66, 0x40, 0xcf, 0x40,
	0x33, 0xae, 0x8b, 0x94, 0x29, 0x9d, 0x66, 0x60, 0xac, 0x4e, 0xac, 0xd2, 0x4c, 0x97, 0x52, 0x82,
	0xa6, 0x85, 0x56, 0x56, 0xe1, 0x46, 0x0e, 0x86, 0x53, 0x07, 0xa2, 0xcb, 0xa0, 0x16, 0xe1, 0x8a,
	0x2b, 0xe6, 0x31, 0x83, 0x72, 0xc4, 0x5c, 0xe5, 0x0b, 0xff, 0x16, 0x7a, 0xc9, 0x6b, 0x84, 0x8e,
	0x63, 0x4f, 0x16, 0x03, 0x17, 0xc6, 0xba, 0xe7, 0xb4, 0x04, 0x63, 0x71, 0x8e, 0x0e, 0x9c, 0xbc,
	0x48, 0xe1, 0x2e, 0x31, 0x59, 0x33, 0x3a, 0x8d, 0xce, 0x0f, 0xfb, 0xf7, 0x8b, 0x79, 0xbb, 0x39,
	0x4b, 0x26, 0x62, 0x98, 0x58, 0xb8, 0x22, 0x1a, 0xa6, 0xa5, 0xd0, 0x30, 0xec, 0x66, 0x89, 0xc9,
	0xc8, 0xdb, 0xbc, 0xdd, 0xe1, 0xc2, 0x66, 0xe5, 0x80, 0xa6, 0x2a, 0x67, 0xce, 0x55, 0x6f, 0xa4,
	0x4a, 0x39, 0x4c, 0xac, 0x50, 0x92, 0x81, 0xe4, 0x42, 0x02, 0x73, 0x50, 0xea, 0x28, 0xe3, 0x65,
	0x7e, 0x3c, 0x42, 0xbb, 0x20, 0x67, 0x5e, 0x6a, 0xdb, 0x4b, 0x3d, 0x2c, 0xe6, 0xed, 0x93, 0x4f,
	0x29, 0x95, 0x0b, 0x0b, 0x79, 0x61, 0x9f, 0xfe, 0xa6, 0x55, 0x91, 0x13, 0x8a, 0x1a, 0x5f, 0xe7,
	0x35, 0x85, 0x92, 0x06, 0x70, 0x1d, 0xed, 0x58, 0x35, 0x06, 0xe9, 0x47, 0xdd, 0x8f, 0x43, 0x41,
	0x9e, 0x23, 0x74, 0x14, 0x1a, 0x6e, 0x61, 0x02, 0x16, 0xaa, 0x78, 0xc6, 0x08, 0x85, 0x25, 0xfc,
	0x57, 0x3a, 0x4b, 0xf4, 0xa4, 0x81, 0xea, 0xab, 0x1e, 0x82, 0xe5, 0x8b, 0x97, 0x08, 0xd5, 0xc2,
	0x07, 0x3c, 0x46, 0x7b, 0xd5, 0x44, 0xb8, 0x47, 0xd7, 0x5f, 0x04, 0x5d, 0xbb, 0xe9, 0x16, 0xdd,
	0x14, 0x1e, 0x54, 0xc9, 0x16, 0x06, 0x54, 0x0b, 0x4e, 0x70, 0xe7, 0xe7, 0xde, 0x95, 0xcc, 0x5a,
	0xdd, 0xcd, 0xc0, 0x95, 0x4c, 0xff, 0xe6, 0xf1, 0xfa, 0xf7, 0xc4, 0x3e, 0x8e, 0xe8, 0xfb, 0x4f,
	0x32, 0xa8, 0xf9, 0x13, 0xbf, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x96, 0x67, 0xbe, 0x61, 0x47,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
	// Register registers a new runner to the Engine.
	// This endpoint should only be called when the runner is ready to receive execution and emit events.
	// This endpoint returns a credential token that must be use to reach the Runner APIs.
	Register(ctx context.Context, in *RunnerRegisterRequest, opts ...grpc.CallOption) (*RunnerRegisterResponse, error)
	// Delete a runner from the blockchain.
	Delete(ctx context.Context, in *RunnerDeleteRequest, opts ...grpc.CallOption) (*RunnerDeleteResponse, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Register(ctx context.Context, in *RunnerRegisterRequest, opts ...grpc.CallOption) (*RunnerRegisterResponse, error) {
	out := new(RunnerRegisterResponse)
	err := c.cc.Invoke(ctx, "/mesg.grpc.orchestrator.Runner/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Delete(ctx context.Context, in *RunnerDeleteRequest, opts ...grpc.CallOption) (*RunnerDeleteResponse, error) {
	out := new(RunnerDeleteResponse)
	err := c.cc.Invoke(ctx, "/mesg.grpc.orchestrator.Runner/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
	// Register registers a new runner to the Engine.
	// This endpoint should only be called when the runner is ready to receive execution and emit events.
	// This endpoint returns a credential token that must be use to reach the Runner APIs.
	Register(context.Context, *RunnerRegisterRequest) (*RunnerRegisterResponse, error)
	// Delete a runner from the blockchain.
	Delete(context.Context, *RunnerDeleteRequest) (*RunnerDeleteResponse, error)
}

// UnimplementedRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (*UnimplementedRunnerServer) Register(ctx context.Context, req *RunnerRegisterRequest) (*RunnerRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedRunnerServer) Delete(ctx context.Context, req *RunnerDeleteRequest) (*RunnerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mesg.grpc.orchestrator.Runner/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Register(ctx, req.(*RunnerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mesg.grpc.orchestrator.Runner/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Delete(ctx, req.(*RunnerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mesg.grpc.orchestrator.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Runner_Register_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Runner_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/grpc/orchestrator/runner.proto",
}
