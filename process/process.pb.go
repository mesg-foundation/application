// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: process.proto

package process

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	types "github.com/mesg-foundation/engine/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Process_Node_Map_Output_Null int32

const (
	Process_Node_Map_Output_NULL_VALUE Process_Node_Map_Output_Null = 0
)

var Process_Node_Map_Output_Null_name = map[int32]string{
	0: "NULL_VALUE",
}

var Process_Node_Map_Output_Null_value = map[string]int32{
	"NULL_VALUE": 0,
}

func (x Process_Node_Map_Output_Null) String() string {
	return proto.EnumName(Process_Node_Map_Output_Null_name, int32(x))
}

func (Process_Node_Map_Output_Null) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 3, 0, 0}
}

// Type of condition available to compare the values.
type Process_Node_Filter_Condition_Predicate int32

const (
	// Predicate not defined.
	Process_Node_Filter_Condition_Unknown Process_Node_Filter_Condition_Predicate = 0
	// Equal
	Process_Node_Filter_Condition_EQ Process_Node_Filter_Condition_Predicate = 1
	// Greater than
	Process_Node_Filter_Condition_GT Process_Node_Filter_Condition_Predicate = 2
	// Greater or equal than
	Process_Node_Filter_Condition_GTE Process_Node_Filter_Condition_Predicate = 3
	// Lesser than
	Process_Node_Filter_Condition_LT Process_Node_Filter_Condition_Predicate = 4
	// Lesser or equal than
	Process_Node_Filter_Condition_LTE Process_Node_Filter_Condition_Predicate = 5
	// CONTAINS
	Process_Node_Filter_Condition_CONTAINS Process_Node_Filter_Condition_Predicate = 6
)

var Process_Node_Filter_Condition_Predicate_name = map[int32]string{
	0: "Unknown",
	1: "EQ",
	2: "GT",
	3: "GTE",
	4: "LT",
	5: "LTE",
	6: "CONTAINS",
}

var Process_Node_Filter_Condition_Predicate_value = map[string]int32{
	"Unknown":  0,
	"EQ":       1,
	"GT":       2,
	"GTE":      3,
	"LT":       4,
	"LTE":      5,
	"CONTAINS": 6,
}

func (x Process_Node_Filter_Condition_Predicate) String() string {
	return proto.EnumName(Process_Node_Filter_Condition_Predicate_name, int32(x))
}

func (Process_Node_Filter_Condition_Predicate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 4, 0, 0}
}

// A process is a configuration to trigger a specific task when certains conditions of a trigger are valid.
type Process struct {
	// Process's hash
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash" hash:"-" validate:"required"`
	// Process's name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" hash:"name:2" validate:"required"`
	// Nodes with information related to the execution to trigger.
	Nodes []*Process_Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty" hash:"name:4" validate:"dive,required"`
	// Edges to create the link between the nodes.
	Edges []*Process_Edge `protobuf:"bytes,5,rep,name=edges,proto3" json:"edges,omitempty" hash:"name:5" validate:"dive,required"`
	// The address of the process.
	Address              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" hash:"-"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0}
}
func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

// Node of the process
type Process_Node struct {
	// Key that identifies the node.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" hash:"name:1" validate:"required"`
	// Types that are valid to be assigned to Type:
	//	*Process_Node_Result_
	//	*Process_Node_Event_
	//	*Process_Node_Task_
	//	*Process_Node_Map_
	//	*Process_Node_Filter_
	Type                 isProcess_Node_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Process_Node) Reset()         { *m = Process_Node{} }
func (m *Process_Node) String() string { return proto.CompactTextString(m) }
func (*Process_Node) ProtoMessage()    {}
func (*Process_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0}
}
func (m *Process_Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node.Unmarshal(m, b)
}
func (m *Process_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node.Marshal(b, m, deterministic)
}
func (m *Process_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node.Merge(m, src)
}
func (m *Process_Node) XXX_Size() int {
	return xxx_messageInfo_Process_Node.Size(m)
}
func (m *Process_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node proto.InternalMessageInfo

type isProcess_Node_Type interface {
	isProcess_Node_Type()
	Equal(interface{}) bool
}

type Process_Node_Result_ struct {
	Result *Process_Node_Result `protobuf:"bytes,2,opt,name=result,proto3,oneof" json:"result,omitempty" hash:"name:2"`
}
type Process_Node_Event_ struct {
	Event *Process_Node_Event `protobuf:"bytes,3,opt,name=event,proto3,oneof" json:"event,omitempty" hash:"name:3"`
}
type Process_Node_Task_ struct {
	Task *Process_Node_Task `protobuf:"bytes,4,opt,name=task,proto3,oneof" json:"task,omitempty" hash:"name:4"`
}
type Process_Node_Map_ struct {
	Map *Process_Node_Map `protobuf:"bytes,5,opt,name=map,proto3,oneof" json:"map,omitempty" hash:"name:5"`
}
type Process_Node_Filter_ struct {
	Filter *Process_Node_Filter `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty" hash:"name:6"`
}

func (*Process_Node_Result_) isProcess_Node_Type() {}
func (*Process_Node_Event_) isProcess_Node_Type()  {}
func (*Process_Node_Task_) isProcess_Node_Type()   {}
func (*Process_Node_Map_) isProcess_Node_Type()    {}
func (*Process_Node_Filter_) isProcess_Node_Type() {}

func (m *Process_Node) GetType() isProcess_Node_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Process_Node) GetResult() *Process_Node_Result {
	if x, ok := m.GetType().(*Process_Node_Result_); ok {
		return x.Result
	}
	return nil
}

func (m *Process_Node) GetEvent() *Process_Node_Event {
	if x, ok := m.GetType().(*Process_Node_Event_); ok {
		return x.Event
	}
	return nil
}

func (m *Process_Node) GetTask() *Process_Node_Task {
	if x, ok := m.GetType().(*Process_Node_Task_); ok {
		return x.Task
	}
	return nil
}

func (m *Process_Node) GetMap() *Process_Node_Map {
	if x, ok := m.GetType().(*Process_Node_Map_); ok {
		return x.Map
	}
	return nil
}

func (m *Process_Node) GetFilter() *Process_Node_Filter {
	if x, ok := m.GetType().(*Process_Node_Filter_); ok {
		return x.Filter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Process_Node) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Process_Node_Result_)(nil),
		(*Process_Node_Event_)(nil),
		(*Process_Node_Task_)(nil),
		(*Process_Node_Map_)(nil),
		(*Process_Node_Filter_)(nil),
	}
}

type Process_Node_Result struct {
	// Hash of the instance that triggers the process.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:2" validate:"required"`
	// Key of the task that triggers the process.
	TaskKey              string   `protobuf:"bytes,3,opt,name=taskKey,proto3" json:"taskKey,omitempty" hash:"name:3" validate:"printascii,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process_Node_Result) Reset()         { *m = Process_Node_Result{} }
func (m *Process_Node_Result) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Result) ProtoMessage()    {}
func (*Process_Node_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 0}
}
func (m *Process_Node_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Result.Unmarshal(m, b)
}
func (m *Process_Node_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Result.Marshal(b, m, deterministic)
}
func (m *Process_Node_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Result.Merge(m, src)
}
func (m *Process_Node_Result) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Result.Size(m)
}
func (m *Process_Node_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Result proto.InternalMessageInfo

type Process_Node_Event struct {
	// Hash of the instance that triggers the process.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:2" validate:"required"`
	// Key of the event that triggers the process.
	EventKey             string   `protobuf:"bytes,3,opt,name=eventKey,proto3" json:"eventKey,omitempty" hash:"name:3" validate:"printascii,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process_Node_Event) Reset()         { *m = Process_Node_Event{} }
func (m *Process_Node_Event) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Event) ProtoMessage()    {}
func (*Process_Node_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 1}
}
func (m *Process_Node_Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Event.Unmarshal(m, b)
}
func (m *Process_Node_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Event.Marshal(b, m, deterministic)
}
func (m *Process_Node_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Event.Merge(m, src)
}
func (m *Process_Node_Event) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Event.Size(m)
}
func (m *Process_Node_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Event proto.InternalMessageInfo

type Process_Node_Task struct {
	// Hash of the instance to execute.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:2" validate:"required"`
	// Task of the instance to execute.
	TaskKey              string   `protobuf:"bytes,3,opt,name=taskKey,proto3" json:"taskKey,omitempty" hash:"name:3" validate:"printascii,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process_Node_Task) Reset()         { *m = Process_Node_Task{} }
func (m *Process_Node_Task) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Task) ProtoMessage()    {}
func (*Process_Node_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 2}
}
func (m *Process_Node_Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Task.Unmarshal(m, b)
}
func (m *Process_Node_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Task.Marshal(b, m, deterministic)
}
func (m *Process_Node_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Task.Merge(m, src)
}
func (m *Process_Node_Task) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Task.Size(m)
}
func (m *Process_Node_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Task proto.InternalMessageInfo

type Process_Node_Map struct {
	// Outputs of the mapping.
	Outputs              map[string]*Process_Node_Map_Output `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" hash:"name:1" validate:"dive,required" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *Process_Node_Map) Reset()         { *m = Process_Node_Map{} }
func (m *Process_Node_Map) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Map) ProtoMessage()    {}
func (*Process_Node_Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 3}
}
func (m *Process_Node_Map) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Map.Unmarshal(m, b)
}
func (m *Process_Node_Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Map.Marshal(b, m, deterministic)
}
func (m *Process_Node_Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Map.Merge(m, src)
}
func (m *Process_Node_Map) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Map.Size(m)
}
func (m *Process_Node_Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Map proto.InternalMessageInfo

type Process_Node_Map_Output struct {
	// Types that are valid to be assigned to Value:
	//	*Process_Node_Map_Output_Null_
	//	*Process_Node_Map_Output_StringConst
	//	*Process_Node_Map_Output_DoubleConst
	//	*Process_Node_Map_Output_BoolConst
	//	*Process_Node_Map_Output_Ref
	//	*Process_Node_Map_Output_List_
	//	*Process_Node_Map_Output_Map_
	Value                isProcess_Node_Map_Output_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *Process_Node_Map_Output) Reset()         { *m = Process_Node_Map_Output{} }
func (m *Process_Node_Map_Output) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Map_Output) ProtoMessage()    {}
func (*Process_Node_Map_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 3, 0}
}
func (m *Process_Node_Map_Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Map_Output.Unmarshal(m, b)
}
func (m *Process_Node_Map_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Map_Output.Marshal(b, m, deterministic)
}
func (m *Process_Node_Map_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Map_Output.Merge(m, src)
}
func (m *Process_Node_Map_Output) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Map_Output.Size(m)
}
func (m *Process_Node_Map_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Map_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Map_Output proto.InternalMessageInfo

type isProcess_Node_Map_Output_Value interface {
	isProcess_Node_Map_Output_Value()
	Equal(interface{}) bool
}

type Process_Node_Map_Output_Null_ struct {
	Null Process_Node_Map_Output_Null `protobuf:"varint,1,opt,name=null,proto3,enum=mesg.types.Process_Node_Map_Output_Null,oneof" json:"null,omitempty" hash:"name:1"`
}
type Process_Node_Map_Output_StringConst struct {
	StringConst string `protobuf:"bytes,2,opt,name=string_const,json=stringConst,proto3,oneof" json:"string_const,omitempty" hash:"name:2"`
}
type Process_Node_Map_Output_DoubleConst struct {
	DoubleConst float64 `protobuf:"fixed64,3,opt,name=double_const,json=doubleConst,proto3,oneof" json:"double_const,omitempty" hash:"name:3" amino:"unsafe"`
}
type Process_Node_Map_Output_BoolConst struct {
	BoolConst bool `protobuf:"varint,4,opt,name=bool_const,json=boolConst,proto3,oneof" json:"bool_const,omitempty" hash:"name:4"`
}
type Process_Node_Map_Output_Ref struct {
	Ref *Process_Node_Reference `protobuf:"bytes,5,opt,name=ref,proto3,oneof" json:"ref,omitempty" hash:"name:5"`
}
type Process_Node_Map_Output_List_ struct {
	List *Process_Node_Map_Output_List `protobuf:"bytes,6,opt,name=list,proto3,oneof" json:"list,omitempty" hash:"name:6"`
}
type Process_Node_Map_Output_Map_ struct {
	Map *Process_Node_Map_Output_Map `protobuf:"bytes,7,opt,name=map,proto3,oneof" json:"map,omitempty" hash:"name:7"`
}

func (*Process_Node_Map_Output_Null_) isProcess_Node_Map_Output_Value()       {}
func (*Process_Node_Map_Output_StringConst) isProcess_Node_Map_Output_Value() {}
func (*Process_Node_Map_Output_DoubleConst) isProcess_Node_Map_Output_Value() {}
func (*Process_Node_Map_Output_BoolConst) isProcess_Node_Map_Output_Value()   {}
func (*Process_Node_Map_Output_Ref) isProcess_Node_Map_Output_Value()         {}
func (*Process_Node_Map_Output_List_) isProcess_Node_Map_Output_Value()       {}
func (*Process_Node_Map_Output_Map_) isProcess_Node_Map_Output_Value()        {}

func (m *Process_Node_Map_Output) GetValue() isProcess_Node_Map_Output_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Process_Node_Map_Output) GetNull() Process_Node_Map_Output_Null {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_Null_); ok {
		return x.Null
	}
	return Process_Node_Map_Output_NULL_VALUE
}

func (m *Process_Node_Map_Output) GetStringConst() string {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_StringConst); ok {
		return x.StringConst
	}
	return ""
}

func (m *Process_Node_Map_Output) GetDoubleConst() float64 {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_DoubleConst); ok {
		return x.DoubleConst
	}
	return 0
}

func (m *Process_Node_Map_Output) GetBoolConst() bool {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_BoolConst); ok {
		return x.BoolConst
	}
	return false
}

func (m *Process_Node_Map_Output) GetRef() *Process_Node_Reference {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_Ref); ok {
		return x.Ref
	}
	return nil
}

func (m *Process_Node_Map_Output) GetList() *Process_Node_Map_Output_List {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_List_); ok {
		return x.List
	}
	return nil
}

func (m *Process_Node_Map_Output) GetMap() *Process_Node_Map_Output_Map {
	if x, ok := m.GetValue().(*Process_Node_Map_Output_Map_); ok {
		return x.Map
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Process_Node_Map_Output) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Process_Node_Map_Output_Null_)(nil),
		(*Process_Node_Map_Output_StringConst)(nil),
		(*Process_Node_Map_Output_DoubleConst)(nil),
		(*Process_Node_Map_Output_BoolConst)(nil),
		(*Process_Node_Map_Output_Ref)(nil),
		(*Process_Node_Map_Output_List_)(nil),
		(*Process_Node_Map_Output_Map_)(nil),
	}
}

// List is a list of output as message, so it can be used in oneof.
type Process_Node_Map_Output_List struct {
	Outputs              []*Process_Node_Map_Output `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" hash:"name:1" validate:"dive,required"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Process_Node_Map_Output_List) Reset()         { *m = Process_Node_Map_Output_List{} }
func (m *Process_Node_Map_Output_List) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Map_Output_List) ProtoMessage()    {}
func (*Process_Node_Map_Output_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 3, 0, 0}
}
func (m *Process_Node_Map_Output_List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Map_Output_List.Unmarshal(m, b)
}
func (m *Process_Node_Map_Output_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Map_Output_List.Marshal(b, m, deterministic)
}
func (m *Process_Node_Map_Output_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Map_Output_List.Merge(m, src)
}
func (m *Process_Node_Map_Output_List) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Map_Output_List.Size(m)
}
func (m *Process_Node_Map_Output_List) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Map_Output_List.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Map_Output_List proto.InternalMessageInfo

// Map is a map of output as message, so it can be used in oneof.
type Process_Node_Map_Output_Map struct {
	Outputs              map[string]*Process_Node_Map_Output `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" hash:"name:1" validate:"dive,required" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *Process_Node_Map_Output_Map) Reset()         { *m = Process_Node_Map_Output_Map{} }
func (m *Process_Node_Map_Output_Map) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Map_Output_Map) ProtoMessage()    {}
func (*Process_Node_Map_Output_Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 3, 0, 1}
}
func (m *Process_Node_Map_Output_Map) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Map_Output_Map.Unmarshal(m, b)
}
func (m *Process_Node_Map_Output_Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Map_Output_Map.Marshal(b, m, deterministic)
}
func (m *Process_Node_Map_Output_Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Map_Output_Map.Merge(m, src)
}
func (m *Process_Node_Map_Output_Map) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Map_Output_Map.Size(m)
}
func (m *Process_Node_Map_Output_Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Map_Output_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Map_Output_Map proto.InternalMessageInfo

type Process_Node_Filter struct {
	// List of condition to apply for this filter
	Conditions           []Process_Node_Filter_Condition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions" hash:"name:2" validate:"dive"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *Process_Node_Filter) Reset()         { *m = Process_Node_Filter{} }
func (m *Process_Node_Filter) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Filter) ProtoMessage()    {}
func (*Process_Node_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 4}
}
func (m *Process_Node_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Filter.Unmarshal(m, b)
}
func (m *Process_Node_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Filter.Marshal(b, m, deterministic)
}
func (m *Process_Node_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Filter.Merge(m, src)
}
func (m *Process_Node_Filter) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Filter.Size(m)
}
func (m *Process_Node_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Filter proto.InternalMessageInfo

type Process_Node_Filter_Condition struct {
	// Key to check.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" hash:"name:1" validate:"required,printascii"`
	// Type of condition to apply.
	Predicate Process_Node_Filter_Condition_Predicate `protobuf:"varint,2,opt,name=predicate,proto3,enum=mesg.types.Process_Node_Filter_Condition_Predicate" json:"predicate,omitempty" hash:"name:2" validate:"required"`
	// Value of the filter.
	Value                *types.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty" hash:"name:4" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Process_Node_Filter_Condition) Reset()         { *m = Process_Node_Filter_Condition{} }
func (m *Process_Node_Filter_Condition) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Filter_Condition) ProtoMessage()    {}
func (*Process_Node_Filter_Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 4, 0}
}
func (m *Process_Node_Filter_Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Filter_Condition.Unmarshal(m, b)
}
func (m *Process_Node_Filter_Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Filter_Condition.Marshal(b, m, deterministic)
}
func (m *Process_Node_Filter_Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Filter_Condition.Merge(m, src)
}
func (m *Process_Node_Filter_Condition) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Filter_Condition.Size(m)
}
func (m *Process_Node_Filter_Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Filter_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Filter_Condition proto.InternalMessageInfo

type Process_Node_Reference struct {
	NodeKey string `protobuf:"bytes,1,opt,name=nodeKey,proto3" json:"nodeKey,omitempty" hash:"name:1" validate:"required"`
	// Path can be nil if referencing the whole node's output
	Path                 *Process_Node_Reference_Path `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty" hash:"name:2"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Process_Node_Reference) Reset()         { *m = Process_Node_Reference{} }
func (m *Process_Node_Reference) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Reference) ProtoMessage()    {}
func (*Process_Node_Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 5}
}
func (m *Process_Node_Reference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Reference.Unmarshal(m, b)
}
func (m *Process_Node_Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Reference.Marshal(b, m, deterministic)
}
func (m *Process_Node_Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Reference.Merge(m, src)
}
func (m *Process_Node_Reference) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Reference.Size(m)
}
func (m *Process_Node_Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Reference proto.InternalMessageInfo

type Process_Node_Reference_Path struct {
	// Types that are valid to be assigned to Selector:
	//	*Process_Node_Reference_Path_Key
	//	*Process_Node_Reference_Path_Index
	Selector isProcess_Node_Reference_Path_Selector `protobuf_oneof:"selector"`
	// Path can be nil if on the leaf
	Path                 *Process_Node_Reference_Path `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty" hash:"name:3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Process_Node_Reference_Path) Reset()         { *m = Process_Node_Reference_Path{} }
func (m *Process_Node_Reference_Path) String() string { return proto.CompactTextString(m) }
func (*Process_Node_Reference_Path) ProtoMessage()    {}
func (*Process_Node_Reference_Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 0, 5, 0}
}
func (m *Process_Node_Reference_Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Node_Reference_Path.Unmarshal(m, b)
}
func (m *Process_Node_Reference_Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Node_Reference_Path.Marshal(b, m, deterministic)
}
func (m *Process_Node_Reference_Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Node_Reference_Path.Merge(m, src)
}
func (m *Process_Node_Reference_Path) XXX_Size() int {
	return xxx_messageInfo_Process_Node_Reference_Path.Size(m)
}
func (m *Process_Node_Reference_Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Node_Reference_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Node_Reference_Path proto.InternalMessageInfo

type isProcess_Node_Reference_Path_Selector interface {
	isProcess_Node_Reference_Path_Selector()
	Equal(interface{}) bool
}

type Process_Node_Reference_Path_Key struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty" hash:"name:1" validate:"printascii"`
}
type Process_Node_Reference_Path_Index struct {
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3,oneof" json:"index,omitempty" hash:"name:2"`
}

func (*Process_Node_Reference_Path_Key) isProcess_Node_Reference_Path_Selector()   {}
func (*Process_Node_Reference_Path_Index) isProcess_Node_Reference_Path_Selector() {}

func (m *Process_Node_Reference_Path) GetSelector() isProcess_Node_Reference_Path_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *Process_Node_Reference_Path) GetKey() string {
	if x, ok := m.GetSelector().(*Process_Node_Reference_Path_Key); ok {
		return x.Key
	}
	return ""
}

func (m *Process_Node_Reference_Path) GetIndex() uint64 {
	if x, ok := m.GetSelector().(*Process_Node_Reference_Path_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Process_Node_Reference_Path) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Process_Node_Reference_Path_Key)(nil),
		(*Process_Node_Reference_Path_Index)(nil),
	}
}

type Process_Edge struct {
	// Source of the edge.
	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty" hash:"name:1" validate:"required"`
	// Destination of the edge.
	Dst                  string   `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty" hash:"name:2" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process_Edge) Reset()         { *m = Process_Edge{} }
func (m *Process_Edge) String() string { return proto.CompactTextString(m) }
func (*Process_Edge) ProtoMessage()    {}
func (*Process_Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_54c4d0e8c0aaf5c3, []int{0, 1}
}
func (m *Process_Edge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process_Edge.Unmarshal(m, b)
}
func (m *Process_Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process_Edge.Marshal(b, m, deterministic)
}
func (m *Process_Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process_Edge.Merge(m, src)
}
func (m *Process_Edge) XXX_Size() int {
	return xxx_messageInfo_Process_Edge.Size(m)
}
func (m *Process_Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Process_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Process_Edge proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mesg.types.Process_Node_Map_Output_Null", Process_Node_Map_Output_Null_name, Process_Node_Map_Output_Null_value)
	proto.RegisterEnum("mesg.types.Process_Node_Filter_Condition_Predicate", Process_Node_Filter_Condition_Predicate_name, Process_Node_Filter_Condition_Predicate_value)
	proto.RegisterType((*Process)(nil), "mesg.types.Process")
	proto.RegisterType((*Process_Node)(nil), "mesg.types.Process.Node")
	proto.RegisterType((*Process_Node_Result)(nil), "mesg.types.Process.Node.Result")
	proto.RegisterType((*Process_Node_Event)(nil), "mesg.types.Process.Node.Event")
	proto.RegisterType((*Process_Node_Task)(nil), "mesg.types.Process.Node.Task")
	proto.RegisterType((*Process_Node_Map)(nil), "mesg.types.Process.Node.Map")
	proto.RegisterMapType((map[string]*Process_Node_Map_Output)(nil), "mesg.types.Process.Node.Map.OutputsEntry")
	proto.RegisterType((*Process_Node_Map_Output)(nil), "mesg.types.Process.Node.Map.Output")
	proto.RegisterType((*Process_Node_Map_Output_List)(nil), "mesg.types.Process.Node.Map.Output.List")
	proto.RegisterType((*Process_Node_Map_Output_Map)(nil), "mesg.types.Process.Node.Map.Output.Map")
	proto.RegisterMapType((map[string]*Process_Node_Map_Output)(nil), "mesg.types.Process.Node.Map.Output.Map.OutputsEntry")
	proto.RegisterType((*Process_Node_Filter)(nil), "mesg.types.Process.Node.Filter")
	proto.RegisterType((*Process_Node_Filter_Condition)(nil), "mesg.types.Process.Node.Filter.Condition")
	proto.RegisterType((*Process_Node_Reference)(nil), "mesg.types.Process.Node.Reference")
	proto.RegisterType((*Process_Node_Reference_Path)(nil), "mesg.types.Process.Node.Reference.Path")
	proto.RegisterType((*Process_Edge)(nil), "mesg.types.Process.Edge")
}

func init() { proto.RegisterFile("process.proto", fileDescriptor_54c4d0e8c0aaf5c3) }

var fileDescriptor_54c4d0e8c0aaf5c3 = []byte{
	// 1198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0xf6, 0xfa, 0xd7, 0x8b, 0x5b, 0x99, 0x11, 0x3f, 0xac, 0xa5, 0xd4, 0xc1, 0x15,
	0x24, 0x81, 0x64, 0x4d, 0x9c, 0xb4, 0xa5, 0x41, 0x08, 0x65, 0x23, 0xb7, 0x0d, 0x75, 0xdd, 0xc4,
	0x75, 0x0a, 0xea, 0x25, 0x6c, 0x76, 0xc7, 0xf6, 0x2a, 0xeb, 0x1d, 0x77, 0x67, 0x36, 0x24, 0x88,
	0x3f, 0x82, 0x3f, 0x83, 0x3f, 0xa5, 0xe2, 0x02, 0x02, 0x71, 0x01, 0xc9, 0x12, 0xbd, 0x71, 0xe1,
	0x60, 0x89, 0x0b, 0x27, 0x34, 0x33, 0x6b, 0x67, 0x13, 0xdb, 0x89, 0xdb, 0x82, 0x90, 0x38, 0x25,
	0xbb, 0x3b, 0xef, 0x33, 0x33, 0xdf, 0xf7, 0xe6, 0x3b, 0xcf, 0x70, 0xa9, 0xeb, 0x13, 0x0b, 0x53,
	0xaa, 0x77, 0x7d, 0xc2, 0x08, 0x82, 0x0e, 0xa6, 0x2d, 0x9d, 0x1d, 0x77, 0x31, 0xd5, 0x8a, 0x2d,
	0xd2, 0x22, 0x25, 0xf1, 0x7e, 0x3f, 0x68, 0x96, 0xf8, 0x93, 0x78, 0x10, 0xff, 0xc9, 0xf1, 0xda,
	0x9b, 0xc3, 0xcf, 0x22, 0xa6, 0x44, 0x99, 0x1f, 0x58, 0x4c, 0x7e, 0x2c, 0x7e, 0x73, 0x05, 0x52,
	0xdb, 0x12, 0x8f, 0x5a, 0xa0, 0xb6, 0x4d, 0xda, 0xce, 0x2b, 0x73, 0xca, 0x42, 0xd6, 0x78, 0xf8,
	0xb4, 0x57, 0x98, 0xf9, 0xa5, 0x57, 0x78, 0xbf, 0xe5, 0xb0, 0x76, 0xb0, 0xaf, 0x5b, 0xa4, 0x53,
	0xe2, 0x33, 0x2f, 0x37, 0x49, 0xe0, 0xd9, 0x26, 0x73, 0x88, 0x57, 0xc2, 0x5e, 0xcb, 0xf1, 0x70,
	0x89, 0x47, 0xe9, 0x77, 0x4d, 0xda, 0xee, 0xf7, 0x0a, 0x57, 0xf8, 0xc3, 0x7a, 0x71, 0xb9, 0x38,
	0x77, 0x68, 0xba, 0x8e, 0x6d, 0x32, 0xbc, 0x5e, 0xf4, 0xf1, 0x93, 0xc0, 0xf1, 0xb1, 0x5d, 0xac,
	0x8b, 0x09, 0xd0, 0x2d, 0x50, 0x3d, 0xb3, 0x83, 0xf3, 0xb1, 0x39, 0x65, 0x21, 0x63, 0xbc, 0xd3,
	0xef, 0x15, 0xde, 0x96, 0x51, 0xfc, 0xed, 0x7a, 0x79, 0x42, 0x28, 0xff, 0x88, 0x1e, 0x43, 0xc2,
	0x23, 0x36, 0xa6, 0x79, 0x75, 0x2e, 0xbe, 0x30, 0x5b, 0xce, 0xeb, 0x27, 0x62, 0xe8, 0xe1, 0x3e,
	0xf4, 0x1a, 0xb1, 0xb1, 0xf1, 0x5e, 0xbf, 0x57, 0x78, 0x37, 0x42, 0x5d, 0x8b, 0x52, 0x6d, 0xe7,
	0x10, 0x2f, 0x9d, 0xa0, 0x25, 0x92, 0xb3, 0xb1, 0xdd, 0xc2, 0x34, 0x9f, 0x98, 0xcc, 0xae, 0xd8,
	0xad, 0x51, 0xf6, 0xf5, 0xf3, 0xd8, 0x02, 0x89, 0x3e, 0x83, 0x94, 0x69, 0xdb, 0x3e, 0xa6, 0x34,
	0x9f, 0x14, 0xf2, 0x7e, 0xdc, 0xef, 0x15, 0xd2, 0x03, 0xad, 0xfe, 0xea, 0x15, 0x96, 0x23, 0x32,
	0x5b, 0x84, 0x76, 0x08, 0x0d, 0xff, 0x2c, 0x53, 0xfb, 0x40, 0x66, 0x4e, 0xdf, 0xb0, 0xac, 0x0d,
	0x09, 0xa9, 0x0f, 0x68, 0xda, 0xcf, 0x6f, 0x80, 0xca, 0x37, 0x8c, 0x6e, 0x42, 0xfc, 0x00, 0x1f,
	0x8b, 0xe4, 0x8d, 0x6a, 0xba, 0x32, 0x5e, 0x53, 0x1e, 0x81, 0xaa, 0x90, 0xf4, 0x31, 0x0d, 0x5c,
	0x26, 0xf2, 0x31, 0x5b, 0x2e, 0x4c, 0xd2, 0x54, 0xaf, 0x8b, 0x61, 0xc6, 0x2b, 0xfd, 0x5e, 0xe1,
	0xd2, 0xa9, 0x84, 0xdd, 0x9d, 0xa9, 0x87, 0x0c, 0xb4, 0x05, 0x09, 0x7c, 0x88, 0x3d, 0x96, 0x8f,
	0x0b, 0xd8, 0xd5, 0x89, 0xb0, 0x0a, 0x1f, 0x35, 0xc2, 0x5a, 0xe5, 0x2c, 0x49, 0x40, 0xb7, 0x41,
	0x65, 0x26, 0x3d, 0xc8, 0xab, 0x82, 0xf4, 0xd6, 0x44, 0x52, 0xc3, 0xa4, 0x07, 0x23, 0xa0, 0x35,
	0x0e, 0x12, 0xf1, 0x68, 0x13, 0xe2, 0x1d, 0xb3, 0x9b, 0x4f, 0x08, 0xcc, 0x95, 0x89, 0x98, 0xfb,
	0x66, 0x77, 0x84, 0x72, 0x9d, 0x53, 0x78, 0x34, 0x57, 0xa9, 0xe9, 0xb8, 0x0c, 0xfb, 0x22, 0x7f,
	0xe7, 0xa9, 0x74, 0x5b, 0x0c, 0x1b, 0x41, 0xdd, 0x10, 0x2a, 0x49, 0x86, 0xf6, 0xa3, 0x02, 0x49,
	0xa9, 0x26, 0xfa, 0x1a, 0xb2, 0x8e, 0x47, 0x99, 0xe9, 0x59, 0x98, 0x1f, 0x21, 0x91, 0x84, 0xac,
	0xf1, 0xf9, 0x8b, 0x9d, 0xbe, 0x29, 0xce, 0xd1, 0xa9, 0xd9, 0xd0, 0xa7, 0x90, 0xe2, 0x1a, 0xdd,
	0xc3, 0xc7, 0x22, 0x61, 0x19, 0xe3, 0x83, 0x7e, 0xaf, 0xb0, 0x74, 0x2a, 0x21, 0x11, 0x4a, 0xd7,
	0x77, 0x3c, 0x66, 0x52, 0xcb, 0x71, 0x22, 0x15, 0x3e, 0x00, 0x68, 0x3f, 0x29, 0x90, 0x10, 0x59,
	0xfd, 0x8f, 0xf7, 0x54, 0x85, 0xb4, 0x28, 0xa0, 0x97, 0xd9, 0xd4, 0x90, 0xa0, 0xfd, 0xa0, 0x80,
	0xca, 0x2b, 0xec, 0x7f, 0x94, 0xa8, 0xef, 0xd3, 0x10, 0xbf, 0x6f, 0x76, 0x11, 0x81, 0x14, 0x09,
	0x58, 0x37, 0x60, 0x34, 0xaf, 0x08, 0xcb, 0x5b, 0x3c, 0xef, 0x70, 0xe8, 0x0f, 0xe4, 0xd8, 0x8a,
	0xc7, 0xfc, 0xe3, 0x11, 0x0f, 0x5c, 0x39, 0xc7, 0x03, 0x07, 0xb3, 0x68, 0x7f, 0x26, 0x21, 0x29,
	0x29, 0x68, 0x07, 0x54, 0x2f, 0x70, 0x5d, 0xe1, 0x57, 0x97, 0xcb, 0x0b, 0x53, 0x4c, 0xac, 0xd7,
	0x02, 0xd7, 0x1d, 0x39, 0x56, 0x2b, 0xe2, 0x9c, 0x73, 0x14, 0xba, 0x01, 0x59, 0xca, 0x7c, 0xc7,
	0x6b, 0xed, 0x59, 0xc4, 0xa3, 0x2c, 0xbc, 0x5e, 0xc6, 0xba, 0xd5, 0xac, 0x1c, 0xb8, 0xc9, 0xc7,
	0xa1, 0x0a, 0x64, 0x6d, 0x12, 0xec, 0xbb, 0x38, 0x8c, 0xe3, 0xfa, 0x2a, 0xc6, 0xdc, 0xc9, 0x65,
	0x36, 0xd0, 0xd7, 0xec, 0x38, 0x1e, 0x59, 0x2f, 0x06, 0x1e, 0x35, 0x9b, 0x58, 0x60, 0x64, 0x9c,
	0xc4, 0x94, 0x01, 0xf6, 0x09, 0x71, 0x43, 0x08, 0x37, 0xad, 0xf4, 0x78, 0x57, 0xca, 0xf0, 0x61,
	0x32, 0x66, 0x0b, 0xe2, 0x3e, 0x6e, 0x86, 0xd6, 0x54, 0x3c, 0xc7, 0x78, 0x9b, 0xd8, 0xc7, 0x9e,
	0x85, 0x27, 0x18, 0x94, 0x8f, 0x9b, 0x5c, 0x50, 0xd7, 0xa1, 0x2c, 0xb4, 0xa7, 0xa9, 0x04, 0xad,
	0x3a, 0x94, 0x8d, 0xf7, 0x29, 0x81, 0x42, 0x35, 0x69, 0x9c, 0x29, 0x41, 0x9c, 0x9f, 0x86, 0x38,
	0xce, 0x43, 0x6f, 0x0e, 0x3c, 0x54, 0x7b, 0x02, 0x2a, 0x9f, 0x12, 0x39, 0x67, 0xeb, 0xee, 0xda,
	0x14, 0xec, 0x17, 0xab, 0xb8, 0x67, 0x8a, 0x2c, 0xf5, 0xaf, 0xce, 0x4e, 0xb9, 0x36, 0xe5, 0x76,
	0xfe, 0x81, 0xaa, 0xdf, 0x83, 0x6c, 0x14, 0x82, 0x72, 0x91, 0x9b, 0x5a, 0x5e, 0xc1, 0xb7, 0x20,
	0x71, 0x68, 0xba, 0x01, 0x0e, 0x6f, 0xe0, 0x69, 0xe4, 0xa8, 0xcb, 0x88, 0xf5, 0xd8, 0x87, 0x4a,
	0xf1, 0x75, 0x50, 0xf9, 0xd9, 0x40, 0x97, 0x01, 0x6a, 0xbb, 0xd5, 0xea, 0xde, 0xa3, 0x8d, 0xea,
	0x6e, 0x25, 0x37, 0x63, 0xa4, 0x42, 0xec, 0xbf, 0xbe, 0x02, 0xed, 0xd7, 0x38, 0x24, 0xe5, 0xbd,
	0x87, 0xbe, 0x00, 0xb0, 0x88, 0x67, 0x3b, 0xdc, 0xf9, 0x68, 0x3e, 0x76, 0x81, 0xaf, 0xc8, 0x20,
	0x7d, 0x73, 0x10, 0x61, 0xbc, 0xc6, 0xfd, 0x74, 0xe4, 0xc8, 0xd6, 0x23, 0x4c, 0xed, 0x8f, 0x18,
	0x64, 0x86, 0x01, 0xc8, 0x88, 0xf6, 0x3d, 0x67, 0x4d, 0x71, 0x6c, 0xdf, 0xb3, 0x74, 0xe2, 0x8e,
	0x61, 0x0b, 0x74, 0x04, 0x99, 0xae, 0x8f, 0x6d, 0xc7, 0x32, 0x99, 0x54, 0xe0, 0x72, 0x79, 0x75,
	0xea, 0x25, 0xeb, 0xdb, 0x83, 0xd0, 0x69, 0x5b, 0xd9, 0x93, 0xc9, 0xd0, 0xce, 0x40, 0x77, 0xd9,
	0xe4, 0xbc, 0x2a, 0x67, 0x1d, 0x74, 0xec, 0xfa, 0x23, 0xfe, 0x6d, 0x04, 0xbb, 0x36, 0x1e, 0x2b,
	0x49, 0xc5, 0x6d, 0xc8, 0x0c, 0x57, 0x84, 0x66, 0x21, 0xb5, 0xeb, 0x1d, 0x78, 0xe4, 0x4b, 0x2f,
	0x37, 0x83, 0x92, 0x10, 0xab, 0xec, 0xe4, 0x14, 0xfe, 0xf7, 0x4e, 0x23, 0x17, 0x43, 0x29, 0x88,
	0xdf, 0x69, 0x54, 0x72, 0x71, 0xfe, 0xa2, 0xda, 0xc8, 0xa9, 0xfc, 0x45, 0xb5, 0x51, 0xc9, 0x25,
	0x50, 0x16, 0xd2, 0x9b, 0x0f, 0x6a, 0x8d, 0x8d, 0xad, 0xda, 0xc3, 0x5c, 0x52, 0xfb, 0x3d, 0x06,
	0x99, 0xa1, 0x05, 0xa1, 0x4f, 0x20, 0xc5, 0xfb, 0xe5, 0x7b, 0xcf, 0xdb, 0x6c, 0x0e, 0xa2, 0x50,
	0x0d, 0xd4, 0xae, 0xc9, 0xda, 0x61, 0xa9, 0xcd, 0x5f, 0xec, 0x7a, 0xfa, 0xb6, 0xc9, 0xda, 0x63,
	0x8c, 0xbc, 0x2e, 0x38, 0xda, 0x77, 0x0a, 0xa8, 0x7c, 0x04, 0xfa, 0x28, 0x5a, 0x0a, 0xf3, 0xfd,
	0x5e, 0xe1, 0xda, 0xa4, 0x55, 0x45, 0x2a, 0x80, 0x9b, 0x13, 0xaf, 0x81, 0x45, 0x48, 0x38, 0x9e,
	0x8d, 0x8f, 0xc4, 0xb2, 0xd4, 0xf1, 0xd7, 0x86, 0x1c, 0x31, 0xdc, 0x40, 0xfc, 0xe5, 0x36, 0xb0,
	0x1a, 0x6e, 0xc0, 0x00, 0x48, 0x53, 0xec, 0x62, 0x8b, 0x11, 0xdf, 0x48, 0x82, 0xca, 0x49, 0xda,
	0x11, 0xa8, 0xfc, 0xb7, 0x06, 0x6f, 0xeb, 0xa9, 0x6f, 0x3d, 0x67, 0x5b, 0x4f, 0x7d, 0x8b, 0x07,
	0xda, 0xc3, 0x4b, 0x70, 0xca, 0xc2, 0xe4, 0x11, 0xc6, 0xea, 0xd3, 0xdf, 0xae, 0xce, 0x7c, 0xfb,
	0xec, 0xaa, 0xf2, 0x78, 0xf1, 0xe2, 0x9e, 0x26, 0xfc, 0x69, 0xba, 0x9f, 0x14, 0x25, 0xbb, 0xfa,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0xe7, 0xb2, 0x48, 0xac, 0x0e, 0x00, 0x00,
}

func (this *Process) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process)
	if !ok {
		that2, ok := that.(Process)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node)
	if !ok {
		that2, ok := that.(Process_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Result_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Result_)
	if !ok {
		that2, ok := that.(Process_Node_Result_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *Process_Node_Event_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Event_)
	if !ok {
		that2, ok := that.(Process_Node_Event_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *Process_Node_Task_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Task_)
	if !ok {
		that2, ok := that.(Process_Node_Task_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *Process_Node_Map_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_)
	if !ok {
		that2, ok := that.(Process_Node_Map_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	return true
}
func (this *Process_Node_Filter_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Filter_)
	if !ok {
		that2, ok := that.(Process_Node_Filter_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	return true
}
func (this *Process_Node_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Result)
	if !ok {
		that2, ok := that.(Process_Node_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstanceHash.Equal(that1.InstanceHash) {
		return false
	}
	if this.TaskKey != that1.TaskKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Event)
	if !ok {
		that2, ok := that.(Process_Node_Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstanceHash.Equal(that1.InstanceHash) {
		return false
	}
	if this.EventKey != that1.EventKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Task)
	if !ok {
		that2, ok := that.(Process_Node_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InstanceHash.Equal(that1.InstanceHash) {
		return false
	}
	if this.TaskKey != that1.TaskKey {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map)
	if !ok {
		that2, ok := that.(Process_Node_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_Null_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_Null_)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_Null_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Null != that1.Null {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_StringConst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_StringConst)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_StringConst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringConst != that1.StringConst {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_DoubleConst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_DoubleConst)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_DoubleConst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DoubleConst != that1.DoubleConst {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_BoolConst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_BoolConst)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_BoolConst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolConst != that1.BoolConst {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_Ref) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_Ref)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_Ref)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_List_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_List_)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_List_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.List.Equal(that1.List) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_Map_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_Map_)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_Map_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_List)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Map_Output_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Map_Output_Map)
	if !ok {
		that2, ok := that.(Process_Node_Map_Output_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Filter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Filter)
	if !ok {
		that2, ok := that.(Process_Node_Filter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(&that1.Conditions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Filter_Condition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Filter_Condition)
	if !ok {
		that2, ok := that.(Process_Node_Filter_Condition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Predicate != that1.Predicate {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Reference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Reference)
	if !ok {
		that2, ok := that.(Process_Node_Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeKey != that1.NodeKey {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Reference_Path) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Reference_Path)
	if !ok {
		that2, ok := that.(Process_Node_Reference_Path)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Selector == nil {
		if this.Selector != nil {
			return false
		}
	} else if this.Selector == nil {
		return false
	} else if !this.Selector.Equal(that1.Selector) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Process_Node_Reference_Path_Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Reference_Path_Key)
	if !ok {
		that2, ok := that.(Process_Node_Reference_Path_Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *Process_Node_Reference_Path_Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Node_Reference_Path_Index)
	if !ok {
		that2, ok := that.(Process_Node_Reference_Path_Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *Process_Edge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Process_Edge)
	if !ok {
		that2, ok := that.(Process_Edge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Src != that1.Src {
		return false
	}
	if this.Dst != that1.Dst {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
