// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/mesg-foundation/engine/protobuf/api"
import context "context"
import execution "github.com/mesg-foundation/engine/execution"
import hash "github.com/mesg-foundation/engine/hash"
import mock "github.com/stretchr/testify/mock"

// ExecutionSDK is an autogenerated mock type for the ExecutionSDK type
type ExecutionSDK struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *ExecutionSDK) Create(req *api.CreateExecutionRequest) (*execution.Execution, error) {
	ret := _m.Called(req)

	var r0 *execution.Execution
	if rf, ok := ret.Get(0).(func(*api.CreateExecutionRequest) *execution.Execution); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.CreateExecutionRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *ExecutionSDK) Get(_a0 hash.Hash) (*execution.Execution, error) {
	ret := _m.Called(_a0)

	var r0 *execution.Execution
	if rf, ok := ret.Get(0).(func(hash.Hash) *execution.Execution); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hash.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stream provides a mock function with given fields: ctx, req
func (_m *ExecutionSDK) Stream(ctx context.Context, req *api.StreamExecutionRequest) (chan *execution.Execution, chan error, error) {
	ret := _m.Called(ctx, req)

	var r0 chan *execution.Execution
	if rf, ok := ret.Get(0).(func(context.Context, *api.StreamExecutionRequest) chan *execution.Execution); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *execution.Execution)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(context.Context, *api.StreamExecutionRequest) chan error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *api.StreamExecutionRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
