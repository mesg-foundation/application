// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execution.proto

package execution

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status represents the status of a single execution.
// Note that a valid execution must have only one status
// flag at time.
type Status int32

const (
	// Unknown status represents any status unknown to execution.
	Status_Unknown Status = 0
	// Created is an initial status after execution creation.
	Status_Created Status = 1
	// InProgress informs that processing of execution has been started.
	Status_InProgress Status = 2
	// Completed is a success status after execution was processed.
	Status_Completed Status = 3
	// Failed is an error status after execution was processed.
	Status_Failed Status = 4
)

var Status_name = map[int32]string{
	0: "Unknown",
	1: "Created",
	2: "InProgress",
	3: "Completed",
	4: "Failed",
}

var Status_value = map[string]int32{
	"Unknown":    0,
	"Created":    1,
	"InProgress": 2,
	"Completed":  3,
	"Failed":     4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}

// Execution represents a single execution run in engine.
type Execution struct {
	// Hash is a unique hash to identify execution.
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash" hash:"-"`
	// parentHash is the unique hash of parent execution.
	// If execution is triggered by another one,
	// dependency execution considered as the parent.
	ParentHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=parentHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"parentHash" hash:"name:2"`
	// eventHash is unique event hash.
	EventHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,3,opt,name=eventHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"eventHash" hash:"name:3"`
	// Status is the current status of execution.
	Status Status `protobuf:"varint,4,opt,name=status,proto3,enum=types.Status" json:"status,omitempty" hash:"-"`
	// instanceHash is hash of the instance that can proceed an execution
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,5,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:5"`
	// taskKey is the key of the task of this execution.
	TaskKey string `protobuf:"bytes,6,opt,name=taskKey,proto3" json:"taskKey,omitempty" hash:"name:6"`
	// inputs data of the execution.
	Inputs *_struct.Struct `protobuf:"bytes,7,opt,name=inputs,proto3" json:"inputs,omitempty" hash:"name:7"`
	// outputs are the returned data of successful execution.
	Outputs *_struct.Struct `protobuf:"bytes,8,opt,name=outputs,proto3" json:"outputs,omitempty" hash:"-"`
	// error message of a failed execution.
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty" hash:"-"`
	// tags are optionally associated with execution by the user.
	Tags []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" hash:"name:10"`
	// workflowHash is the unique hash of the workflow associated to this execution.
	WorkflowHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,11,opt,name=workflowHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"workflowHash" hash:"-"`
	// step of the workflow.
	StepID string `protobuf:"bytes,12,opt,name=stepID,proto3" json:"stepID,omitempty" hash:"name:12"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return m.Size()
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.Status", Status_name, Status_value)
	proto.RegisterType((*Execution)(nil), "types.Execution")
}

func init() { proto.RegisterFile("execution.proto", fileDescriptor_776e2c5022e94aef) }

var fileDescriptor_776e2c5022e94aef = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0xad, 0x4d, 0x97, 0xb7, 0x7f, 0x28, 0xbe, 0x10, 0x4d, 0x28, 0xad, 0x7c, 0x40,
	0xd5, 0xa6, 0xa5, 0xd0, 0x0a, 0x90, 0x76, 0x99, 0x94, 0x0d, 0x44, 0x85, 0x90, 0x50, 0x2a, 0x2e,
	0xdc, 0xdc, 0xd6, 0x4d, 0xa3, 0xb6, 0x76, 0x64, 0x3b, 0x94, 0x7d, 0x0b, 0x3e, 0x56, 0x8f, 0x3b,
	0x4e, 0x1c, 0x2a, 0x68, 0xbf, 0xc1, 0x3e, 0x01, 0x8a, 0xb3, 0xb2, 0x85, 0x49, 0x08, 0xa1, 0xde,
	0xf2, 0xfa, 0x7d, 0xde, 0x9f, 0x1f, 0xdb, 0x8f, 0x02, 0x8f, 0xe8, 0x57, 0x3a, 0x4c, 0x54, 0xc4,
	0x99, 0x17, 0x0b, 0xae, 0x38, 0x2a, 0xaa, 0xcb, 0x98, 0xca, 0xc3, 0xa7, 0x21, 0xe7, 0xe1, 0x8c,
	0xb6, 0xf5, 0xe2, 0x20, 0x19, 0xb7, 0xa5, 0x12, 0xc9, 0x50, 0x65, 0xa2, 0x43, 0x1c, 0xf2, 0x90,
	0xdf, 0xf5, 0xd2, 0x4a, 0x17, 0xfa, 0x2b, 0xd3, 0xe0, 0x6b, 0x0b, 0xec, 0x37, 0x5b, 0x38, 0xea,
	0x43, 0x61, 0x42, 0xe4, 0xc4, 0x31, 0x9b, 0x66, 0xab, 0xe2, 0x9f, 0x2d, 0x57, 0x0d, 0xe3, 0xfb,
	0xaa, 0x71, 0x1c, 0x46, 0x6a, 0x92, 0x0c, 0xbc, 0x21, 0x9f, 0xb7, 0xe7, 0x54, 0x86, 0x27, 0x63,
	0x9e, 0xb0, 0x11, 0x49, 0x27, 0xda, 0x94, 0x85, 0x11, 0xa3, 0xed, 0x74, 0xca, 0x7b, 0x47, 0xe4,
	0xe4, 0x66, 0xd5, 0x38, 0x48, 0x8b, 0x53, 0x7c, 0x82, 0x03, 0x0d, 0x43, 0x23, 0x80, 0x98, 0x08,
	0xca, 0x54, 0xda, 0x77, 0xf6, 0x34, 0xfa, 0xe2, 0xff, 0xd0, 0xd5, 0x0c, 0xcd, 0xc8, 0x9c, 0x9e,
	0x76, 0x70, 0x70, 0x8f, 0x8b, 0x06, 0x60, 0xd3, 0x2f, 0xdb, 0x4d, 0xf6, 0x77, 0xb5, 0x49, 0x17,
	0x07, 0x77, 0x58, 0xd4, 0x05, 0x4b, 0x2a, 0xa2, 0x12, 0xe9, 0x14, 0x9a, 0x66, 0xab, 0xd6, 0xa9,
	0x7a, 0xfa, 0x19, 0xbc, 0xbe, 0x5e, 0xf4, 0x2b, 0xb9, 0xc3, 0xdf, 0x4a, 0xd1, 0x04, 0x2a, 0x11,
	0x93, 0x8a, 0xb0, 0x21, 0xd5, 0xde, 0x8a, 0xbb, 0xf2, 0xf6, 0x12, 0x07, 0x39, 0x32, 0x3a, 0x86,
	0x92, 0x22, 0x72, 0xfa, 0x9e, 0x5e, 0x3a, 0x56, 0xd3, 0x6c, 0xd9, 0xfe, 0xe3, 0x3f, 0x26, 0x5e,
	0xe1, 0x60, 0xab, 0x40, 0x3e, 0x58, 0x11, 0x8b, 0x13, 0x25, 0x9d, 0x52, 0xd3, 0x6c, 0x95, 0x3b,
	0x4f, 0xbc, 0x2c, 0x4b, 0xde, 0x36, 0x2f, 0x5e, 0x5f, 0x67, 0xe9, 0x01, 0xe4, 0x35, 0x0e, 0x6e,
	0x27, 0xd1, 0x19, 0x94, 0x78, 0xa2, 0x34, 0xe4, 0xe0, 0xef, 0x90, 0xfc, 0xd5, 0x6c, 0xa7, 0x10,
	0x86, 0x22, 0x15, 0x82, 0x0b, 0xc7, 0xd6, 0x7e, 0xf3, 0xaa, 0xac, 0x85, 0x9e, 0x41, 0x41, 0x91,
	0x50, 0x3a, 0xd0, 0xdc, 0x6f, 0xd9, 0x3e, 0xba, 0x59, 0x35, 0x6a, 0xf7, 0xdc, 0xbc, 0x78, 0x8e,
	0x03, 0xdd, 0x47, 0x43, 0xa8, 0x2c, 0xb8, 0x98, 0x8e, 0x67, 0x7c, 0xa1, 0xef, 0xb9, 0xbc, 0x9b,
	0x0c, 0xe7, 0xa0, 0xe8, 0x28, 0x4d, 0x00, 0x8d, 0x7b, 0x17, 0x4e, 0x45, 0x3b, 0x7e, 0x60, 0xa7,
	0xa3, 0x1f, 0x3e, 0x55, 0x1c, 0x7d, 0x00, 0x2b, 0x0b, 0x06, 0x2a, 0x43, 0xe9, 0x13, 0x9b, 0x32,
	0xbe, 0x60, 0x75, 0x23, 0x2d, 0xce, 0x05, 0x25, 0x8a, 0x8e, 0xea, 0x26, 0xaa, 0x01, 0xf4, 0xd8,
	0x47, 0xc1, 0x43, 0x41, 0xa5, 0xac, 0xef, 0xa1, 0x2a, 0xd8, 0xe7, 0x7c, 0x1e, 0xcf, 0x68, 0xda,
	0xde, 0x47, 0x00, 0xd6, 0x5b, 0x12, 0xcd, 0xe8, 0xa8, 0x5e, 0xf0, 0x7b, 0xcb, 0x9f, 0xae, 0xb1,
	0x5c, 0xbb, 0xe6, 0xd5, 0xda, 0x35, 0x7f, 0xac, 0x5d, 0xf3, 0xdb, 0xc6, 0x35, 0xae, 0x36, 0xae,
	0x71, 0xbd, 0x71, 0x8d, 0xcf, 0xff, 0x70, 0xbe, 0xdf, 0xff, 0x90, 0x81, 0xa5, 0x9f, 0xa7, 0xfb,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x59, 0x5c, 0x43, 0x94, 0x57, 0x04, 0x00, 0x00,
}

func (m *Execution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Execution) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExecution(dAtA, i, uint64(m.Hash.Size()))
	n1, err := m.Hash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintExecution(dAtA, i, uint64(m.ParentHash.Size()))
	n2, err := m.ParentHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExecution(dAtA, i, uint64(m.EventHash.Size()))
	n3, err := m.EventHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.Status))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintExecution(dAtA, i, uint64(m.InstanceHash.Size()))
	n4, err := m.InstanceHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.TaskKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExecution(dAtA, i, uint64(len(m.TaskKey)))
		i += copy(dAtA[i:], m.TaskKey)
	}
	if m.Inputs != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.Inputs.Size()))
		n5, err := m.Inputs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Outputs != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExecution(dAtA, i, uint64(m.Outputs.Size()))
		n6, err := m.Outputs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintExecution(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintExecution(dAtA, i, uint64(m.WorkflowHash.Size()))
	n7, err := m.WorkflowHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.StepID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintExecution(dAtA, i, uint64(len(m.StepID)))
		i += copy(dAtA[i:], m.StepID)
	}
	return i, nil
}

func encodeVarintExecution(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Hash.Size()
	n += 1 + l + sovExecution(uint64(l))
	l = m.ParentHash.Size()
	n += 1 + l + sovExecution(uint64(l))
	l = m.EventHash.Size()
	n += 1 + l + sovExecution(uint64(l))
	if m.Status != 0 {
		n += 1 + sovExecution(uint64(m.Status))
	}
	l = m.InstanceHash.Size()
	n += 1 + l + sovExecution(uint64(l))
	l = len(m.TaskKey)
	if l > 0 {
		n += 1 + l + sovExecution(uint64(l))
	}
	if m.Inputs != nil {
		l = m.Inputs.Size()
		n += 1 + l + sovExecution(uint64(l))
	}
	if m.Outputs != nil {
		l = m.Outputs.Size()
		n += 1 + l + sovExecution(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovExecution(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovExecution(uint64(l))
		}
	}
	l = m.WorkflowHash.Size()
	n += 1 + l + sovExecution(uint64(l))
	l = len(m.StepID)
	if l > 0 {
		n += 1 + l + sovExecution(uint64(l))
	}
	return n
}

func sovExecution(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExecution(x uint64) (n int) {
	return sovExecution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Execution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Execution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Execution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ParentHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EventHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inputs == nil {
				m.Inputs = &_struct.Struct{}
			}
			if err := m.Inputs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = &_struct.Struct{}
			}
			if err := m.Outputs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WorkflowHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExecution
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExecution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecution
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExecution
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExecution
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExecution(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExecution
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExecution = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecution   = fmt.Errorf("proto: integer overflow")
)
