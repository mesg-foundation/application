// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execution.proto

package execution

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	types "github.com/mesg-foundation/engine/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status represents the status of a single execution.
// Note that a valid execution must have only one status
// flag at time.
type Status int32

const (
	// Unknown status represents any status unknown to execution.
	Status_Unknown Status = 0
	// Created is an initial status after execution creation.
	Status_Created Status = 1
	// InProgress informs that processing of execution has been started.
	Status_InProgress Status = 2
	// Completed is a success status after execution was processed.
	Status_Completed Status = 3
	// Failed is an error status after execution was processed.
	Status_Failed Status = 4
)

var Status_name = map[int32]string{
	0: "Unknown",
	1: "Created",
	2: "InProgress",
	3: "Completed",
	4: "Failed",
}

var Status_value = map[string]int32{
	"Unknown":    0,
	"Created":    1,
	"InProgress": 2,
	"Completed":  3,
	"Failed":     4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}

// Execution represents a single execution run in engine.
type Execution struct {
	// Hash is a unique hash to identify execution.
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash" hash:"-"`
	// parentHash is the unique hash of parent execution.
	// if execution is triggered by another one,
	// dependency execution considered as the parent.
	ParentHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=parentHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"parentHash" hash:"name:2"`
	// eventHash is unique event hash.
	EventHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,3,opt,name=eventHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"eventHash" hash:"name:3"`
	// Status is the current status of execution.
	Status Status `protobuf:"varint,4,opt,name=status,proto3,enum=mesg.types.Status" json:"status,omitempty" hash:"-"`
	// instanceHash is hash of the instance that can proceed an execution
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,5,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:5"`
	// taskKey is the key of the task of this execution.
	TaskKey string `protobuf:"bytes,6,opt,name=taskKey,proto3" json:"taskKey,omitempty" hash:"name:6"`
	// inputs data of the execution.
	Inputs *types.Struct `protobuf:"bytes,7,opt,name=inputs,proto3" json:"inputs,omitempty" hash:"name:7"`
	// outputs are the returned data of successful execution.
	Outputs *types.Struct `protobuf:"bytes,8,opt,name=outputs,proto3" json:"outputs,omitempty" hash:"-"`
	// error message of a failed execution.
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty" hash:"-"`
	// tags are optionally associated with execution by the user.
	Tags []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" hash:"name:10" validate:"dive,printascii"`
	// processHash is the unique hash of the process associated to this execution.
	ProcessHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,11,opt,name=processHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"processHash" hash:"name:11"`
	// node key of the process.
	NodeKey string `protobuf:"bytes,12,opt,name=nodeKey,proto3" json:"nodeKey,omitempty" hash:"name:12"`
	// runner that should execute this execution.
	ExecutorHash         github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,13,opt,name=executorHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"executorHash" hash:"name:13"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Execution.Unmarshal(m, b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return xxx_messageInfo_Execution.Size(m)
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mesg.types.Status", Status_name, Status_value)
	proto.RegisterType((*Execution)(nil), "mesg.types.Execution")
}

func init() { proto.RegisterFile("execution.proto", fileDescriptor_776e2c5022e94aef) }

var fileDescriptor_776e2c5022e94aef = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x5d, 0xb6, 0x2e, 0x59, 0x6e, 0xbb, 0x51, 0x2c, 0x21, 0x45, 0x43, 0x5a, 0x23, 0x3f, 0x15,
	0xb6, 0x26, 0xac, 0xd5, 0x00, 0x55, 0x42, 0x40, 0xc7, 0x10, 0x08, 0x21, 0xa1, 0x54, 0xbc, 0xf0,
	0xe6, 0x26, 0x5e, 0x6a, 0xad, 0xb5, 0x23, 0xdb, 0x29, 0xec, 0x8f, 0xf8, 0x94, 0x7d, 0x03, 0x0f,
	0x95, 0x40, 0xe2, 0x07, 0xf6, 0x05, 0x28, 0xce, 0xb2, 0xb5, 0x43, 0x42, 0x68, 0xea, 0x5b, 0x6e,
	0xce, 0x3d, 0xe7, 0x1e, 0x1f, 0xdf, 0x04, 0xee, 0xd1, 0x6f, 0x34, 0xce, 0x35, 0x13, 0x3c, 0xc8,
	0xa4, 0xd0, 0x02, 0xc1, 0x94, 0xaa, 0x34, 0xd0, 0xe7, 0x19, 0x55, 0xbb, 0x38, 0x15, 0xa9, 0x08,
	0xcd, 0xfb, 0x51, 0x7e, 0x1a, 0x16, 0x95, 0x29, 0xcc, 0x53, 0xd9, 0xbf, 0xfb, 0xf0, 0x1a, 0x36,
	0x9c, 0x50, 0x69, 0x99, 0xc7, 0xba, 0x04, 0xf1, 0x6f, 0x07, 0xdc, 0x93, 0x6a, 0x00, 0x1a, 0x42,
	0x6d, 0x4c, 0xd4, 0xd8, 0xb3, 0x7c, 0xab, 0xed, 0x0e, 0x5e, 0x5e, 0xcc, 0x5b, 0x6b, 0x3f, 0xe6,
	0xad, 0xfd, 0x94, 0xe9, 0x71, 0x3e, 0x0a, 0x62, 0x31, 0x0d, 0x8b, 0xd9, 0x9d, 0x53, 0x91, 0xf3,
	0x84, 0x14, 0x8c, 0x90, 0xf2, 0x94, 0x71, 0x1a, 0x16, 0xac, 0xe0, 0x1d, 0x51, 0xe3, 0xcb, 0x79,
	0x6b, 0xab, 0x28, 0xfa, 0xb8, 0x83, 0x23, 0x23, 0x86, 0x12, 0x80, 0x8c, 0x48, 0xca, 0x75, 0x81,
	0x7b, 0xeb, 0xbe, 0xd5, 0x6e, 0x0c, 0xde, 0xdc, 0x4d, 0x7a, 0xbb, 0x94, 0xe6, 0x64, 0x4a, 0xfb,
	0x5d, 0x1c, 0x2d, 0xe8, 0xa2, 0x11, 0xb8, 0x74, 0x56, 0x0d, 0xd9, 0x58, 0xd5, 0x90, 0x1e, 0x8e,
	0x6e, 0x64, 0xd1, 0x73, 0xb0, 0x95, 0x26, 0x3a, 0x57, 0x5e, 0xcd, 0xb7, 0xda, 0x3b, 0x5d, 0x14,
	0xdc, 0x5c, 0x45, 0x30, 0x34, 0xc8, 0xa0, 0xb1, 0x94, 0xc0, 0x55, 0x3f, 0x1a, 0x43, 0x83, 0x71,
	0xa5, 0x09, 0x8f, 0xa9, 0x31, 0xb8, 0xb9, 0x2a, 0x83, 0x47, 0x38, 0x5a, 0x52, 0x46, 0xfb, 0xe0,
	0x68, 0xa2, 0xce, 0x3e, 0xd0, 0x73, 0xcf, 0x36, 0xb7, 0x78, 0xff, 0x16, 0xe3, 0x29, 0x8e, 0xaa,
	0x0e, 0xf4, 0x0a, 0x6c, 0xc6, 0xb3, 0x5c, 0x2b, 0xcf, 0xf1, 0xad, 0x76, 0xbd, 0xfb, 0xa0, 0x3c,
	0x50, 0xb5, 0x30, 0xc1, 0xd0, 0xac, 0xca, 0x5f, 0x12, 0xcf, 0x70, 0x74, 0xc5, 0x43, 0x2f, 0xc0,
	0x11, 0xb9, 0x36, 0x12, 0x5b, 0xff, 0x92, 0x58, 0x8e, 0xa5, 0xe2, 0x20, 0x0c, 0x9b, 0x54, 0x4a,
	0x21, 0x3d, 0xd7, 0x78, 0x5d, 0xee, 0x2a, 0x21, 0xf4, 0x1a, 0x6a, 0x9a, 0xa4, 0xca, 0x03, 0x7f,
	0xa3, 0xed, 0x0e, 0x3a, 0x97, 0xf3, 0xd6, 0xa3, 0x05, 0x2f, 0x87, 0x4f, 0xb0, 0x3f, 0x23, 0x13,
	0x96, 0x10, 0x4d, 0xfb, 0x38, 0x61, 0x33, 0x7a, 0x90, 0x49, 0xc6, 0x35, 0x51, 0x31, 0x63, 0x38,
	0x32, 0x54, 0x94, 0x42, 0x3d, 0x93, 0x22, 0xa6, 0x4a, 0x99, 0xf4, 0xeb, 0x26, 0xfd, 0x93, 0xbb,
	0xa5, 0xbf, 0xb3, 0x38, 0xfc, 0x10, 0x47, 0x8b, 0xca, 0xe8, 0x00, 0x1c, 0x2e, 0x12, 0x5a, 0xa4,
	0xdf, 0x30, 0x27, 0x42, 0xb7, 0x19, 0x5d, 0x1c, 0x55, 0x2d, 0x88, 0x41, 0xa3, 0xfc, 0xb8, 0x85,
	0x34, 0xbe, 0xb6, 0x57, 0xe6, 0xab, 0x87, 0xa3, 0x25, 0xe9, 0xc7, 0x1f, 0xc1, 0x2e, 0x17, 0x14,
	0xd5, 0xc1, 0xf9, 0xcc, 0xcf, 0xb8, 0xf8, 0xca, 0x9b, 0x6b, 0x45, 0x71, 0x2c, 0x29, 0xd1, 0x34,
	0x69, 0x5a, 0x68, 0x07, 0xe0, 0x3d, 0xff, 0x24, 0x45, 0x2a, 0xa9, 0x52, 0xcd, 0x75, 0xb4, 0x0d,
	0xee, 0xb1, 0x98, 0x66, 0x13, 0x5a, 0xc0, 0x1b, 0x08, 0xc0, 0x7e, 0x4b, 0xd8, 0x84, 0x26, 0xcd,
	0xda, 0xe0, 0xe8, 0xe2, 0xe7, 0xde, 0xda, 0xf7, 0x5f, 0x7b, 0xd6, 0x97, 0xff, 0x70, 0x79, 0xfd,
	0x03, 0x1b, 0xd9, 0x66, 0x2d, 0x7a, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x35, 0xf3, 0x9a,
	0xd4, 0x04, 0x00, 0x00,
}

func (this *Execution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Execution)
	if !ok {
		that2, ok := that.(Execution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if !this.ParentHash.Equal(that1.ParentHash) {
		return false
	}
	if !this.EventHash.Equal(that1.EventHash) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.InstanceHash.Equal(that1.InstanceHash) {
		return false
	}
	if this.TaskKey != that1.TaskKey {
		return false
	}
	if !this.Inputs.Equal(that1.Inputs) {
		return false
	}
	if !this.Outputs.Equal(that1.Outputs) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.ProcessHash.Equal(that1.ProcessHash) {
		return false
	}
	if this.NodeKey != that1.NodeKey {
		return false
	}
	if !this.ExecutorHash.Equal(that1.ExecutorHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
