// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: execution.proto

package execution

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	types "github.com/mesg-foundation/engine/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status represents the status of a single execution.
// Note that a valid execution must have only one status
// flag at time.
type Status int32

const (
	// Unknown status represents any status unknown to execution.
	Status_Unknown Status = 0
	// Created is an initial status after execution creation.
	Status_Created Status = 1
	// InProgress informs that processing of execution has been started.
	Status_InProgress Status = 2
	// Completed is a success status after execution was processed.
	Status_Completed Status = 3
	// Failed is an error status after execution was processed.
	Status_Failed Status = 4
)

var Status_name = map[int32]string{
	0: "Unknown",
	1: "Created",
	2: "InProgress",
	3: "Completed",
	4: "Failed",
}

var Status_value = map[string]int32{
	"Unknown":    0,
	"Created":    1,
	"InProgress": 2,
	"Completed":  3,
	"Failed":     4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}

// Execution represents a single execution run in engine.
type Execution struct {
	// Hash is a unique hash to identify execution.
	// @hash: false
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash"`
	// parentHash is the unique hash of parent execution.
	// if execution is triggered by another one,
	// dependency execution considered as the parent.
	// @hash: true
	ParentHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=parentHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"parentHash"`
	// eventHash is unique event hash.
	// @hash: true
	EventHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,3,opt,name=eventHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"eventHash"`
	// Status is the current status of execution.
	// @hash: false
	Status Status `protobuf:"varint,4,opt,name=status,proto3,enum=mesg.types.Status" json:"status,omitempty"`
	// instanceHash is hash of the instance that can proceed an execution
	// @hash: true
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,5,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash"`
	// taskKey is the key of the task of this execution.
	// @hash: true
	TaskKey string `protobuf:"bytes,6,opt,name=taskKey,proto3" json:"taskKey,omitempty"`
	// inputs data of the execution.
	// @hash: true
	Inputs *types.Struct `protobuf:"bytes,7,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// outputs are the returned data of successful execution.
	// @hash: false
	Outputs *types.Struct `protobuf:"bytes,8,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// error message of a failed execution.
	// @hash: false
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	// tags are optionally associated with execution by the user.
	// @hash: true
	Tags []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" validate:"dive,printascii"`
	// processHash is the unique hash of the process associated to this execution.
	// @hash: true
	ProcessHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,11,opt,name=processHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"processHash"`
	// node key of the process.
	// @hash: true
	NodeKey string `protobuf:"bytes,12,opt,name=nodeKey,proto3" json:"nodeKey,omitempty"`
	// runner that should execute this execution.
	// @hash: true
	ExecutorHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,13,opt,name=executorHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"executorHash"`
	// price of running the exeuction.
	// @hash: true
	Price string `protobuf:"bytes,14,opt,name=price,proto3" json:"price,omitempty" validate:"coins"`
	// blockHeight where the execution was included into blockchain.
	// @hash: false
	BlockHeight          int64    `protobuf:"varint,15,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_776e2c5022e94aef, []int{0}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Execution.Unmarshal(m, b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return xxx_messageInfo_Execution.Size(m)
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mesg.types.Status", Status_name, Status_value)
	proto.RegisterType((*Execution)(nil), "mesg.types.Execution")
}

func init() { proto.RegisterFile("execution.proto", fileDescriptor_776e2c5022e94aef) }

var fileDescriptor_776e2c5022e94aef = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6a, 0xdb, 0x4c,
	0x10, 0x8e, 0x62, 0x47, 0xfe, 0x35, 0x76, 0x1c, 0xb3, 0xe4, 0x07, 0xe1, 0x82, 0x2d, 0x7c, 0x12,
	0x6e, 0x23, 0x81, 0x43, 0x2f, 0x3d, 0x3a, 0xb4, 0x4d, 0x29, 0x85, 0x56, 0x26, 0x14, 0x7a, 0x5b,
	0x4b, 0x13, 0x79, 0xb1, 0xbd, 0x2b, 0x76, 0x57, 0x6e, 0xf3, 0x46, 0x7d, 0x94, 0x3c, 0x43, 0xa1,
	0x86, 0xf6, 0x11, 0xf2, 0x04, 0x65, 0x57, 0x76, 0xec, 0x5e, 0x4a, 0x71, 0x6f, 0xfa, 0x66, 0xbe,
	0xf9, 0x66, 0xf6, 0x9b, 0xd5, 0xc2, 0x19, 0x7e, 0xc1, 0xb4, 0xd4, 0x4c, 0xf0, 0xa8, 0x90, 0x42,
	0x0b, 0x02, 0x4b, 0x54, 0x79, 0xa4, 0xef, 0x0a, 0x54, 0xdd, 0x41, 0x2e, 0x72, 0x11, 0xdb, 0xf8,
	0xb4, 0xbc, 0x8d, 0x0d, 0xb2, 0xc0, 0x7e, 0x55, 0xfc, 0xee, 0x93, 0xc7, 0xb4, 0xad, 0x89, 0x95,
	0x96, 0x65, 0xaa, 0xab, 0xe4, 0xe0, 0xbb, 0x0b, 0xde, 0xcb, 0x6d, 0x03, 0xf2, 0x1a, 0xea, 0x33,
	0xaa, 0x66, 0xbe, 0x13, 0x38, 0x61, 0x6b, 0x7c, 0x79, 0xbf, 0xee, 0x1f, 0x7d, 0x5b, 0xf7, 0x9f,
	0xe6, 0x4c, 0xcf, 0xca, 0x69, 0x94, 0x8a, 0x65, 0x6c, 0x7a, 0x5f, 0xdc, 0x8a, 0x92, 0x67, 0xd4,
	0x54, 0xc4, 0xc8, 0x73, 0xc6, 0x31, 0x36, 0x55, 0xd1, 0x35, 0x55, 0xb3, 0xc4, 0x0a, 0x90, 0x09,
	0x40, 0x41, 0x25, 0x72, 0x6d, 0x62, 0xfe, 0xf1, 0xe1, 0x72, 0x7b, 0x32, 0xe4, 0x03, 0x78, 0xb8,
	0xda, 0x6a, 0xd6, 0x0e, 0xd7, 0xdc, 0xa9, 0x90, 0x21, 0xb8, 0x4a, 0x53, 0x5d, 0x2a, 0xbf, 0x1e,
	0x38, 0x61, 0x7b, 0x44, 0xa2, 0x9d, 0xb9, 0xd1, 0xc4, 0x66, 0x92, 0x0d, 0x83, 0x7c, 0x84, 0x16,
	0xe3, 0x4a, 0x53, 0x9e, 0xa2, 0x9d, 0xe0, 0xe4, 0xf0, 0x09, 0x7e, 0x13, 0x22, 0x3e, 0x34, 0x34,
	0x55, 0xf3, 0xb7, 0x78, 0xe7, 0xbb, 0x81, 0x13, 0x7a, 0xc9, 0x16, 0x92, 0x0b, 0x70, 0x19, 0x2f,
	0x4a, 0xad, 0xfc, 0x46, 0xe0, 0x84, 0xcd, 0xd1, 0xff, 0xd5, 0x78, 0xdb, 0x85, 0x46, 0x13, 0xbb,
	0xca, 0x64, 0x43, 0x22, 0x31, 0x34, 0x44, 0xa9, 0x2d, 0xff, 0xbf, 0x3f, 0xf1, 0xb7, 0x2c, 0x72,
	0x0e, 0x27, 0x28, 0xa5, 0x90, 0xbe, 0x67, 0xfb, 0x56, 0x80, 0x8c, 0xa0, 0xae, 0x69, 0xae, 0x7c,
	0x08, 0x6a, 0xa1, 0x37, 0xee, 0x3d, 0xac, 0xfb, 0xdd, 0x15, 0x5d, 0xb0, 0x8c, 0x6a, 0x7c, 0x31,
	0xc8, 0xd8, 0x0a, 0x9f, 0x15, 0x92, 0x71, 0x4d, 0x55, 0xca, 0xd8, 0x20, 0xb1, 0x5c, 0x72, 0x03,
	0xcd, 0x42, 0x8a, 0x14, 0x95, 0xb2, 0xde, 0x34, 0x0f, 0xf7, 0x66, 0x5f, 0xc7, 0x58, 0xc3, 0x45,
	0x86, 0xc6, 0x9a, 0x56, 0x65, 0xcd, 0x06, 0x9a, 0x6d, 0x54, 0x3f, 0x86, 0x90, 0xb6, 0xe3, 0xe9,
	0x3f, 0x6c, 0x63, 0x5f, 0x88, 0x0c, 0xe1, 0xa4, 0x90, 0x2c, 0x45, 0xbf, 0x6d, 0x1a, 0x8e, 0xcf,
	0x1f, 0xd6, 0xfd, 0xce, 0xee, 0xf8, 0xa9, 0x60, 0x5c, 0x0d, 0x92, 0x8a, 0x42, 0x02, 0x68, 0x4e,
	0x17, 0x22, 0x9d, 0x5f, 0x23, 0xcb, 0x67, 0xda, 0x3f, 0x0b, 0x9c, 0xb0, 0x96, 0xec, 0x87, 0x86,
	0xef, 0xc0, 0xad, 0xae, 0x11, 0x69, 0x42, 0xe3, 0x86, 0xcf, 0xb9, 0xf8, 0xcc, 0x3b, 0x47, 0x06,
	0x5c, 0x49, 0xa4, 0x1a, 0xb3, 0x8e, 0x43, 0xda, 0x00, 0x6f, 0xf8, 0x7b, 0x29, 0x72, 0x89, 0x4a,
	0x75, 0x8e, 0xc9, 0x29, 0x78, 0x57, 0x62, 0x59, 0x2c, 0xd0, 0xa4, 0x6b, 0x04, 0xc0, 0x7d, 0x45,
	0xd9, 0x02, 0xb3, 0x4e, 0x7d, 0xfc, 0xfc, 0xfe, 0x47, 0xef, 0xe8, 0xeb, 0xcf, 0x9e, 0xf3, 0xe9,
	0x2f, 0x4e, 0xf8, 0xf8, 0x70, 0x4c, 0x5d, 0x7b, 0x03, 0x2e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x45, 0x20, 0xa1, 0x7b, 0x4c, 0x04, 0x00, 0x00,
}

func (this *Execution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Execution)
	if !ok {
		that2, ok := that.(Execution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if !this.ParentHash.Equal(that1.ParentHash) {
		return false
	}
	if !this.EventHash.Equal(that1.EventHash) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.InstanceHash.Equal(that1.InstanceHash) {
		return false
	}
	if this.TaskKey != that1.TaskKey {
		return false
	}
	if !this.Inputs.Equal(that1.Inputs) {
		return false
	}
	if !this.Outputs.Equal(that1.Outputs) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.ProcessHash.Equal(that1.ProcessHash) {
		return false
	}
	if this.NodeKey != that1.NodeKey {
		return false
	}
	if !this.ExecutorHash.Equal(that1.ExecutorHash) {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
