#!/bin/bash

set -e

DIR=$(pwd)

# mesg config variables
MESG_NAME=${MESG_NAME:-engine}
MESG_PATH=${MESG_PATH:-$HOME/.mesg}
MESG_LOG_FORMAT=${MESG_LOG_FORMAT:-text}
MESG_LOG_FORCECOLORS=${MESG_LOG_FORCECOLORS:-false}
MESG_LOG_LEVEL=${MESG_LOG_LEVEL:-debug}

VERSION=local
LDFLAGS="-X 'github.com/mesg-foundation/engine/version.Version=$VERSION'"
LDFLAGS+=" -X 'github.com/mesg-foundation/engine/config.EnvMarketplaceEndpoint=https://ropsten.infura.io/v3/6115ae2531f64c04a9a392cf500e5fbe'"
LDFLAGS+=" -X 'github.com/mesg-foundation/engine/config.EnvMarketplaceAddress=0xeCC1A867F871323350A1A89FcAf69629a2d5085e'"
LDFLAGS+=" -X 'github.com/mesg-foundation/engine/config.EnvMarketplaceToken=0x5861b3dc52339d4f976b7fa5d80db6cd6f477f1b'"

MESG_SERVER_PORT=${MESG_SERVER_PORT:-50052}

# if set to true the docker with system services will be started.
MESG_SERVICE_SERVER_ON=${MESG_SERVICE_SERVER_ON:-true}
MESG_SERVICE_SERVER="engine-service-server"


networkExists=$(docker network list -f name=engine -f driver=overlay -q)
if [ "$networkExists" == "" ]; then
  docker network create --driver overlay engine --label com.docker.stack.namespace=engine
fi

function deleteServiceServer {
  rm -rf tmp-systemservices
  if [ "$MESG_SERVICE_SERVER_ON" = true ]; then
    if docker service list | grep -q engine-service-server; then
      docker service rm $MESG_SERVICE_SERVER
    fi
  fi
}

deleteServiceServer
mkdir -p tmp-systemservices
for i in systemservices/* ; do
  if [ -d "$i" ]; then
    echo "Creating archive for $i..."
    cd $i
    file=$(basename "$i")
    tar -czf ../../tmp-systemservices/$file.tar.gz --exclude-from=.dockerignore .
    varname="$(tr '[:lower:]' '[:upper:]' <<< ${file:0:1})${file:1}"
    LDFLAGS+=" -X 'github.com/mesg-foundation/engine/config.${varname}URL=http://$MESG_SERVICE_SERVER/$file.tar.gz'"
    cd ../..
  fi
done
echo "FROM nginx:alpine" >> tmp-systemservices/Dockerfile
echo "COPY . /usr/share/nginx/html" >> tmp-systemservices/Dockerfile

if [ "$MESG_SERVICE_SERVER_ON" = true ]; then
  echo "set up system services server"
  docker build tmp-systemservices -t $MESG_SERVICE_SERVER

  docker service create -d \
    -p 8080:8080 \
    --name $MESG_SERVICE_SERVER \
    --network engine \
    $MESG_SERVICE_SERVER
fi

echo "compile engine"
GOOS=linux GOARCH=amd64 go build -o ./bin/engine -ldflags="$LDFLAGS" core/main.go

ENGINE_SUM_PATH="./bin/.engine.sum"
touch "$ENGINE_SUM_PATH"

DOCKER_SUM_PATH="./bin/.Dockerfile.dev.sum"
touch "$DOCKER_SUM_PATH"

# check if engine bin was cached
ENGINE_SUM="$(openssl md5 ./bin/engine)"
ENGINE_SUM_PREV="$(cat $ENGINE_SUM_PATH)"
if [[ "$ENGINE_SUM" == "$ENGINE_SUM_PREV" ]]; then
  BINCACHED=true
else
  echo "$ENGINE_SUM" > "$ENGINE_SUM_PATH"
fi

# check if dockerfile was cached
DOCKER_SUM="$(openssl md5 ./Dockerfile.dev)"
DOCKER_SUM_PREV="$(cat $DOCKER_SUM_PATH)"
if [[ "$DOCKER_SUM" == "$DOCKER_SUM_PREV" ]]; then
  DOCKERCACHED=true
else
  echo "$DOCKER_SUM" > "$DOCKER_SUM_PATH"
fi

# create mesg data folder on host machine
mkdir -p $MESG_PATH

if [[ ! $BINCACHED ]] || [[ ! $DOCKERCACHED ]]; then
  echo "build mesg/engine image"
  docker build -f Dockerfile.dev -t "mesg/engine:$VERSION" .
fi

# docker service rm engine

trap onexit EXIT INT

function onexit {
  deleteServiceServer
  docker service rm $MESG_NAME
}

docker service create \
  --name $MESG_NAME \
  --tty \
  --label com.docker.stack.namespace=engine --label com.docker.stack.image=mesg/engine:$VERSION \
  --env MESG_NAME=$MESG_NAME \
  --env MESG_LOG_FORMAT=$MESG_LOG_FORMAT \
  --env MESG_LOG_FORCECOLORS=$MESG_LOG_FORCECOLORS \
  --env MESG_LOG_LEVEL=$MESG_LOG_LEVEL \
  --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock --mount type=bind,source=$MESG_PATH,destination=/root/.mesg \
  --network engine --publish $MESG_SERVER_PORT:50052 \
  mesg/engine:$VERSION

docker service logs --follow --raw $MESG_NAME
