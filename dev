#!/bin/bash

set -e

# mesg config variables
MESG_NAME=${MESG_NAME:-"engine"}
MESG_PATH=${MESG_PATH:-"$HOME/.mesg"}
MESG_LOG_FORMAT=${MESG_LOG_FORMAT:-"text"}
MESG_LOG_FORCECOLORS=${MESG_LOG_FORCECOLORS:-"false"}
MESG_LOG_LEVEL=${MESG_LOG_LEVEL:-"debug"}
MESG_SERVER_PORT=${MESG_SERVER_PORT:-"50052"}

 # network to connect multiple engine instances
TENDERMINT_NETWORK="mesg-tendermint"
TENDERMINT_HOME_CONFIG="$MESG_PATH/tendermint"
TENDERMINT_NETWORK_ALIAS=${TENDERMINT_NETWORK_ALIAS:-$MESG_NAME}
TENDERMINT_VALIDATOR_NAME=${TENDERMINT_VALIDATOR_NAME:-"validator"}
TENDERMINT_VALIDATOR_PORT=${TENDERMINT_VALIDATOR_PORT:-"26656"}
TENDERMINT_VALIDATOR_PATH=${TENDERMINT_VALIDATOR_PATH:-".tendermint-validator"}

MESG_COSMOS_HOME_CONFIG="$MESG_PATH/cosmos"
MESG_COSMOS_CHAINID=${MESG_COSMOS_CHAINID:-"mesg-chain"}
MESG_COSMOS_KEYBASE_PATH=${MESG_COSMOS_KEYBASE_PATH:-".cosmos-keybase"}
MESG_COSMOS_GENESISTIME=${MESG_COSMOS_GENESISTIME:-"2019-01-01T00:00:00Z"}

eval $(go run internal/tools/genconfig/main.go --co-kbpath $MESG_COSMOS_KEYBASE_PATH --tm-path $TENDERMINT_VALIDATOR_PATH)

# Setup the validator private keys
if [[ $* == *--validator* ]]; then
  echo "Validator flag passed. Copy validator private keys to $TENDERMINT_HOME_CONFIG"
  mkdir -p $TENDERMINT_HOME_CONFIG
  rsync -a $TENDERMINT_VALIDATOR_PATH/$MESG_COSMOS_ACCOUNT_NAME/ $TENDERMINT_HOME_CONFIG
  TENDERMINT_NETWORK_ALIAS=$TENDERMINT_VALIDATOR_NAME
  TENDERMINT_VALIDATOR_PORT_PUBLISH="--publish $TENDERMINT_VALIDATOR_PORT:$TENDERMINT_VALIDATOR_PORT"
fi

if [[ $* == *--genesis_validator ]]; then
  echo "Genesis validator flag passed. Copy genesis account private keys to $MESG_COSMOS_HOME_CONFIG"
  mkdir -p $MESG_COSMOS_HOME_CONFIG
  rsync -a $MESG_COSMOS_KEYBASE_PATH/ $MESG_COSMOS_HOME_CONFIG
fi

VERSION=local
LDFLAGS="-X 'github.com/mesg-foundation/engine/version.Version=$VERSION'"

function onexit {
  set +e
  echo -e "\nshutting down, please wait..."
  docker_service_remove "$MESG_NAME"
  docker_network_remove "$MESG_NAME"
  docker_network_remove "$TENDERMINT_NETWORK"
}

function docker_service_remove {
  docker service rm $1
  docker wait $(docker ps -f label=com.docker.swarm.service.name=$1 -q) 2> /dev/null
}

function docker_network_exist {
  [[ ! -z $(docker network list -f name="$1" -f driver=overlay -q) ]]
}

function docker_network_create {
  echo -ne "create docker network $1: "
  docker network create --driver overlay "$1" --label com.docker.stack.namespace="$1"
}

function docker_network_remove {
  echo -ne "remove docker network: "
  docker network remove "$1"
}

echo "compile engine"
GOOS=linux GOARCH=amd64 go build -o ./bin/engine -ldflags="$LDFLAGS" core/main.go

ENGINE_SUM_PATH="./bin/.engine.sum"
touch "$ENGINE_SUM_PATH"

DOCKER_SUM_PATH="./bin/.Dockerfile.dev.sum"
touch "$DOCKER_SUM_PATH"

# check if engine bin was cached
ENGINE_SUM="$(openssl md5 ./bin/engine)"
ENGINE_SUM_PREV="$(cat $ENGINE_SUM_PATH)"
if [[ "$ENGINE_SUM" == "$ENGINE_SUM_PREV" ]]; then
  BINCACHED=true
else
  echo "$ENGINE_SUM" > "$ENGINE_SUM_PATH"
fi

# check if dockerfile was cached
DOCKER_SUM="$(openssl md5 ./Dockerfile.dev)"
DOCKER_SUM_PREV="$(cat $DOCKER_SUM_PATH)"
if [[ "$DOCKER_SUM" == "$DOCKER_SUM_PREV" ]]; then
  DOCKERCACHED=true
else
  echo "$DOCKER_SUM" > "$DOCKER_SUM_PATH"
fi

# create mesg data folder on host machine
mkdir -p $MESG_PATH

if [[ ! $BINCACHED ]] || [[ ! $DOCKERCACHED ]]; then
  echo "build mesg/engine image"
  docker build -f Dockerfile.dev -t "mesg/engine:$VERSION" .
fi


trap onexit EXIT

if ! docker_network_exist "$MESG_NAME"; then
  docker_network_create "$MESG_NAME"
fi

if ! docker_network_exist "$TENDERMINT_NETWORK"; then
  docker_network_create "$TENDERMINT_NETWORK"
fi



echo "create docker service: "
docker service create \
  --name $MESG_NAME \
  --tty \
  --label com.docker.stack.namespace=$MESG_NAME \
  --label com.docker.stack.image=mesg/engine:$VERSION \
  --env MESG_NAME=$MESG_NAME \
  --env MESG_LOG_FORMAT=$MESG_LOG_FORMAT \
  --env MESG_LOG_FORCECOLORS=$MESG_LOG_FORCECOLORS \
  --env MESG_LOG_LEVEL=$MESG_LOG_LEVEL \
  --env MESG_TENDERMINT_P2P_PERSISTENTPEERS=$MESG_TENDERMINT_P2P_PERSISTENTPEERS \
  --env MESG_TENDERMINT_P2P_EXTERNALADDRESS=$MESG_TENDERMINT_P2P_EXTERNALADDRESS \
  --env MESG_COSMOS_CHAINID=$MESG_COSMOS_CHAINID \
  --env MESG_COSMOS_GENESISVALIDATORTX=$MESG_COSMOS_GENESISVALIDATORTX \
  --env MESG_COSMOS_GENESISTIME=$MESG_COSMOS_GENESISTIME \
  --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
  --mount type=bind,source=$MESG_PATH,destination=/root/.mesg \
  --network $MESG_NAME \
  --network name=$TENDERMINT_NETWORK,alias=$TENDERMINT_NETWORK_ALIAS \
  --publish $MESG_SERVER_PORT:50052 \
  $TENDERMINT_VALIDATOR_PORT_PUBLISH \
  mesg/engine:$VERSION ./engine $EXPERIMENTAL_FLAGS

docker service logs --follow --raw $MESG_NAME
