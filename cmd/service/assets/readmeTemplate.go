// Code generated by go-bindata.
// sources:
// cmd/service/assets/readmeTemplate.md
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdServiceAssetsReadmetemplateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6e\xa3\x30\x10\x86\xef\x7e\x8a\x91\xc8\xc9\x5a\x78\x80\x48\x7b\xd8\x6d\x73\x88\x5a\x95\x2a\x4d\x0f\x39\x81\x1b\xa6\x29\xa2\x01\x04\x4e\x24\x64\xfc\xee\xd5\xd8\xa6\xe0\x94\xf4\x94\x0b\xcc\xfc\x33\xe3\xf9\xfd\x41\x00\x4a\x45\x4f\xe2\x88\x5a\x33\xa6\x54\x74\x8f\xed\xbe\xc9\x6b\x99\x57\x25\x29\x69\x9a\xbe\x89\xf6\x83\x1d\xb1\x3d\x84\xfb\xaa\x41\x68\xb1\x39\xe7\x7b\x84\x0c\xeb\xcf\xaa\x83\x24\xd9\xac\x9e\x1f\xff\xdd\xad\x92\xff\xbb\x64\x17\xbf\x6e\x28\x8f\x5f\xd6\xdb\x78\xb3\x4b\x12\x9a\xa7\x63\xf3\x77\x88\x56\x67\x2c\x65\xab\x35\x0b\x02\xb0\x31\x53\xaa\x11\xe5\x01\x61\x51\x60\xf7\x07\x16\x48\x2a\x2c\xff\x7a\xbd\x64\x90\xea\xe4\xc6\xc8\x50\x60\xb7\x04\xce\x07\x99\x73\xda\x60\x87\x2f\xed\x9b\xcd\x43\x49\x48\xa1\x75\x0f\x9c\x17\xd8\x71\x0e\x14\xc9\xae\x46\x17\x66\xe3\x24\x29\xac\x87\x30\x0c\xc1\x7b\x8e\x7e\x33\x21\xc5\x83\xf1\x4c\x11\x59\xfe\xb1\x44\xa9\xa1\x8b\x2c\x42\x0f\xa9\x53\xa2\x6d\x57\xa3\xd6\x29\xf4\x30\x28\x9e\x6b\xb3\x07\xcb\x4c\xeb\xd9\x97\xa3\xb9\x15\x6d\xe1\x60\x9a\xf0\x92\xa5\x14\x6d\x61\x50\x8e\x8d\x53\x92\xa4\x5e\x01\x49\x93\xf3\x1c\x4d\x65\x5d\xd6\x27\xfa\x34\x01\x1d\x68\x13\xc6\x6e\x43\x35\xa7\xd3\x2c\x56\x13\x1a\xae\xde\x52\x07\x76\x68\x9c\x90\x35\x92\x8f\xd6\x4a\xbf\xb3\xf5\xae\x16\x9f\xe4\xe4\x6e\x2e\x63\xa3\xbf\xca\x28\xd6\xa0\x8d\x47\x87\xde\xac\x21\xfd\xdd\x4d\x5b\x6c\x79\x42\x7c\x52\x75\xdc\xad\x72\x49\xfe\x36\x64\xaf\x38\x1f\x56\x4e\x7f\x5a\xcf\x98\x83\xeb\xfa\x3c\xba\x73\x76\x47\xbc\x33\x98\xbd\xfc\x2b\x00\x00\xff\xff\x5e\x54\xa5\x0e\x77\x04\x00\x00")

func cmdServiceAssetsReadmetemplateMdBytes() ([]byte, error) {
	return bindataRead(
		_cmdServiceAssetsReadmetemplateMd,
		"cmd/service/assets/readmeTemplate.md",
	)
}

func cmdServiceAssetsReadmetemplateMd() (*asset, error) {
	bytes, err := cmdServiceAssetsReadmetemplateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/service/assets/readmeTemplate.md", size: 1143, mode: os.FileMode(420), modTime: time.Unix(1530265128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/service/assets/readmeTemplate.md": cmdServiceAssetsReadmetemplateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readmeTemplate.md": &bintree{cmdServiceAssetsReadmetemplateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

