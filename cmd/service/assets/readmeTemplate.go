// Code generated by go-bindata.
// sources:
// cmd/service/assets/readmeTemplate.md
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdServiceAssetsReadmetemplateMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x6e\xa3\x30\x10\xc6\xef\x7e\x8a\x91\xc8\xc9\x5a\x78\x80\x48\x7b\xdb\x3d\xac\x56\x6a\xa5\x2a\x0f\x60\x37\x4c\x53\x44\x03\x08\x3b\x91\x2c\xe3\x77\xaf\xc6\x36\xb5\x9d\x92\x9e\x72\x81\xf1\x37\xff\x3e\xff\xa0\x02\x6b\x9b\x27\x79\x46\xe7\x18\xb3\xb6\xf9\x83\xea\x38\x77\x93\xee\xc6\x21\x28\xdd\x1b\x34\x2f\x38\x8d\xaa\xd3\xe3\x6c\x9c\x13\x42\xbc\x4a\xf5\xce\xce\xa8\x4e\xf5\x71\x9c\x11\x14\xce\xd7\xee\x88\xd0\xe2\xf4\x31\x1a\x9a\x97\xd7\x33\x21\x84\xb5\x38\xb4\x69\xdc\xdf\x2b\x0e\x5a\x39\xc7\xaa\x0a\x42\xcc\xac\x9d\xe5\x70\x42\xd8\xf5\x68\x7e\xc1\x0e\x49\x85\xfd\xef\xa2\x96\xac\x52\x9e\x06\x79\x19\x7a\x34\x7b\xe0\x7c\x95\x39\xa7\x0d\xa1\x79\xf3\x22\x6b\x4a\x6a\xe9\xdc\x02\x9c\xf7\x68\x38\x07\x8a\xb4\x99\x30\x86\x6d\xea\x24\x85\x2d\x50\xd7\x35\x14\xcf\xe4\xb7\x95\x5a\xfe\xf7\x9e\x29\x22\xcb\xdf\x96\x58\xbb\x56\x91\x45\x58\x40\x44\xa5\x39\x98\x09\x9d\x13\xb0\xc0\xaa\x14\xae\xfd\x1e\x4f\x6e\xf3\x15\x69\x1e\xa4\xea\x23\x4c\x1f\xde\xb2\xd4\x52\xf5\x1e\x65\x2a\xcc\x49\x92\x7a\x07\x24\x75\x6e\x73\xf4\x99\x7f\xc3\x74\xa1\x4f\x53\xd1\xc0\x70\x60\xec\x31\x54\x3b\x9a\x16\xb0\xfa\xd0\x73\x2d\x96\x46\xb0\x6b\x61\x46\xd6\x4b\x25\xda\x20\xfd\xcc\xb6\xb8\xda\xf3\x45\x67\x77\x8b\x27\x96\xfc\x8d\x5e\x09\x06\x43\x9c\x1c\x16\xbd\x9e\xf4\x57\x35\x6d\x09\xe9\x8c\x78\x96\x8d\xdc\x83\x72\x4b\xfe\x31\x64\xef\x38\x5f\x57\xe6\x3f\x6d\x61\x2c\xc2\x8d\x75\x05\xdd\x2d\xbb\x09\xef\x06\xe6\xe2\xfc\x19\x00\x00\xff\xff\xbf\xdd\x2d\x63\x81\x04\x00\x00")

func cmdServiceAssetsReadmetemplateMdBytes() ([]byte, error) {
	return bindataRead(
		_cmdServiceAssetsReadmetemplateMd,
		"cmd/service/assets/readmeTemplate.md",
	)
}

func cmdServiceAssetsReadmetemplateMd() (*asset, error) {
	bytes, err := cmdServiceAssetsReadmetemplateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/service/assets/readmeTemplate.md", size: 1153, mode: os.FileMode(420), modTime: time.Unix(1530266655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/service/assets/readmeTemplate.md": cmdServiceAssetsReadmetemplateMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"readmeTemplate.md": &bintree{cmdServiceAssetsReadmetemplateMd, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

