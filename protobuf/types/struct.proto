// Fork of https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

import "gogo/protobuf/gogoproto/gogo.proto";

package mesg.protobuf;
option go_package = "github.com/mesg-foundation/engine/protobuf/types";

option (gogoproto.equal_all) = true;

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
message Value {
  // `Null` is a singleton enumeration to represent the null value for the
  // `Value` type union.
  //
  //  The JSON representation for `Null` is JSON `null`.
  enum Null {
    // Null value.
    NULL_VALUE = 0;
  }

  // `List` is a wrapper around a repeated field of values.
  //
  // The JSON representation for `List` is JSON array.
  message List {
    // Repeated field of dynamically typed values.
    repeated Value values = 1 [
      (gogoproto.moretags) = 'hash:"name:1"'
    ];
  }

  // The kind of value.
  oneof kind {
    // Represents a null value.
    Null null_value = 1 [
      (gogoproto.moretags) = 'hash:"name:1"'
    ];
    // Represents a double value.
    double number_value = 2 [
      (gogoproto.moretags) = 'hash:"name:2"'
    ];
    // Represents a string value.
    string string_value = 3 [
      (gogoproto.moretags) = 'hash:"name:3"'
    ];
    // Represents a boolean value.
    bool bool_value = 4 [
      (gogoproto.moretags) = 'hash:"name:4"'
    ];
    // Represents a repeated `Value`.
    List list_value = 6 [
      (gogoproto.moretags) = 'hash:"name:6"'
    ];
  }
}
