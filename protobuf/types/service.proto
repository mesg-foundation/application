syntax = "proto3";

package types;
option go_package = "github.com/mesg-foundation/engine/protobuf/types";

// Service represents the service's type.
message Service {
  // Events are emitted by the service whenever the service wants.
  message Event {
    string key = 4;                   // Event's key.
    string name = 1;                  // Event's name.
    string description = 2;           // Event's description.
    repeated Parameter data = 3;      // List of data of this event.
  }

  // Task is a function that requires inputs and returns output.
  message Task {
    string key = 8;                     // Task's key.
    string name = 1;                    // Task's name.
    string description = 2;             // Task's description.
    repeated Parameter inputs = 6;      // List inputs of this task.
    repeated Parameter outputs = 7;     // List of tasks outputs.
  }

  // Parameter describes the task's inputs, the task's outputs, and the event's data.
  message Parameter {
    string key = 8;         // Parameter's key.
    string name = 1;        // Parameter's name.
    string description = 2; // Parameter's description.
    string type = 3;        // Parameter's type: `String`, `Number`, `Boolean`, `Object` or `Any`.
    bool optional = 4;      // Set the parameter as optional.
    bool repeated = 9;      // Mark a parameter as an array of the defined type
    repeated Parameter object = 10; // Optional object structure type when type is set to `Object`
  }

  // A configuration is the configuration of the main container of the service's instance.
  message Configuration {
    repeated string volumes = 1;      // List of volumes.
    repeated string volumesFrom = 2;  // List of volumes mounted from other dependencies.
    repeated string ports = 3;        // List of ports the container exposes.
    repeated string args = 4;         // Args to pass to the container.
    string command = 5;               // Command to run the container.
    repeated string env = 6;          // Default env vars to apply to service's instance on runtime.
  }

  // A dependency is a configuration of an other container that runs separately from the service.
  message Dependency {
    string key = 8;                   // Dependency's key.
    string image = 1;                 // Image's name of the container.
    repeated string volumes = 2;      // List of volumes.
    repeated string volumesFrom = 3;  // List of volumes mounted from other dependencies.
    repeated string ports = 4;        // List of ports the container exposes.
    repeated string args = 6;         // Args to pass to the container.
    string command = 5;               // Command to run the container.
    repeated string env = 9;          // Default env vars to apply to dependency on runtime.
  }

  // A workflow is a configuration to trigger a specific task when certains conditions of a trigger are valid.
  message Workflow {

    // Trigger is the configuration that will trigger a workflow.
    message Trigger {

      // Type of trigger available. Event to react to an event. Result to react to a result of an execution.
      enum Type {
        Unknown = 0;  // Event type not defined.
        Event = 1;    // React to event.
        Result = 2;   // React to result of an execution.
      }

      // Filter is applied on the data of the event/result.
      message Filter {

        // Type of condition available to compare the values.
        enum Predicate {
          Unknown = 0;  // Predicate not defined.
          EQ = 1;       // Equal
        }

        string key = 1;           // Key to check.
        Predicate predicate = 2;  // Type of condition to apply.
        string value = 3;         // Value of the filter
      }

      Type type = 1;         // Type of trigger.
      string instanceHash = 2;      // Hash of the instance that triggers the workflow.
      string key = 3;               // Key that triggers the workflow (event key or task key).
      repeated Filter filters = 4;  // List of filters to apply on the data of the event/result.
    }

    // Definition of the task to execute when the workflow is triggered.
    message Task {
      string instanceHash = 1;  // Hash of the instance to execute.
      string taskKey = 2;       // Task of the instance to execute.
    }

    string hash = 4;          // Workflow's hash    
    string key = 3;           // Workflow's key
    Trigger trigger = 1;      // Trigger for the workflow.
    repeated Task tasks = 2;  // Task to execute when the trigger is valid.
  }

  string hash = 10;                         // Service's hash.
  string sid = 12;                          // Service's sid.
  string name = 1;                          // Service's name.
  string description = 2;                   // Service's description.
  Configuration configuration = 8;          // Configurations related to the service
  repeated Task tasks = 5;                  // The list of tasks this service can execute.
  repeated Event events = 6;                // The list of events this service can emit.
  repeated Dependency dependencies = 7;     // The container dependencies this service requires.
  string repository = 9;                    // Service's repository url.
  string source = 13;                       // The hash id of service's source code on IPFS.
  repeated Workflow workflows = 14;         // List of workflows defined by this service.
}
