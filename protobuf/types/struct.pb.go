// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/types/struct.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
type NullValue int32

const (
	// Null value.
	NullValue_NULL_VALUE NullValue = 0
)

var NullValue_name = map[int32]string{
	0: "NULL_VALUE",
}

var NullValue_value = map[string]int32{
	"NULL_VALUE": 0,
}

func (x NullValue) String() string {
	return proto.EnumName(NullValue_name, int32(x))
}

func (NullValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84428fcddb6debf8, []int{0}
}

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
type Struct struct {
	// Unordered map of dynamically typed values.
	// @hash: true
	Fields               map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Struct) Reset()         { *m = Struct{} }
func (m *Struct) String() string { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()    {}
func (*Struct) Descriptor() ([]byte, []int) {
	return fileDescriptor_84428fcddb6debf8, []int{0}
}
func (m *Struct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Struct.Unmarshal(m, b)
}
func (m *Struct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Struct.Marshal(b, m, deterministic)
}
func (m *Struct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Struct.Merge(m, src)
}
func (m *Struct) XXX_Size() int {
	return xxx_messageInfo_Struct.Size(m)
}
func (m *Struct) XXX_DiscardUnknown() {
	xxx_messageInfo_Struct.DiscardUnknown(m)
}

var xxx_messageInfo_Struct proto.InternalMessageInfo

func (m *Struct) GetFields() map[string]*Value {
	if m != nil {
		return m.Fields
	}
	return nil
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
type Value struct {
	// The kind of value.
	//
	// Types that are valid to be assigned to Kind:
	//	*Value_NullValue
	//	*Value_NumberValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_ListValue
	Kind                 isValue_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_84428fcddb6debf8, []int{1}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

type isValue_Kind interface {
	isValue_Kind()
	Equal(interface{}) bool
}

type Value_NullValue struct {
	NullValue NullValue `protobuf:"varint,1,opt,name=null_value,json=nullValue,proto3,enum=mesg.protobuf.NullValue,oneof" json:"null_value,omitempty"`
}
type Value_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3,oneof" json:"number_value,omitempty" amino:"unsafe"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type Value_StructValue struct {
	StructValue *Struct `protobuf:"bytes,5,opt,name=struct_value,json=structValue,proto3,oneof" json:"struct_value,omitempty"`
}
type Value_ListValue struct {
	ListValue *ListValue `protobuf:"bytes,6,opt,name=list_value,json=listValue,proto3,oneof" json:"list_value,omitempty"`
}

func (*Value_NullValue) isValue_Kind()   {}
func (*Value_NumberValue) isValue_Kind() {}
func (*Value_StringValue) isValue_Kind() {}
func (*Value_BoolValue) isValue_Kind()   {}
func (*Value_StructValue) isValue_Kind() {}
func (*Value_ListValue) isValue_Kind()   {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetNullValue() NullValue {
	if x, ok := m.GetKind().(*Value_NullValue); ok {
		return x.NullValue
	}
	return NullValue_NULL_VALUE
}

func (m *Value) GetNumberValue() float64 {
	if x, ok := m.GetKind().(*Value_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetStructValue() *Struct {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if x, ok := m.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Value_NullValue)(nil),
		(*Value_NumberValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_ListValue)(nil),
	}
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
type ListValue struct {
	// Repeated field of dynamically typed values.
	// @hash: true
	Values               []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListValue) Reset()         { *m = ListValue{} }
func (m *ListValue) String() string { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()    {}
func (*ListValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_84428fcddb6debf8, []int{2}
}
func (m *ListValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListValue.Unmarshal(m, b)
}
func (m *ListValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListValue.Marshal(b, m, deterministic)
}
func (m *ListValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListValue.Merge(m, src)
}
func (m *ListValue) XXX_Size() int {
	return xxx_messageInfo_ListValue.Size(m)
}
func (m *ListValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ListValue.DiscardUnknown(m)
}

var xxx_messageInfo_ListValue proto.InternalMessageInfo

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("mesg.protobuf.NullValue", NullValue_name, NullValue_value)
	proto.RegisterType((*Struct)(nil), "mesg.protobuf.Struct")
	proto.RegisterMapType((map[string]*Value)(nil), "mesg.protobuf.Struct.FieldsEntry")
	proto.RegisterType((*Value)(nil), "mesg.protobuf.Value")
	proto.RegisterType((*ListValue)(nil), "mesg.protobuf.ListValue")
}

func init() { proto.RegisterFile("protobuf/types/struct.proto", fileDescriptor_84428fcddb6debf8) }

var fileDescriptor_84428fcddb6debf8 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xeb, 0x74, 0x8d, 0xe8, 0x3f, 0xa3, 0x1a, 0x16, 0x48, 0xd5, 0x86, 0x58, 0x09, 0x97,
	0x6a, 0x82, 0x04, 0x95, 0x03, 0xb4, 0x37, 0x22, 0x0d, 0x26, 0x51, 0x46, 0x15, 0xd8, 0x90, 0xb8,
	0x54, 0x4d, 0xea, 0x06, 0x6b, 0x8e, 0x3d, 0x25, 0x36, 0xa8, 0x37, 0x1e, 0x82, 0x27, 0xe0, 0x84,
	0x78, 0x0a, 0x9e, 0x84, 0x03, 0x8f, 0xc0, 0x89, 0x23, 0xb2, 0x9d, 0x84, 0xb5, 0xda, 0xcd, 0xff,
	0x2f, 0xbf, 0xef, 0xb3, 0x3f, 0x3b, 0x70, 0x70, 0x59, 0x08, 0x29, 0x12, 0xb5, 0x0a, 0xe5, 0xfa,
	0x92, 0x94, 0x61, 0x29, 0x0b, 0x95, 0xca, 0xc0, 0xa8, 0xf8, 0x66, 0x4e, 0xca, 0x2c, 0xa8, 0x89,
	0x7d, 0x3f, 0x13, 0x99, 0x08, 0x1b, 0x83, 0x9e, 0xcc, 0x60, 0x56, 0x16, 0xf3, 0xbf, 0x22, 0x70,
	0xdf, 0x9a, 0x0c, 0x3c, 0x06, 0x77, 0x45, 0x09, 0x5b, 0x96, 0x7d, 0x34, 0x68, 0x0f, 0xbd, 0xd1,
	0xfd, 0x60, 0x23, 0x2e, 0xb0, 0x58, 0xf0, 0xc2, 0x30, 0xc7, 0x5c, 0x16, 0xeb, 0xb8, 0x32, 0xec,
	0xbf, 0x01, 0xef, 0x8a, 0x8c, 0xf7, 0xa0, 0x7d, 0x41, 0xd6, 0x7d, 0x34, 0x40, 0xc3, 0x6e, 0xac,
	0x97, 0xf8, 0x08, 0x3a, 0x9f, 0x16, 0x4c, 0x91, 0xbe, 0x33, 0x40, 0x43, 0x6f, 0x74, 0x7b, 0x2b,
	0xfa, 0x5c, 0x7f, 0x8b, 0x2d, 0x32, 0x71, 0x9e, 0x21, 0xff, 0xa7, 0x03, 0x1d, 0x23, 0xe2, 0x31,
	0x00, 0x57, 0x8c, 0xcd, 0xad, 0x5d, 0x47, 0xf6, 0x46, 0xfd, 0x2d, 0xfb, 0xa9, 0x62, 0xcc, 0xd0,
	0x27, 0xad, 0xb8, 0xcb, 0xeb, 0x01, 0x3f, 0x85, 0x5d, 0xae, 0xf2, 0x84, 0x14, 0xf3, 0xff, 0x7b,
	0xa3, 0x08, 0xff, 0xf9, 0x75, 0xd8, 0x5b, 0xe4, 0x94, 0x8b, 0x89, 0xaf, 0x78, 0xb9, 0x58, 0x11,
	0xff, 0xa4, 0x15, 0x7b, 0x96, 0xb4, 0xc6, 0x07, 0xb0, 0x5b, 0xca, 0x82, 0xf2, 0xac, 0x32, 0xb6,
	0x75, 0x11, 0x0d, 0x59, 0xd5, 0x42, 0x87, 0x00, 0x89, 0x10, 0xf5, 0xc1, 0x76, 0x06, 0x68, 0x78,
	0x43, 0x6f, 0xaf, 0x35, 0x0b, 0x4c, 0x4c, 0x8a, 0x4a, 0x65, 0x85, 0x74, 0x4c, 0xf5, 0x3b, 0xd7,
	0xde, 0x6a, 0x15, 0xae, 0x52, 0xd9, 0xb4, 0x66, 0xb4, 0xac, 0x9d, 0xae, 0x71, 0x6e, 0xb7, 0x9e,
	0xd2, 0x52, 0x36, 0xad, 0x59, 0x3d, 0x44, 0x2e, 0xec, 0x5c, 0x50, 0xbe, 0xf4, 0xc7, 0xd0, 0x6d,
	0x08, 0xfc, 0x10, 0x5c, 0x13, 0x55, 0xbf, 0xed, 0xf5, 0x0f, 0x50, 0x31, 0x47, 0x07, 0xd0, 0x6d,
	0xae, 0x14, 0xf7, 0x00, 0x4e, 0xcf, 0xa6, 0xd3, 0xf9, 0xf9, 0xf3, 0xe9, 0xd9, 0xf1, 0x5e, 0x2b,
	0xfa, 0x82, 0xbe, 0xff, 0xbe, 0x87, 0xe0, 0x56, 0x2a, 0xf2, 0xcd, 0x90, 0xc8, 0xb3, 0x5d, 0x66,
	0x7a, 0x9e, 0xa1, 0x0f, 0x8f, 0x33, 0x2a, 0x3f, 0xaa, 0x24, 0x48, 0x45, 0x1e, 0x6a, 0xf0, 0xd1,
	0x4a, 0x28, 0xbe, 0x5c, 0x48, 0x2a, 0x78, 0x48, 0x78, 0x46, 0x39, 0x09, 0x37, 0x7f, 0xe6, 0xbf,
	0x08, 0x7d, 0x73, 0xda, 0x2f, 0x67, 0xd1, 0x0f, 0xe7, 0xee, 0x6b, 0x9d, 0x3c, 0xab, 0x8f, 0xf7,
	0x9e, 0x30, 0xf6, 0x8a, 0x8b, 0xcf, 0xfc, 0x9d, 0xe6, 0x12, 0xd7, 0xf8, 0x9e, 0xfc, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0xeb, 0x5f, 0xdf, 0x0d, 0x03, 0x00, 0x00,
}

func (this *Struct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Struct)
	if !ok {
		that2, ok := that.(Struct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Kind == nil {
		if this.Kind != nil {
			return false
		}
	} else if this.Kind == nil {
		return false
	} else if !this.Kind.Equal(that1.Kind) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Value_NullValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_NullValue)
	if !ok {
		that2, ok := that.(Value_NullValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NullValue != that1.NullValue {
		return false
	}
	return true
}
func (this *Value_NumberValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_NumberValue)
	if !ok {
		that2, ok := that.(Value_NumberValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumberValue != that1.NumberValue {
		return false
	}
	return true
}
func (this *Value_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_StringValue)
	if !ok {
		that2, ok := that.(Value_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *Value_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_BoolValue)
	if !ok {
		that2, ok := that.(Value_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *Value_StructValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_StructValue)
	if !ok {
		that2, ok := that.(Value_StructValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StructValue.Equal(that1.StructValue) {
		return false
	}
	return true
}
func (this *Value_ListValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_ListValue)
	if !ok {
		that2, ok := that.(Value_ListValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListValue.Equal(that1.ListValue) {
		return false
	}
	return true
}
func (this *ListValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListValue)
	if !ok {
		that2, ok := that.(ListValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
