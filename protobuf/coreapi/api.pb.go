// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/coreapi/api.proto

package coreapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request to fetch all informations of the Core
type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10679b8ed3075b1e, []int{0}
}

func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

// Information concerning the Core from the `info` API.
type InfoReply struct {
	Services             []*InfoReply_CoreService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Version              string                   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *InfoReply) Reset()         { *m = InfoReply{} }
func (m *InfoReply) String() string { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()    {}
func (*InfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10679b8ed3075b1e, []int{1}
}

func (m *InfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReply.Unmarshal(m, b)
}
func (m *InfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReply.Marshal(b, m, deterministic)
}
func (m *InfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply.Merge(m, src)
}
func (m *InfoReply) XXX_Size() int {
	return xxx_messageInfo_InfoReply.Size(m)
}
func (m *InfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply proto.InternalMessageInfo

func (m *InfoReply) GetServices() []*InfoReply_CoreService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *InfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type InfoReply_CoreService struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Key                  string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReply_CoreService) Reset()         { *m = InfoReply_CoreService{} }
func (m *InfoReply_CoreService) String() string { return proto.CompactTextString(m) }
func (*InfoReply_CoreService) ProtoMessage()    {}
func (*InfoReply_CoreService) Descriptor() ([]byte, []int) {
	return fileDescriptor_10679b8ed3075b1e, []int{1, 0}
}

func (m *InfoReply_CoreService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReply_CoreService.Unmarshal(m, b)
}
func (m *InfoReply_CoreService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReply_CoreService.Marshal(b, m, deterministic)
}
func (m *InfoReply_CoreService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply_CoreService.Merge(m, src)
}
func (m *InfoReply_CoreService) XXX_Size() int {
	return xxx_messageInfo_InfoReply_CoreService.Size(m)
}
func (m *InfoReply_CoreService) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply_CoreService.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply_CoreService proto.InternalMessageInfo

func (m *InfoReply_CoreService) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *InfoReply_CoreService) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *InfoReply_CoreService) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *InfoReply_CoreService) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "mesg.api.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "mesg.api.InfoReply")
	proto.RegisterType((*InfoReply_CoreService)(nil), "mesg.api.InfoReply.CoreService")
}

func init() { proto.RegisterFile("protobuf/coreapi/api.proto", fileDescriptor_10679b8ed3075b1e) }

var fileDescriptor_10679b8ed3075b1e = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0xce, 0x2f, 0x4a, 0x4d, 0x2c, 0xc8, 0xd4, 0x4f, 0x2c, 0xc8,
	0xd4, 0x03, 0x0b, 0x0a, 0x71, 0xe4, 0xa6, 0x16, 0xa7, 0xeb, 0x25, 0x16, 0x64, 0x2a, 0xf1, 0x72,
	0x71, 0x7b, 0xe6, 0xa5, 0xe5, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xed, 0x66, 0xe4,
	0xe2, 0x84, 0xf0, 0x0b, 0x72, 0x2a, 0x85, 0xac, 0xb9, 0x38, 0x8a, 0x53, 0x8b, 0xca, 0x32, 0x93,
	0x53, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xe4, 0xf5, 0x60, 0x3a, 0xf5, 0xe0, 0xca,
	0xf4, 0x9c, 0xf3, 0x8b, 0x52, 0x83, 0x21, 0xea, 0x82, 0xe0, 0x1a, 0x84, 0x24, 0xb8, 0xd8, 0xcb,
	0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x58, 0x14, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0xa9,
	0x70, 0x2e, 0x6e, 0x24, 0x2d, 0x42, 0x02, 0x5c, 0xcc, 0xc5, 0x99, 0x29, 0x12, 0x8c, 0x60, 0x45,
	0x20, 0xa6, 0x90, 0x10, 0x17, 0x4b, 0x46, 0x62, 0x71, 0x86, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f,
	0x10, 0x98, 0x0d, 0x52, 0x55, 0x5a, 0x94, 0x23, 0xc1, 0x0c, 0x51, 0x55, 0x5a, 0x94, 0x03, 0x12,
	0xc9, 0x4e, 0xad, 0x84, 0x1a, 0x0e, 0x62, 0x1a, 0xd9, 0x70, 0xb1, 0x80, 0x0c, 0x16, 0x32, 0xe1,
	0x62, 0x01, 0xb9, 0x4e, 0x48, 0x14, 0xdd, 0xb5, 0x60, 0x4f, 0x4a, 0x09, 0x63, 0xf1, 0x84, 0x12,
	0x83, 0x13, 0x67, 0x14, 0x3b, 0x34, 0xa4, 0x92, 0xd8, 0xc0, 0xc1, 0x64, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x39, 0xa7, 0x3e, 0x9d, 0x44, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	// Info returns all necessary information from the core.
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/mesg.api.Core/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	// Info returns all necessary information from the core.
	Info(context.Context, *InfoRequest) (*InfoReply, error)
}

// UnimplementedCoreServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (*UnimplementedCoreServer) Info(ctx context.Context, req *InfoRequest) (*InfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mesg.api.Core/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mesg.api.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Core_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/coreapi/api.proto",
}
