syntax = "proto3";

import "gogo/protobuf/gogoproto/gogo.proto";
import "protobuf/types/struct.proto";
import "protobuf/types/execution.proto";

package mesg.api.v1;
option go_package = "api";

// This is the API to interact with the Executions.
//
// This API is a [gRPC](https://grpc.io/) API.
//
// The source file of this API is hosted on [GitHub](https://github.com/mesg-foundation/engine/blob/master/protobuf/api/execution.proto).

service ExecutionService {
  // Create creates a single Execution specified in a request.
  rpc Create(ExecutionServiceCreateRequest) returns (ExecutionServiceCreateResponse) {}

  // Get returns a single Execution specified in a request.
  rpc Get(ExecutionServiceGetRequest) returns (ExecutionServiceGetResponse) {}

  // Stream returns a stream of executions that satisfy criteria
  // specified in a request.
  rpc Stream(ExecutionServiceStreamRequest) returns (stream ExecutionServiceStreamResponse) {}

  // Update updates execution with outputs or an error.
  rpc Update(ExecutionServiceUpdateRequest) returns (ExecutionServiceUpdateResponse) {}
}

// ExecutionCreateRequest defines request to create a single execution.
message ExecutionServiceCreateRequest {
  bytes instance_hash = 1 [
    (gogoproto.customtype) = "github.com/mesg-foundation/engine/hash.Hash",
    (gogoproto.nullable) = false
  ];
  string task_key = 2;
  mesg.protobuf.Struct inputs = 3;
  repeated string tags = 4;
}

// ExecutionCreateResponse defines response for execution creation.
message ExecutionServiceCreateResponse {
  // Execution's hash.
  bytes hash = 1 [
    (gogoproto.customtype) = "github.com/mesg-foundation/engine/hash.Hash",
    (gogoproto.nullable) = false
  ];
}

// ExecutionGetRequest defines request to retrieve a single execution.
message ExecutionServiceGetRequest {
  // Execution's hash to fetch.
  bytes hash = 1 [
    (gogoproto.customtype) = "github.com/mesg-foundation/engine/hash.Hash",
    (gogoproto.nullable) = false
  ];
}

message ExecutionServiceGetResponse {
  types.v1.Execution execution = 1;
}

// ExecutionStreamRequest defines request to retrieve a stream of executions.
message ExecutionServiceStreamRequest{
  // Filter contains filtering criteria.
  message Filter {
    // Statuses to filter executions. One status needs to be present in the execution.
    repeated types.v1.Status statuses = 1;

    // Instance's hash to filter executions.
    bytes instance_hash = 2 [
      (gogoproto.customtype) = "github.com/mesg-foundation/engine/hash.Hash",
      (gogoproto.nullable) = false
    ];

    // taskKey to filter executions.
    string task_key = 3;

    // tags to filter executions. All tags needs to be present in the execution.
    repeated string tags = 4;
  }

  // Filter used to filter a stream of executions.
  Filter filter = 1;
}

message ExecutionServiceStreamResponse {
  types.v1.Execution execution = 1;
}

// ExecutionUpdateRequest defines request for execution update.
message ExecutionServiceUpdateRequest {
  // Hash represents execution.
  bytes hash = 1 [
    (gogoproto.customtype) = "github.com/mesg-foundation/engine/hash.Hash",
    (gogoproto.nullable) = false
  ];

  // result pass to execution
  oneof result {
    // outputs is a success result.
    mesg.protobuf.Struct outputs = 2;

    // error is an error result.
    string error = 3;
  }
}

// ExecutionUpdateResponse defines response for execution update.
message ExecutionServiceUpdateResponse {}
