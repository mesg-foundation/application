syntax = "proto3";

package api;
option go_package = "service";

// API accessible from services.
// This API can and should only be accessible when you create a MESG Service.
// It provide all functions necessary to be able to execute tasks and submit specific events.
service Service {
  // Let you to emit an event to the [Core](/guide/start-here/core.html) based on the ones defined in your [mesg.yml](/guide/service/service-file.html).
  rpc EmitEvent (EmitEventRequest) returns (EmitEventReply) {}

  // Subscribe to the stream of tasks that will receive tasks from the [Core](/guide/start-here/core.html)
  rpc ListenTask (ListenTaskRequest) returns (stream TaskData) {}

  // Let you submit a result from a task to the [Core](/guide/start-here/core.html). The result should be an output of the tasks
  rpc SubmitResult (SubmitResultRequest) returns (SubmitResultReply) {}
}

// Data sent while calling the `EmitEvent` API.
// 
// **Example:**
// ```json
// {
//   "token": "TOKEN_FROM_ENV",
//   "eventKey": "eventX",
//   "eventData": "{\"foo\":\"hello\",\"bar\":false}"
// }
// ```
message EmitEventRequest {
  string token = 1;     // The token given by the Core as environment variable `MESG_TOKEN`.
  string eventKey = 2;  // The event's key defined in the [service file](/guide/service/service-file.html).
  string eventData = 3; // The data of your event encoded in JSON as defined in your [mesg.yml](/guide/service/service-file.html).
}

// Data sent to connect to the `ListenTask` stream API.
// 
// **Example:**
// ```json
// {
//   "token": "TOKEN_FROM_ENV"
// }
// ```
message ListenTaskRequest {
  string token = 1; // The token given by the Core as environment variable `MESG_TOKEN`.`
}

// Data sent while submitting a a result for a task.
// This result can only be called once inside a request from `ListenTask` because of its dependency with the `executionID``
// 
// **Example:**
// ```json
// {
//   "executionID": "xxxxxx",
//   "outputKey": "outputX",
//   "outputData": "{\"foo\":\"super result\",\"bar\":true}"
// }
// ```
message SubmitResultRequest {
  string executionID = 1; // The executionID received from the `listenTask` stream
  string outputKey = 2;   // The output key defined in your [mesg.yml](/guide/service/service-file.html).
  string outputData = 3;  // The data of your result encoded in JSON as defined in your [mesg.yml](/guide/service/service-file.html).
}

// Response of the Core when receiving an event from the `EmitEvent` call
// 
// **Example:**
// ```json
// {}
// ```
message EmitEventReply {
}

// Data sent through the stream from the `ListenTask` API
// These data can come as long as the stream stays open. They contains all necessary informations to process a task.
// The `executionID` needs to be kept and sent back with the `submitResult` API
// 
// **Example:**
// ```json
// {
//   "executionID": "xxxxxx",
//   "taskKey": "taskX",
//   "inputData": "{\"inputX\":\"Hello world!\",\"inputY\":true}"
// }
// ```
message TaskData {
  string executionID = 1; // An unique identifier for the execution you want to submit the result to.
  string taskKey = 2;     // The task key defined in your [mesg.yml](/guide/service/service-file.html).
  string inputData = 3;   // The inputs of your tasks encoded in JSON as defined in your [mesg.yml](/guide/service/service-file.html).
}

// Response of the Core when receiving an result from the `SubmitResult` call
// 
// **Example:**
// ```json
// {}
// ```
message SubmitResultReply {
}
