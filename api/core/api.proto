syntax = "proto3";

package api;
option go_package = "core";

import "github.com/mesg-foundation/core/service/service.proto";

// Main API to interact with MESG Core functionalities. It can be consumed by any applications or any tools that wish to interact with MESG Core.
// It is actually used by the MESG CLI and MESG Application libraries.
// 
// Services should not use this API but use the [Service API](./service.md).
service Core {
  // Subscribe to a stream that listens for events from a service.
  rpc ListenEvent (ListenEventRequest) returns (stream EventData) {}

  // Subscribe to the stream that listens for task's results of a service.
  rpc ListenResult (ListenResultRequest) returns (stream ResultData) {}
  
  // Execute a task of a service through the [Core](../guide/start-here/core.md).
  rpc ExecuteTask (ExecuteTaskRequest) returns (ExecuteTaskReply) {}

  // Start a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
  rpc StartService (StartServiceRequest) returns (StartServiceReply) {}

  // Stop a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
  rpc StopService (StopServiceRequest) returns (StopServiceReply) {}
  
  // Deploy a service to the [Core](../guide/start-here/core.md). This will give you an unique identifier to use to interact with the service.
  rpc DeployService (DeployServiceRequest) returns (DeployServiceReply) {}
  
  // Delete a service from Core. This function only delete a deployed service in the [Core](../guide/start-here/core.md). If the service's code is on your computer, it will not delete its source code.
  rpc DeleteService (DeleteServiceRequest) returns (DeleteServiceReply) {}

  // List all services already deployed in the [Core](../guide/start-here/core.md).
  rpc ListServices (ListServicesRequest) returns (ListServicesReply) {}

  // Get the definition of an already deployed service from its ID.
  rpc GetService (GetServiceRequest) returns (GetServiceReply) {}
}

// Request's data of the `ListenEvent` stream API.
// 
// **Example**
// ```json
// {
//   "serviceID":   "__SERVICE_ID__",
//   "eventFilter": "__EVENT_KEY_TO_MATCH__"
// }
// ```
message ListenEventRequest {
  string serviceID = 1;   // Service ID. Generated when using the `DeployService` API.
  string eventFilter = 2; // __Optional.__ Event's key to filter. The event have to match this key. The default is `*` and matches any event.
}

// Data receive from the stream of the `ListenEvent` API.
// Will be received over time as long as the stream is opened.
// 
// **Example**
// ```json
// {
//   "eventKey":  "__EVENT_KEY__",
//   "eventData": "{\"foo\":\"bar\"}"
// }
// ```
message EventData {
  string eventKey = 1;  // Event's key.
  string eventData = 2; // Event's data encoded in JSON.
}

// Request's data of the `ListenResult` stream API.
// 
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskFilter":    "__TASK_KEY_TO_MATCH__",
//   "outputFilter":  "__OUTPUT_KEY_TO_MATCH__"
// }
// ```
message ListenResultRequest {
  string serviceID = 1;     // Service ID. Generated when using the `DeployService` API.
  string taskFilter = 2;    // __Optional.__  Task's key to filter. The task have to match this key. The default is `*` and matches any task.
  string outputFilter = 3;  // __Optional.__ Output's key of the task to filter. The task have to return this output's key. The default is `*` and matches any output.
}

// Data receive from the stream of the `ListenResult` API.
// Will be received over time as long as the stream is opened.
// 
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__",
//   "taskKey":     "__TASK_KEY__",
//   "outputKey":   "__OUTPUT_KEY__",
//   "outputData":  "{\"foo\":\"bar\"}"
// }
// ```
message ResultData {
  string executionID = 1; // Unique identifier of the execution.
  string taskKey = 2;     // Key of the executed task.
  string outputKey = 3;   // Output's key the task returned.
  string outputData = 4;  // Output's data the task returned encoded in JSON.
}

// Request's data of the `ExecuteTask` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__",
//   "taskKey":   "__TASK_KEY__",
//   "inputData": "{\"foo\":\"bar\"}"
// }
// ```
message ExecuteTaskRequest {
  string serviceID = 1; // Service ID. Generated when using the `DeployService` API.
  string taskKey = 2;   // Task's key to execute.
  string inputData = 3; // Inputs of the task to execute encoded in JSON.
}

// Reply's data of the `ExecuteTask` API.
// 
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__"
// }
// ```
message ExecuteTaskReply {
  string executionID = 1; // Unique identifier of the execution.
}

// Request's data of the `StartService` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
message StartServiceRequest {
  string serviceID = 1; // Service ID. Generated when using the `DeployService` API.
}

// Reply's data of the `StartService` API.
message StartServiceReply {
}

// Request's data of the `StopService` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
message StopServiceRequest {
  string serviceID = 1; // Service ID. Generated when using the `DeployService` API.
}

// Reply's data of the `StopService` API.
message StopServiceReply {
}

// Request's data of the `DeployService` API.
// 
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
message DeployServiceRequest {
  service.Service service = 1; // Service's definition to deploy. [Details here](./service-type.html)
}

// Reply's data of the `DeployService` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
message DeployServiceReply {
  string serviceID = 1; // The generated identifier of the deployed service. Use this ID with other APIs.
}

// Request's data of the `DeleteService` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
message DeleteServiceRequest {
  string serviceID = 1; // Service ID. Generated when using the `DeployService` API.
}

// Reply's data  of the `DeleteService` API.
message DeleteServiceReply {
}

// Request's data of the `ListServices` API.
message ListServicesRequest {
}

// Reply's data of the `ListServices` API.
// 
// **Example**
// ```json
// [{
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }]
// ```
message ListServicesReply {
  repeated service.Service services = 1; // List of services' definition previously deployed. [Details here](./service-type.html)
}

// Request's data of the `GetService` API.
// 
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
message GetServiceRequest {
  string serviceID = 1; // Service ID. Generated when using the `DeployService` API.
}

// Reply's data of the `GetService` API.
// 
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
message GetServiceReply {
  service.Service service = 1; // Service's definition. [Details here](./service-type.html)
}