// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/mesg-foundation/core/api/core/api.proto

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	github.com/mesg-foundation/core/api/core/api.proto

It has these top-level messages:
	ListenEventRequest
	ExecuteTaskRequest
	ListenResultRequest
	StartServiceRequest
	StopServiceRequest
	EventData
	ExecuteTaskReply
	ResultData
	StartServiceReply
	StopServiceReply
	DeployServiceRequest
	DeployServiceReply
	DeleteServiceRequest
	DeleteServiceReply
	ListServicesRequest
	ListServicesReply
	GetServiceRequest
	GetServiceReply
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/mesg-foundation/core/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Data sent to connect to the `ListenEvent` stream API
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx",
//   "eventFilter": "*"
// }
// ```
type ListenEventRequest struct {
	ServiceID   string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	EventFilter string `protobuf:"bytes,2,opt,name=eventFilter" json:"eventFilter,omitempty"`
}

func (m *ListenEventRequest) Reset()                    { *m = ListenEventRequest{} }
func (m *ListenEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenEventRequest) ProtoMessage()               {}
func (*ListenEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListenEventRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenEventRequest) GetEventFilter() string {
	if m != nil {
		return m.EventFilter
	}
	return ""
}

// Payload sent when you want to execute a task of a service
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx",
//   "taskKey": "myTaskX",
//   "inputData": "{\"foo\":\"bar\"}"
// }
// ```
type ExecuteTaskRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskKey   string `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	InputData string `protobuf:"bytes,3,opt,name=inputData" json:"inputData,omitempty"`
}

func (m *ExecuteTaskRequest) Reset()                    { *m = ExecuteTaskRequest{} }
func (m *ExecuteTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskRequest) ProtoMessage()               {}
func (*ExecuteTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecuteTaskRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ExecuteTaskRequest) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ExecuteTaskRequest) GetInputData() string {
	if m != nil {
		return m.InputData
	}
	return ""
}

// Data sent to connect to the `ListenResult` stream API
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx",
//   "taskFilter": "*",
//   "outputFilter": "*"
// }
// ```
type ListenResultRequest struct {
	ServiceID    string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskFilter   string `protobuf:"bytes,2,opt,name=taskFilter" json:"taskFilter,omitempty"`
	OutputFilter string `protobuf:"bytes,3,opt,name=outputFilter" json:"outputFilter,omitempty"`
}

func (m *ListenResultRequest) Reset()                    { *m = ListenResultRequest{} }
func (m *ListenResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenResultRequest) ProtoMessage()               {}
func (*ListenResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListenResultRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenResultRequest) GetTaskFilter() string {
	if m != nil {
		return m.TaskFilter
	}
	return ""
}

func (m *ListenResultRequest) GetOutputFilter() string {
	if m != nil {
		return m.OutputFilter
	}
	return ""
}

// Payload necessary to start a service
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx"
// }
// ```
type StartServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StartServiceRequest) Reset()                    { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()               {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Payload necessary to stop a service
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx"
// }
// ```
type StopServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StopServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Data sent through the stream from the `ListenEvent` API
// These data can come as long as the stream stays open.
//
// **Example**
// ```json
// {
//   "eventKey": "xxxx",
//   "eventData": "{\"foo\":\"bar\"}"
// }
// ```
type EventData struct {
	EventKey  string `protobuf:"bytes,1,opt,name=eventKey" json:"eventKey,omitempty"`
	EventData string `protobuf:"bytes,2,opt,name=eventData" json:"eventData,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EventData) GetEventKey() string {
	if m != nil {
		return m.EventKey
	}
	return ""
}

func (m *EventData) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

// Reply of the [Core](/guide/start-here/core.html) when calling the `ExecuteTask` API
//
// **Example**
// ```json
// {
//   "executionID": "xxx"
// }
// ```
type ExecuteTaskReply struct {
	ExecutionID string `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
}

func (m *ExecuteTaskReply) Reset()                    { *m = ExecuteTaskReply{} }
func (m *ExecuteTaskReply) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskReply) ProtoMessage()               {}
func (*ExecuteTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExecuteTaskReply) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

// Data sent to the `ListenResult` stream that contains all informations of a result execution
//
// **Example**
// ```json
// {
//   "executionID": "xxx",
//   "taskKey": "taskX",
//   "outputKey": "outputX",
//   "outputData": "{\"foo\":\"bar\"}"
// }
// ```
type ResultData struct {
	ExecutionID string `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
	TaskKey     string `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	OutputKey   string `protobuf:"bytes,3,opt,name=outputKey" json:"outputKey,omitempty"`
	OutputData  string `protobuf:"bytes,4,opt,name=outputData" json:"outputData,omitempty"`
}

func (m *ResultData) Reset()                    { *m = ResultData{} }
func (m *ResultData) String() string            { return proto.CompactTextString(m) }
func (*ResultData) ProtoMessage()               {}
func (*ResultData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResultData) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

func (m *ResultData) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ResultData) GetOutputKey() string {
	if m != nil {
		return m.OutputKey
	}
	return ""
}

func (m *ResultData) GetOutputData() string {
	if m != nil {
		return m.OutputData
	}
	return ""
}

// Reply of the [Core](/guide/start-here/core.html) whan starting a Service
//
// **Example**
// ```json
// {}
// ```
type StartServiceReply struct {
}

func (m *StartServiceReply) Reset()                    { *m = StartServiceReply{} }
func (m *StartServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StartServiceReply) ProtoMessage()               {}
func (*StartServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Reply of the [Core](/guide/start-here/core.html) whan stopping a Service
//
// **Example**
// ```json
// {}
// ```
type StopServiceReply struct {
}

func (m *StopServiceReply) Reset()                    { *m = StopServiceReply{} }
func (m *StopServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StopServiceReply) ProtoMessage()               {}
func (*StopServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Data sent while deploying a new Service to the [Core](/guide/start-here/core.html)
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type DeployServiceRequest struct {
	Service *service.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *DeployServiceRequest) Reset()                    { *m = DeployServiceRequest{} }
func (m *DeployServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceRequest) ProtoMessage()               {}
func (*DeployServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeployServiceRequest) GetService() *service.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Reply of the [Core](/guide/start-here/core.html) whan deploying a new Service
//
// **Example**
// ```json
// {
//   "serviceID": "xxx"
// }
// ```
type DeployServiceReply struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *DeployServiceReply) Reset()                    { *m = DeployServiceReply{} }
func (m *DeployServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceReply) ProtoMessage()               {}
func (*DeployServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeployServiceReply) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Payload necessary to delete a service
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx"
// }
// ```
type DeleteServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *DeleteServiceRequest) Reset()                    { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()               {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of the [Core](/guide/start-here/core.html) whan deleting a Service
//
// **Example**
// ```json
// {}
// ```
type DeleteServiceReply struct {
}

func (m *DeleteServiceReply) Reset()                    { *m = DeleteServiceReply{} }
func (m *DeleteServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceReply) ProtoMessage()               {}
func (*DeleteServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Payload necessary to list all the deployed services
//
// **Example**
// ```json
// {}
// ```
type ListServicesRequest struct {
}

func (m *ListServicesRequest) Reset()                    { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()               {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// Result from the [Core](/guide/start-here/core.html) when calling the list of services deployed
//
// **Example**
// ```json
// [{
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }]
// ```
type ListServicesReply struct {
	Services []*service.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ListServicesReply) Reset()                    { *m = ListServicesReply{} }
func (m *ListServicesReply) String() string            { return proto.CompactTextString(m) }
func (*ListServicesReply) ProtoMessage()               {}
func (*ListServicesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListServicesReply) GetServices() []*service.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// Payload necessary to get the details of deployed service
//
// **Example**
// ```json
// {
//   "serviceID": "xxxx"
// }
// ```
type GetServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *GetServiceRequest) Reset()                    { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()               {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Result from the [Core](/guide/start-here/core.html) when calling the `GetService` API
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type GetServiceReply struct {
	Service *service.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *GetServiceReply) Reset()                    { *m = GetServiceReply{} }
func (m *GetServiceReply) String() string            { return proto.CompactTextString(m) }
func (*GetServiceReply) ProtoMessage()               {}
func (*GetServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetServiceReply) GetService() *service.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenEventRequest)(nil), "api.ListenEventRequest")
	proto.RegisterType((*ExecuteTaskRequest)(nil), "api.ExecuteTaskRequest")
	proto.RegisterType((*ListenResultRequest)(nil), "api.ListenResultRequest")
	proto.RegisterType((*StartServiceRequest)(nil), "api.StartServiceRequest")
	proto.RegisterType((*StopServiceRequest)(nil), "api.StopServiceRequest")
	proto.RegisterType((*EventData)(nil), "api.EventData")
	proto.RegisterType((*ExecuteTaskReply)(nil), "api.ExecuteTaskReply")
	proto.RegisterType((*ResultData)(nil), "api.ResultData")
	proto.RegisterType((*StartServiceReply)(nil), "api.StartServiceReply")
	proto.RegisterType((*StopServiceReply)(nil), "api.StopServiceReply")
	proto.RegisterType((*DeployServiceRequest)(nil), "api.DeployServiceRequest")
	proto.RegisterType((*DeployServiceReply)(nil), "api.DeployServiceReply")
	proto.RegisterType((*DeleteServiceRequest)(nil), "api.DeleteServiceRequest")
	proto.RegisterType((*DeleteServiceReply)(nil), "api.DeleteServiceReply")
	proto.RegisterType((*ListServicesRequest)(nil), "api.ListServicesRequest")
	proto.RegisterType((*ListServicesReply)(nil), "api.ListServicesReply")
	proto.RegisterType((*GetServiceRequest)(nil), "api.GetServiceRequest")
	proto.RegisterType((*GetServiceReply)(nil), "api.GetServiceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Core service

type CoreClient interface {
	// Subscribe to the stream that will receive events from a service
	ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error)
	// Let you to execute a task of a service through the [Core](/guide/start-here/core.html)
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error)
	// Subscribe to the stream that will receive results of a task of a service
	ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error)
	// Start a service. This service needs to be deployed already in the [Core](/guide/start-here/core.html)
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error)
	// Stop a service. This service needs to be deployed already in the [Core](/guide/start-here/core.html)
	StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error)
	// Deploy a new service to the [Core](/guide/start-here/core.html). This will give you an unique identifier to use your service
	DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (*DeployServiceReply, error)
	// Delete a service. This function will only delete the service deployed in the [Core](/guide/start-here/core.html). If the service code is on your computer, this call will not delete your source code
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error)
	// List all the services already deployed in the [Core](/guide/start-here/core.html)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error)
	// Get an already deployed service based on its ID
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[0], c.cc, "/api.Core/ListenEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenEventClient interface {
	Recv() (*EventData, error)
	grpc.ClientStream
}

type coreListenEventClient struct {
	grpc.ClientStream
}

func (x *coreListenEventClient) Recv() (*EventData, error) {
	m := new(EventData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error) {
	out := new(ExecuteTaskReply)
	err := grpc.Invoke(ctx, "/api.Core/ExecuteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[1], c.cc, "/api.Core/ListenResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenResultClient interface {
	Recv() (*ResultData, error)
	grpc.ClientStream
}

type coreListenResultClient struct {
	grpc.ClientStream
}

func (x *coreListenResultClient) Recv() (*ResultData, error) {
	m := new(ResultData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error) {
	out := new(StartServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StartService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error) {
	out := new(StopServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StopService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (*DeployServiceReply, error) {
	out := new(DeployServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/DeployService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error) {
	out := new(DeleteServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error) {
	out := new(ListServicesReply)
	err := grpc.Invoke(ctx, "/api.Core/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Core service

type CoreServer interface {
	// Subscribe to the stream that will receive events from a service
	ListenEvent(*ListenEventRequest, Core_ListenEventServer) error
	// Let you to execute a task of a service through the [Core](/guide/start-here/core.html)
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskReply, error)
	// Subscribe to the stream that will receive results of a task of a service
	ListenResult(*ListenResultRequest, Core_ListenResultServer) error
	// Start a service. This service needs to be deployed already in the [Core](/guide/start-here/core.html)
	StartService(context.Context, *StartServiceRequest) (*StartServiceReply, error)
	// Stop a service. This service needs to be deployed already in the [Core](/guide/start-here/core.html)
	StopService(context.Context, *StopServiceRequest) (*StopServiceReply, error)
	// Deploy a new service to the [Core](/guide/start-here/core.html). This will give you an unique identifier to use your service
	DeployService(context.Context, *DeployServiceRequest) (*DeployServiceReply, error)
	// Delete a service. This function will only delete the service deployed in the [Core](/guide/start-here/core.html). If the service code is on your computer, this call will not delete your source code
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceReply, error)
	// List all the services already deployed in the [Core](/guide/start-here/core.html)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	// Get an already deployed service based on its ID
	GetService(context.Context, *GetServiceRequest) (*GetServiceReply, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_ListenEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenEvent(m, &coreListenEventServer{stream})
}

type Core_ListenEventServer interface {
	Send(*EventData) error
	grpc.ServerStream
}

type coreListenEventServer struct {
	grpc.ServerStream
}

func (x *coreListenEventServer) Send(m *EventData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListenResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenResult(m, &coreListenResultServer{stream})
}

type Core_ListenResultServer interface {
	Send(*ResultData) error
	grpc.ServerStream
}

type coreListenResultServer struct {
	grpc.ServerStream
}

func (x *coreListenResultServer) Send(m *ResultData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StopService(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeployService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeployService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeployService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeployService(ctx, req.(*DeployServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _Core_ExecuteTask_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _Core_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Core_StopService_Handler,
		},
		{
			MethodName: "DeployService",
			Handler:    _Core_DeployService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Core_DeleteService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Core_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Core_GetService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvent",
			Handler:       _Core_ListenEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenResult",
			Handler:       _Core_ListenResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/mesg-foundation/core/api/core/api.proto",
}

func init() { proto.RegisterFile("github.com/mesg-foundation/core/api/core/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x72, 0x12, 0x31,
	0x14, 0x06, 0xcb, 0xb4, 0xe5, 0x80, 0x16, 0x02, 0xb5, 0xeb, 0x8e, 0xe3, 0x30, 0xb9, 0x72, 0x1c,
	0x05, 0xa5, 0xf5, 0xc6, 0xb1, 0xd3, 0x11, 0x41, 0xc7, 0xd1, 0x2b, 0xe8, 0x95, 0x77, 0x5b, 0x8c,
	0x75, 0xed, 0x76, 0xb3, 0xee, 0x66, 0xab, 0xbc, 0x80, 0xaf, 0xe8, 0xeb, 0x38, 0x27, 0xc9, 0x86,
	0x2c, 0x61, 0x5a, 0xb8, 0x82, 0x7c, 0xe7, 0x2f, 0xe7, 0x3b, 0xdf, 0x9e, 0xc0, 0xf0, 0x32, 0x14,
	0x3f, 0xf2, 0x8b, 0xfe, 0x9c, 0x5f, 0x0f, 0xae, 0x59, 0x76, 0xf9, 0xe2, 0x3b, 0xcf, 0xe3, 0x6f,
	0x81, 0x08, 0x79, 0x3c, 0x98, 0xf3, 0x94, 0x0d, 0x82, 0x24, 0x34, 0x7f, 0xfa, 0x49, 0xca, 0x05,
	0x27, 0x3b, 0x41, 0x12, 0xfa, 0xaf, 0xef, 0x0a, 0xcc, 0x58, 0x7a, 0x13, 0xce, 0xcd, 0xaf, 0x8a,
	0xa5, 0xe7, 0x40, 0xbe, 0x84, 0x99, 0x60, 0xf1, 0xe4, 0x86, 0xc5, 0x62, 0xca, 0x7e, 0xe5, 0x2c,
	0x13, 0xe4, 0x31, 0xd4, 0xb5, 0xdb, 0xa7, 0xb1, 0x57, 0xed, 0x55, 0x9f, 0xd6, 0xa7, 0x4b, 0x80,
	0xf4, 0xa0, 0xc1, 0xd0, 0xfb, 0x43, 0x18, 0x09, 0x96, 0x7a, 0xf7, 0xa4, 0xdd, 0x86, 0xe8, 0x4f,
	0x20, 0x93, 0x3f, 0x6c, 0x9e, 0x0b, 0x76, 0x1e, 0x64, 0x57, 0x9b, 0x65, 0xf5, 0x60, 0x4f, 0x04,
	0xd9, 0xd5, 0x67, 0xb6, 0xd0, 0x19, 0x8b, 0x23, 0xc6, 0x85, 0x71, 0x92, 0x8b, 0x71, 0x20, 0x02,
	0x6f, 0x47, 0xc5, 0x19, 0x80, 0xfe, 0x86, 0x8e, 0xea, 0x60, 0xca, 0xb2, 0x3c, 0xda, 0xb0, 0x85,
	0x27, 0x00, 0x98, 0xbd, 0xd4, 0x81, 0x85, 0x10, 0x0a, 0x4d, 0x9e, 0x8b, 0x24, 0x2f, 0x7a, 0x54,
	0x55, 0x4b, 0x18, 0x3d, 0x86, 0xce, 0x4c, 0x04, 0xa9, 0x98, 0xa9, 0xac, 0x1b, 0x15, 0xa6, 0x43,
	0x20, 0x33, 0xc1, 0x93, 0xad, 0x62, 0x26, 0x50, 0x97, 0xd3, 0xc1, 0x76, 0x89, 0x0f, 0xfb, 0x92,
	0x69, 0xe4, 0x49, 0x79, 0x9a, 0x33, 0xa6, 0x61, 0x85, 0xa3, 0x6e, 0x6a, 0x09, 0xd0, 0x13, 0x68,
	0x95, 0x86, 0x92, 0x44, 0x0b, 0x39, 0x4a, 0x89, 0x85, 0x3c, 0x36, 0xa5, 0x6d, 0x88, 0xfe, 0xad,
	0x02, 0x28, 0x66, 0x65, 0xf9, 0x3b, 0x03, 0x6e, 0x9f, 0xa3, 0x22, 0x10, 0x6d, 0x7a, 0x8e, 0x06,
	0xc0, 0x91, 0xa8, 0x83, 0xbc, 0x7d, 0x4d, 0x8d, 0x64, 0x89, 0xd0, 0x0e, 0xb4, 0xcb, 0x74, 0x27,
	0xd1, 0x82, 0x12, 0x68, 0x95, 0xe8, 0x44, 0x6c, 0x04, 0xdd, 0x31, 0x4b, 0x22, 0xbe, 0x58, 0x21,
	0xf9, 0x19, 0xec, 0x69, 0x4e, 0xe5, 0xb5, 0x1b, 0xc3, 0x56, 0xbf, 0xf8, 0x16, 0x0a, 0xcf, 0xc2,
	0x01, 0xc7, 0xb4, 0x92, 0x03, 0xd9, 0xba, 0x7d, 0x4c, 0x27, 0x58, 0x37, 0x62, 0x82, 0x6d, 0x35,
	0xdc, 0x2e, 0x56, 0x2a, 0x45, 0x61, 0x0f, 0x87, 0x4a, 0xd4, 0x1a, 0xcb, 0x74, 0x2a, 0xfa, 0x0e,
	0xda, 0x65, 0x18, 0x6f, 0xf5, 0x1c, 0xf6, 0x75, 0xba, 0xcc, 0xab, 0xf6, 0x76, 0xd6, 0x36, 0x66,
	0x3c, 0xe8, 0x2b, 0x68, 0x7f, 0x64, 0xdb, 0x69, 0xf6, 0x14, 0x0e, 0xec, 0x10, 0xac, 0xb9, 0x05,
	0x97, 0xc3, 0x7f, 0x35, 0xa8, 0xbd, 0xe7, 0x29, 0x23, 0x6f, 0xa0, 0x61, 0xed, 0x1a, 0x72, 0xd4,
	0xc7, 0x15, 0xe6, 0x6e, 0x1f, 0xff, 0x81, 0x34, 0x18, 0xc9, 0xd3, 0xca, 0xcb, 0x2a, 0x39, 0x83,
	0x86, 0x25, 0x5e, 0x1d, 0xeb, 0xee, 0x18, 0xff, 0xd0, 0x35, 0x20, 0x9f, 0x15, 0x72, 0x0a, 0x4d,
	0x7b, 0x4d, 0x10, 0xcf, 0xaa, 0x5e, 0xda, 0x1c, 0xfe, 0x81, 0xb4, 0x2c, 0x35, 0x2f, 0xeb, 0x8f,
	0xa0, 0x69, 0xab, 0x4f, 0x87, 0xaf, 0xf9, 0xfe, 0xfd, 0x87, 0x6b, 0x2c, 0xea, 0x0a, 0x67, 0xd0,
	0xb0, 0xc4, 0xaa, 0x7b, 0x70, 0xb7, 0x81, 0xee, 0xc1, 0xd1, 0x75, 0x85, 0x4c, 0xe0, 0x7e, 0x49,
	0x95, 0xe4, 0x91, 0xf4, 0x5c, 0xa7, 0x76, 0xff, 0x68, 0x9d, 0xc9, 0x4a, 0x63, 0x49, 0xce, 0xa4,
	0x71, 0xc5, 0x6b, 0xd2, 0x38, 0x0a, 0xad, 0x20, 0x25, 0xb6, 0x18, 0x2d, 0x46, 0x57, 0x64, 0xab,
	0x29, 0x71, 0x94, 0x4b, 0x2b, 0xe4, 0x2d, 0xc0, 0x52, 0x5a, 0x44, 0xf9, 0x39, 0xf2, 0xf4, 0xbb,
	0x0e, 0x2e, 0xa3, 0x47, 0xbb, 0x5f, 0x6b, 0xf8, 0xb4, 0x5d, 0xec, 0xca, 0xb7, 0xec, 0xf8, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0x93, 0x45, 0xcc, 0x3d, 0x07, 0x00, 0x00,
}
