// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/mesg-foundation/core/api/core/api.proto

/*
Package core is a generated protocol buffer package.

It is generated from these files:
	github.com/mesg-foundation/core/api/core/api.proto

It has these top-level messages:
	ListenEventRequest
	EventData
	ListenResultRequest
	ResultData
	ExecuteTaskRequest
	ExecuteTaskReply
	StartServiceRequest
	StartServiceReply
	StopServiceRequest
	StopServiceReply
	DeployServiceRequest
	DeployServiceReply
	DeleteServiceRequest
	DeleteServiceReply
	ListServicesRequest
	ListServicesReply
	GetServiceRequest
	GetServiceReply
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/mesg-foundation/core/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request's data of the `ListenEvent` stream API.
//
// **Example**
// ```json
// {
//   "serviceID":   "__SERVICE_ID__",
//   "eventFilter": "__EVENT_KEY_TO_MATCH__"
// }
// ```
type ListenEventRequest struct {
	ServiceID   string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	EventFilter string `protobuf:"bytes,2,opt,name=eventFilter" json:"eventFilter,omitempty"`
}

func (m *ListenEventRequest) Reset()                    { *m = ListenEventRequest{} }
func (m *ListenEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenEventRequest) ProtoMessage()               {}
func (*ListenEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListenEventRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenEventRequest) GetEventFilter() string {
	if m != nil {
		return m.EventFilter
	}
	return ""
}

// Data receive from the stream of the `ListenEvent` API.
// Will be received over time as long as the stream is opened.
//
// **Example**
// ```json
// {
//   "eventKey":  "__EVENT_KEY__",
//   "eventData": "{\"foo\":\"bar\"}"
// }
// ```
type EventData struct {
	EventKey  string `protobuf:"bytes,1,opt,name=eventKey" json:"eventKey,omitempty"`
	EventData string `protobuf:"bytes,2,opt,name=eventData" json:"eventData,omitempty"`
}

func (m *EventData) Reset()                    { *m = EventData{} }
func (m *EventData) String() string            { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()               {}
func (*EventData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventData) GetEventKey() string {
	if m != nil {
		return m.EventKey
	}
	return ""
}

func (m *EventData) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

// Request's data of the `ListenResult` stream API.
//
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskFilter":    "__TASK_KEY_TO_MATCH__",
//   "outputFilter":  "__OUTPUT_KEY_TO_MATCH__"
// }
// ```
type ListenResultRequest struct {
	ServiceID    string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskFilter   string `protobuf:"bytes,2,opt,name=taskFilter" json:"taskFilter,omitempty"`
	OutputFilter string `protobuf:"bytes,3,opt,name=outputFilter" json:"outputFilter,omitempty"`
}

func (m *ListenResultRequest) Reset()                    { *m = ListenResultRequest{} }
func (m *ListenResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenResultRequest) ProtoMessage()               {}
func (*ListenResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListenResultRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenResultRequest) GetTaskFilter() string {
	if m != nil {
		return m.TaskFilter
	}
	return ""
}

func (m *ListenResultRequest) GetOutputFilter() string {
	if m != nil {
		return m.OutputFilter
	}
	return ""
}

// Data receive from the stream of the `ListenResult` API.
// Will be received over time as long as the stream is opened.
//
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__",
//   "taskKey":     "__TASK_KEY__",
//   "outputKey":   "__OUTPUT_KEY__",
//   "outputData":  "{\"foo\":\"bar\"}"
// }
// ```
type ResultData struct {
	ExecutionID string `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
	TaskKey     string `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	OutputKey   string `protobuf:"bytes,3,opt,name=outputKey" json:"outputKey,omitempty"`
	OutputData  string `protobuf:"bytes,4,opt,name=outputData" json:"outputData,omitempty"`
}

func (m *ResultData) Reset()                    { *m = ResultData{} }
func (m *ResultData) String() string            { return proto.CompactTextString(m) }
func (*ResultData) ProtoMessage()               {}
func (*ResultData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResultData) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

func (m *ResultData) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ResultData) GetOutputKey() string {
	if m != nil {
		return m.OutputKey
	}
	return ""
}

func (m *ResultData) GetOutputData() string {
	if m != nil {
		return m.OutputData
	}
	return ""
}

// Request's data of the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__",
//   "taskKey":   "__TASK_KEY__",
//   "inputData": "{\"foo\":\"bar\"}"
// }
// ```
type ExecuteTaskRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	TaskKey   string `protobuf:"bytes,2,opt,name=taskKey" json:"taskKey,omitempty"`
	InputData string `protobuf:"bytes,3,opt,name=inputData" json:"inputData,omitempty"`
}

func (m *ExecuteTaskRequest) Reset()                    { *m = ExecuteTaskRequest{} }
func (m *ExecuteTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskRequest) ProtoMessage()               {}
func (*ExecuteTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecuteTaskRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ExecuteTaskRequest) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ExecuteTaskRequest) GetInputData() string {
	if m != nil {
		return m.InputData
	}
	return ""
}

// Reply's data of the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__"
// }
// ```
type ExecuteTaskReply struct {
	ExecutionID string `protobuf:"bytes,1,opt,name=executionID" json:"executionID,omitempty"`
}

func (m *ExecuteTaskReply) Reset()                    { *m = ExecuteTaskReply{} }
func (m *ExecuteTaskReply) String() string            { return proto.CompactTextString(m) }
func (*ExecuteTaskReply) ProtoMessage()               {}
func (*ExecuteTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ExecuteTaskReply) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

// Request's data of the `StartService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StartServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StartServiceRequest) Reset()                    { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()               {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply's data of the `StartService` API.
type StartServiceReply struct {
}

func (m *StartServiceReply) Reset()                    { *m = StartServiceReply{} }
func (m *StartServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StartServiceReply) ProtoMessage()               {}
func (*StartServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// Request's data of the `StopService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StopServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StopServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply's data of the `StopService` API.
type StopServiceReply struct {
}

func (m *StopServiceReply) Reset()                    { *m = StopServiceReply{} }
func (m *StopServiceReply) String() string            { return proto.CompactTextString(m) }
func (*StopServiceReply) ProtoMessage()               {}
func (*StopServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Request's data of the `DeployService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type DeployServiceRequest struct {
	Service *service.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *DeployServiceRequest) Reset()                    { *m = DeployServiceRequest{} }
func (m *DeployServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceRequest) ProtoMessage()               {}
func (*DeployServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeployServiceRequest) GetService() *service.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// Reply's data of the `DeployService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeployServiceReply struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *DeployServiceReply) Reset()                    { *m = DeployServiceReply{} }
func (m *DeployServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeployServiceReply) ProtoMessage()               {}
func (*DeployServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeployServiceReply) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Request's data of the `DeleteService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeleteServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *DeleteServiceRequest) Reset()                    { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()               {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply's data  of the `DeleteService` API.
type DeleteServiceReply struct {
}

func (m *DeleteServiceReply) Reset()                    { *m = DeleteServiceReply{} }
func (m *DeleteServiceReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceReply) ProtoMessage()               {}
func (*DeleteServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Request's data of the `ListServices` API.
type ListServicesRequest struct {
}

func (m *ListServicesRequest) Reset()                    { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()               {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// Reply's data of the `ListServices` API.
//
// **Example**
// ```json
// [{
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }]
// ```
type ListServicesReply struct {
	Services []*service.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ListServicesReply) Reset()                    { *m = ListServicesReply{} }
func (m *ListServicesReply) String() string            { return proto.CompactTextString(m) }
func (*ListServicesReply) ProtoMessage()               {}
func (*ListServicesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListServicesReply) GetServices() []*service.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// Request's data of the `GetService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type GetServiceRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
}

func (m *GetServiceRequest) Reset()                    { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()               {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply's data of the `GetService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type GetServiceReply struct {
	Service *service.Service `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *GetServiceReply) Reset()                    { *m = GetServiceReply{} }
func (m *GetServiceReply) String() string            { return proto.CompactTextString(m) }
func (*GetServiceReply) ProtoMessage()               {}
func (*GetServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetServiceReply) GetService() *service.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenEventRequest)(nil), "api.ListenEventRequest")
	proto.RegisterType((*EventData)(nil), "api.EventData")
	proto.RegisterType((*ListenResultRequest)(nil), "api.ListenResultRequest")
	proto.RegisterType((*ResultData)(nil), "api.ResultData")
	proto.RegisterType((*ExecuteTaskRequest)(nil), "api.ExecuteTaskRequest")
	proto.RegisterType((*ExecuteTaskReply)(nil), "api.ExecuteTaskReply")
	proto.RegisterType((*StartServiceRequest)(nil), "api.StartServiceRequest")
	proto.RegisterType((*StartServiceReply)(nil), "api.StartServiceReply")
	proto.RegisterType((*StopServiceRequest)(nil), "api.StopServiceRequest")
	proto.RegisterType((*StopServiceReply)(nil), "api.StopServiceReply")
	proto.RegisterType((*DeployServiceRequest)(nil), "api.DeployServiceRequest")
	proto.RegisterType((*DeployServiceReply)(nil), "api.DeployServiceReply")
	proto.RegisterType((*DeleteServiceRequest)(nil), "api.DeleteServiceRequest")
	proto.RegisterType((*DeleteServiceReply)(nil), "api.DeleteServiceReply")
	proto.RegisterType((*ListServicesRequest)(nil), "api.ListServicesRequest")
	proto.RegisterType((*ListServicesReply)(nil), "api.ListServicesReply")
	proto.RegisterType((*GetServiceRequest)(nil), "api.GetServiceRequest")
	proto.RegisterType((*GetServiceReply)(nil), "api.GetServiceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Core service

type CoreClient interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error)
	// Subscribe to the stream that listens for task's results of a service.
	ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error)
	// Execute a task of a service through the [Core](../guide/start-here/core.md).
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error)
	// Start a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error)
	// Stop a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
	StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error)
	// Deploy a service to the [Core](../guide/start-here/core.md). This will give you an unique identifier to use to interact with the service.
	DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (*DeployServiceReply, error)
	// Delete a service from Core. This function only delete a deployed service in the [Core](../guide/start-here/core.md). If the service's code is on your computer, it will not delete its source code.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error)
	// List all services already deployed in the [Core](../guide/start-here/core.md).
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error)
	// Get the definition of an already deployed service from its ID.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[0], c.cc, "/api.Core/ListenEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenEventClient interface {
	Recv() (*EventData, error)
	grpc.ClientStream
}

type coreListenEventClient struct {
	grpc.ClientStream
}

func (x *coreListenEventClient) Recv() (*EventData, error) {
	m := new(EventData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Core_serviceDesc.Streams[1], c.cc, "/api.Core/ListenResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenResultClient interface {
	Recv() (*ResultData, error)
	grpc.ClientStream
}

type coreListenResultClient struct {
	grpc.ClientStream
}

func (x *coreListenResultClient) Recv() (*ResultData, error) {
	m := new(ResultData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error) {
	out := new(ExecuteTaskReply)
	err := grpc.Invoke(ctx, "/api.Core/ExecuteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error) {
	out := new(StartServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StartService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error) {
	out := new(StopServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/StopService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeployService(ctx context.Context, in *DeployServiceRequest, opts ...grpc.CallOption) (*DeployServiceReply, error) {
	out := new(DeployServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/DeployService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error) {
	out := new(DeleteServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error) {
	out := new(ListServicesReply)
	err := grpc.Invoke(ctx, "/api.Core/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := grpc.Invoke(ctx, "/api.Core/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Core service

type CoreServer interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(*ListenEventRequest, Core_ListenEventServer) error
	// Subscribe to the stream that listens for task's results of a service.
	ListenResult(*ListenResultRequest, Core_ListenResultServer) error
	// Execute a task of a service through the [Core](../guide/start-here/core.md).
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskReply, error)
	// Start a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
	StartService(context.Context, *StartServiceRequest) (*StartServiceReply, error)
	// Stop a service. The service have to be already deployed on the [Core](../guide/start-here/core.md).
	StopService(context.Context, *StopServiceRequest) (*StopServiceReply, error)
	// Deploy a service to the [Core](../guide/start-here/core.md). This will give you an unique identifier to use to interact with the service.
	DeployService(context.Context, *DeployServiceRequest) (*DeployServiceReply, error)
	// Delete a service from Core. This function only delete a deployed service in the [Core](../guide/start-here/core.md). If the service's code is on your computer, it will not delete its source code.
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceReply, error)
	// List all services already deployed in the [Core](../guide/start-here/core.md).
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	// Get the definition of an already deployed service from its ID.
	GetService(context.Context, *GetServiceRequest) (*GetServiceReply, error)
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_ListenEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenEvent(m, &coreListenEventServer{stream})
}

type Core_ListenEventServer interface {
	Send(*EventData) error
	grpc.ServerStream
}

type coreListenEventServer struct {
	grpc.ServerStream
}

func (x *coreListenEventServer) Send(m *EventData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ListenResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenResult(m, &coreListenResultServer{stream})
}

type Core_ListenResultServer interface {
	Send(*ResultData) error
	grpc.ServerStream
}

type coreListenResultServer struct {
	grpc.ServerStream
}

func (x *coreListenResultServer) Send(m *ResultData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StopService(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeployService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeployService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeployService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeployService(ctx, req.(*DeployServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _Core_ExecuteTask_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _Core_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Core_StopService_Handler,
		},
		{
			MethodName: "DeployService",
			Handler:    _Core_DeployService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Core_DeleteService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Core_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Core_GetService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvent",
			Handler:       _Core_ListenEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenResult",
			Handler:       _Core_ListenResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/mesg-foundation/core/api/core/api.proto",
}

func init() { proto.RegisterFile("github.com/mesg-foundation/core/api/core/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x73, 0xd2, 0x40,
	0x14, 0x05, 0xcb, 0xb4, 0xe5, 0x82, 0x16, 0x16, 0x6a, 0x63, 0xc6, 0x71, 0x98, 0x7d, 0x72, 0x1c,
	0x05, 0xa5, 0xf5, 0xc5, 0xb1, 0xd3, 0x11, 0x41, 0xc7, 0xd1, 0x27, 0xe8, 0x93, 0x6f, 0x29, 0xae,
	0x35, 0x36, 0xcd, 0xc6, 0x64, 0x53, 0xe5, 0x0f, 0xf8, 0x17, 0xfd, 0x3b, 0xce, 0xdd, 0xdd, 0x24,
	0x1b, 0x36, 0xd3, 0xc2, 0x13, 0xe4, 0x7e, 0x9c, 0x73, 0xee, 0xcd, 0xd9, 0x0d, 0x8c, 0x2f, 0x7d,
	0xf1, 0x23, 0xbd, 0x18, 0x2e, 0xf9, 0xf5, 0xe8, 0x9a, 0x25, 0x97, 0x2f, 0xbe, 0xf3, 0x34, 0xfc,
	0xe6, 0x09, 0x9f, 0x87, 0xa3, 0x25, 0x8f, 0xd9, 0xc8, 0x8b, 0xfc, 0xfc, 0xcf, 0x30, 0x8a, 0xb9,
	0xe0, 0x64, 0xc7, 0x8b, 0x7c, 0xf7, 0xf5, 0x5d, 0x8d, 0x09, 0x8b, 0x6f, 0xfc, 0x65, 0xfe, 0xab,
	0x7a, 0xe9, 0x39, 0x90, 0x2f, 0x7e, 0x22, 0x58, 0x38, 0xbb, 0x61, 0xa1, 0x98, 0xb3, 0x5f, 0x29,
	0x4b, 0x04, 0x79, 0x0c, 0x4d, 0x5d, 0xf6, 0x69, 0xea, 0xd4, 0x07, 0xf5, 0xa7, 0xcd, 0x79, 0x11,
	0x20, 0x03, 0x68, 0x31, 0xac, 0xfe, 0xe0, 0x07, 0x82, 0xc5, 0xce, 0x3d, 0x99, 0x37, 0x43, 0x74,
	0x06, 0x4d, 0x89, 0x37, 0xf5, 0x84, 0x47, 0x5c, 0xd8, 0x97, 0xb9, 0xcf, 0x6c, 0xa5, 0xb1, 0xf2,
	0x67, 0x24, 0x62, 0x59, 0xa1, 0x06, 0x2a, 0x02, 0xf4, 0x37, 0xf4, 0x94, 0xb8, 0x39, 0x4b, 0xd2,
	0x60, 0x43, 0x75, 0x4f, 0x00, 0x84, 0x97, 0x5c, 0x95, 0xc4, 0x19, 0x11, 0x42, 0xa1, 0xcd, 0x53,
	0x11, 0xa5, 0x99, 0xfc, 0x1d, 0x59, 0x51, 0x8a, 0xd1, 0xbf, 0x75, 0x00, 0xc5, 0x29, 0x27, 0xc0,
	0x81, 0xff, 0xb0, 0x65, 0x8a, 0xcb, 0xcc, 0x29, 0xcd, 0x10, 0x71, 0x60, 0x0f, 0x29, 0x70, 0x44,
	0xc5, 0x98, 0x3d, 0xa2, 0x58, 0x05, 0x8d, 0x39, 0xc5, 0x55, 0x04, 0x50, 0xac, 0x7a, 0x90, 0x0b,
	0x68, 0x28, 0xb1, 0x45, 0x84, 0xfe, 0x04, 0x32, 0x93, 0x34, 0xec, 0xdc, 0x4b, 0xae, 0x36, 0x5b,
	0xc0, 0xad, 0x5a, 0xfc, 0x30, 0x23, 0xd3, 0x5a, 0xf2, 0x00, 0x3d, 0x81, 0x4e, 0x89, 0x2b, 0x0a,
	0x56, 0x77, 0x4f, 0x4e, 0x8f, 0xa1, 0xb7, 0x10, 0x5e, 0x2c, 0x16, 0x8a, 0x7f, 0x23, 0x89, 0xb4,
	0x07, 0xdd, 0x72, 0x53, 0x14, 0xac, 0xe8, 0x18, 0xc8, 0x42, 0xf0, 0x68, 0x2b, 0x20, 0x02, 0x9d,
	0x52, 0x0f, 0xe2, 0x4c, 0xa0, 0x3f, 0x65, 0x51, 0xc0, 0x57, 0x6b, 0x48, 0xcf, 0x60, 0x4f, 0x37,
	0x4a, 0x9c, 0xd6, 0xb8, 0x33, 0xcc, 0xce, 0x42, 0x56, 0x99, 0x15, 0xa0, 0x96, 0x35, 0x0c, 0xdc,
	0xc6, 0xed, 0x5a, 0x4e, 0x90, 0x37, 0x60, 0x82, 0x6d, 0x35, 0x41, 0x1f, 0x99, 0x4a, 0x5d, 0x38,
	0xc3, 0xa1, 0x72, 0xbe, 0x8e, 0x25, 0x1a, 0x8a, 0xbe, 0x83, 0x6e, 0x39, 0x8c, 0xaa, 0x9e, 0xc3,
	0xbe, 0x86, 0x4b, 0x9c, 0xfa, 0x60, 0xa7, 0x72, 0xb0, 0xbc, 0x82, 0xbe, 0x82, 0xee, 0x47, 0xb6,
	0xdd, 0xdb, 0x3a, 0x85, 0x03, 0xb3, 0x05, 0x39, 0xb7, 0xd8, 0xe5, 0xf8, 0x5f, 0x03, 0x1a, 0xef,
	0x79, 0xcc, 0xc8, 0x1b, 0x68, 0x19, 0x77, 0x0d, 0x39, 0x1a, 0xe2, 0x15, 0x66, 0xdf, 0x3e, 0xee,
	0x03, 0x99, 0xc8, 0x2f, 0x10, 0x5a, 0x7b, 0x59, 0x27, 0xa7, 0xd0, 0x36, 0xaf, 0x02, 0xe2, 0x18,
	0xcd, 0xa5, 0xdb, 0xc1, 0x3d, 0x90, 0x99, 0xe2, 0xf4, 0xca, 0xf6, 0x33, 0x68, 0x19, 0xde, 0xd6,
	0xd4, 0xf6, 0xc9, 0x72, 0x0f, 0xed, 0x04, 0xbe, 0x8e, 0x1a, 0x99, 0x40, 0xdb, 0x74, 0xac, 0xe6,
	0xaf, 0x70, 0xbe, 0xfb, 0xb0, 0x22, 0xa3, 0x30, 0xce, 0xa0, 0x65, 0x98, 0x55, 0x8b, 0xb0, 0x2d,
	0xaf, 0x45, 0x58, 0xbe, 0xae, 0x91, 0x19, 0xdc, 0x2f, 0xb9, 0x92, 0x3c, 0x92, 0x95, 0x55, 0x6e,
	0x77, 0x8f, 0xaa, 0x52, 0x06, 0x8c, 0x61, 0xb9, 0x1c, 0xc6, 0x36, 0x6f, 0x0e, 0x63, 0x39, 0x54,
	0xae, 0xc4, 0x34, 0xa3, 0xf1, 0x4a, 0xd6, 0x6c, 0xab, 0x57, 0x62, 0x39, 0x97, 0xd6, 0xc8, 0x5b,
	0x80, 0xc2, 0x5a, 0x44, 0xd5, 0x59, 0xf6, 0x74, 0xfb, 0x56, 0x5c, 0x76, 0x4f, 0x76, 0xbf, 0x36,
	0xf0, 0xd3, 0x76, 0xb1, 0x2b, 0xbf, 0x65, 0xc7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x61, 0x2f,
	0x20, 0x7b, 0x3d, 0x07, 0x00, 0x00,
}
