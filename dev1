#!/bin/bash

set -e

DIR=$(pwd)

# Flags
if [[ $* == *--exp* ]]; then
  EXPERIMENTAL_FLAGS+=" --experimental"
fi

# mesg config variables
MESG_NAME=${MESG_NAME:-"engine-1"}
MESG_PATH=${MESG_PATH:-"$HOME/.mesg-1"}
MESG_LOG_FORMAT=${MESG_LOG_FORMAT:-"text"}
MESG_LOG_FORCECOLORS=${MESG_LOG_FORCECOLORS:-"false"}
MESG_LOG_LEVEL=${MESG_LOG_LEVEL:-"debug"}
MESG_SERVER_PORT=${MESG_SERVER_PORT:-"50053"}

 # network to connect multiple engine instances
TENDERMINT_NETWORK="mesg-tendermint"
TENDERMINT_HOME_CONFIG="$MESG_PATH/tendermint"
TENDERMINT_NETWORK_ALIAS=${TENDERMINT_NETWORK_ALIAS:-$MESG_NAME}
TENDERMINT_VALIDATOR_NAME=${TENDERMINT_VALIDATOR_NAME:-"validator1"}
TENDERMINT_VALIDATOR_PORT=${TENDERMINT_VALIDATOR_PORT:-"26657"}
TENDERMINT_VALIDATOR_PATH=${TENDERMINT_VALIDATOR_PATH:-".tendermint-validator"}

MESG_COSMOS_HOME_CONFIG="$MESG_PATH/cosmos"
MESG_COSMOS_CHAINID=${MESG_COSMOS_CHAINID:-"mesg-chain"}
MESG_COSMOS_GENESISACCOUNT_NAME=${MESG_COSMOS_GENESISACCOUNT_NAME:-"bob"}
MESG_COSMOS_GENESISACCOUNT_PASSWORD=${MESG_COSMOS_GENESISACCOUNT_PASSWORD:-"pass"}
MESG_COSMOS_KEYBASE_PATH=${MESG_COSMOS_KEYBASE_PATH:-".cosmos-keybase"}
MESG_COSMOS_GENESISTIME=${MESG_COSMOS_GENESISTIME:-"2019-01-01T00:00:00Z"}

# # Init and read validator identity
# eval $(go run internal/tools/gen_cosmos_account/main.go -name=$MESG_COSMOS_GENESISACCOUNT_NAME -password=$MESG_COSMOS_GENESISACCOUNT_PASSWORD -kbpath=$MESG_COSMOS_KEYBASE_PATH)
# echo "Created genenis account mnemonic (if created): $MESG_COSMOS_ACCOUNT_MNEMONIC"
# go run internal/tools/gen_cosmos_account/main.go -name=alice -password=pass -kbpath=$MESG_COSMOS_KEYBASE_PATH
# go run internal/tools/gen_cosmos_account/main.go -name=acc1 -password=acc1 -kbpath=$MESG_COSMOS_KEYBASE_PATH
# go run internal/tools/gen_cosmos_account/main.go -name=acc2 -password=acc2 -kbpath=$MESG_COSMOS_KEYBASE_PATH
# go run internal/tools/gen_cosmos_account/main.go -name=acc3 -password=acc3 -kbpath=$MESG_COSMOS_KEYBASE_PATH
# go run internal/tools/gen_cosmos_account/main.go -name=acc4 -password=acc4 -kbpath=$MESG_COSMOS_KEYBASE_PATH

# eval $(go run internal/tools/gen_tm_identity/main.go -name=$TENDERMINT_VALIDATOR_NAME -port=$TENDERMINT_VALIDATOR_PORT -path=$TENDERMINT_VALIDATOR_PATH)

# eval $(go run internal/tools/gen_genesis_validator/main.go -name=$MESG_COSMOS_GENESISACCOUNT_NAME -password=$MESG_COSMOS_GENESISACCOUNT_PASSWORD -kbpath=$MESG_COSMOS_KEYBASE_PATH --chain-id $MESG_COSMOS_CHAINID --pubkey $MESG_COSMOS_VALIDATORPUBKEY)

MESG_COSMOS_ACCOUNT_PUBKEY=029D2E02C34B4C8E93D5AEEB9EC7D93B1751E5270F31B3AD736FD7317980986ADD
MESG_COSMOS_ACCOUNT_ADDRESS=cosmos1swn28qef4uqdwlnk0ppwmm0f8k05gl4n6djd87
MESG_COSMOS_ACCOUNT_MNEMONIC="crime people culture enforce report tooth phone oppose allow pepper noodle color walk major tissue pond fiction fatigue where embody settle mom child people"
NODE_PUBKEY=8b30dd61a0dc6ccf95fc8a12b26923bfa56715f4@localhost:26656
VALIDATOR_PUBKEY=A4B44AB8BDB77ADC8ACE797EC155053275ED06C0A33754AD101AAFADD7C1CF20
MESG_COSMOS_GENESISVALIDATORTX='{"msg":[{"type":"cosmos-sdk/MsgCreateValidator","value":{"description":{"moniker":"a","identity":"","website":"","details":"init-validator"},"commission":{"rate":"0.000000000000000000","max_rate":"0.000000000000000000","max_change_rate":"0.000000000000000000"},"min_self_delegation":"1","delegator_address":"cosmos169slhhcr4jadpkk5qx3gw6zu470eky4jt4uzcd","validator_address":"cosmosvaloper169slhhcr4jadpkk5qx3gw6zu470eky4jwpgh57","pubkey":"cosmosvalconspub1zcjduepq82ugmj8wvw3ccs7hjznt2uqrnfk52rwaqj67340a2nlhtl0q80mqzulfs8","value":{"denom":"stake","amount":"100000000"}}},{"type":"cosmos-sdk/MsgCreateValidator","value":{"description":{"moniker":"b","identity":"","website":"","details":"init-validator"},"commission":{"rate":"0.000000000000000000","max_rate":"0.000000000000000000","max_change_rate":"0.000000000000000000"},"min_self_delegation":"1","delegator_address":"cosmos1swn28qef4uqdwlnk0ppwmm0f8k05gl4n6djd87","validator_address":"cosmosvaloper1swn28qef4uqdwlnk0ppwmm0f8k05gl4nlexctd","pubkey":"cosmosvalconspub1zcjduepq5j6y4w9akaadezkw09lvz4g9xf676pkq5vm4ftgsr2h6m47peusqu4zzd2","value":{"denom":"stake","amount":"100000000"}}}],"fee":{"amount":[],"gas":"200000"},"signatures":[{"pub_key":{"type":"tendermint/PubKeySecp256k1","value":"Aur3hYqjGQ59nfyrZ3QqTHUig3kzNwuZZawscxhCrfMK"},"signature":"VPdqQeeWXE3DgMDfRswst+BOkH3GU+hUgJ963re3Y4A3e5CVSwfNfR5OfhDOWhkl4zE11ZX1zaU7FcyjiioHMQ=="},{"pub_key":{"type":"tendermint/PubKeySecp256k1","value":"Ap0uAsNLTI6T1a7rnsfZOxdR5ScPMbOtc2/XMXmAmGrd"},"signature":"Fpnj+4npPFvf1gaYtnLwB+USBhrSUoLTYUXuYliZ0bRslKKjcguySo7ck2jlm1a11s4lC7KsUviex8zX5EEWFw=="}],"memo":""}'


MESG_COSMOS_VALIDATORPUBKEY=${MESG_COSMOS_VALIDATORPUBKEY:-$VALIDATOR_PUBKEY}
MESG_TENDERMINT_P2P_PERSISTENTPEERS=${MESG_TENDERMINT_P2P_PERSISTENTPEERS:-$NODE_PUBKEY}


# Setup the validator private keys
if [[ $* == *--validator* ]]; then
  echo "Validator flag passed. Copy validator private keys to $TENDERMINT_HOME_CONFIG"
  mkdir -p $TENDERMINT_HOME_CONFIG
  rsync -a $TENDERMINT_VALIDATOR_PATH/ $TENDERMINT_HOME_CONFIG
  TENDERMINT_NETWORK_ALIAS=$TENDERMINT_VALIDATOR_NAME
  TENDERMINT_VALIDATOR_PORT_PUBLISH="--publish $TENDERMINT_VALIDATOR_PORT:$TENDERMINT_VALIDATOR_PORT"
fi

if [[ $* == *--genesis_validator ]]; then
  echo "Genesis validator flag passed. Copy genesis account private keys to $MESG_COSMOS_HOME_CONFIG"
  mkdir -p $MESG_COSMOS_HOME_CONFIG
  rsync -a $MESG_COSMOS_KEYBASE_PATH/ $MESG_COSMOS_HOME_CONFIG
fi

VERSION=local
LDFLAGS="-X 'github.com/mesg-foundation/engine/version.Version=$VERSION'"

function onexit {
  set +e
  echo -e "\nshutting down, please wait..."
  docker_service_remove "$MESG_NAME"
  docker_network_remove "$MESG_NAME"
  docker_network_remove "$TENDERMINT_NETWORK"
}

function docker_service_remove {
  docker service rm $1
  docker wait $(docker ps -f label=com.docker.swarm.service.name=$1 -q) 2> /dev/null
}

function docker_network_exist {
  [[ ! -z $(docker network list -f name="$1" -f driver=overlay -q) ]]
}

function docker_network_create {
  echo -ne "create docker network $1: "
  docker network create --driver overlay "$1" --label com.docker.stack.namespace="$1"
}

function docker_network_remove {
  echo -ne "remove docker network: "
  docker network remove "$1"
}

echo "compile engine"
GOOS=linux GOARCH=amd64 go build -o ./bin/engine -ldflags="$LDFLAGS" core/main.go

ENGINE_SUM_PATH="./bin/.engine.sum"
touch "$ENGINE_SUM_PATH"

DOCKER_SUM_PATH="./bin/.Dockerfile.dev.sum"
touch "$DOCKER_SUM_PATH"

# check if engine bin was cached
ENGINE_SUM="$(openssl md5 ./bin/engine)"
ENGINE_SUM_PREV="$(cat $ENGINE_SUM_PATH)"
if [[ "$ENGINE_SUM" == "$ENGINE_SUM_PREV" ]]; then
  BINCACHED=true
else
  echo "$ENGINE_SUM" > "$ENGINE_SUM_PATH"
fi

# check if dockerfile was cached
DOCKER_SUM="$(openssl md5 ./Dockerfile.dev)"
DOCKER_SUM_PREV="$(cat $DOCKER_SUM_PATH)"
if [[ "$DOCKER_SUM" == "$DOCKER_SUM_PREV" ]]; then
  DOCKERCACHED=true
else
  echo "$DOCKER_SUM" > "$DOCKER_SUM_PATH"
fi

# create mesg data folder on host machine
mkdir -p $MESG_PATH

if [[ ! $BINCACHED ]] || [[ ! $DOCKERCACHED ]]; then
  echo "build mesg/engine image"
  docker build -f Dockerfile.dev -t "mesg/engine:$VERSION" .
fi


trap onexit EXIT

if ! docker_network_exist "$MESG_NAME"; then
  docker_network_create "$MESG_NAME"
fi

if ! docker_network_exist "$TENDERMINT_NETWORK"; then
  docker_network_create "$TENDERMINT_NETWORK"
fi



echo "create docker service: "
docker service create \
  --name $MESG_NAME \
  --tty \
  --label com.docker.stack.namespace=$MESG_NAME \
  --label com.docker.stack.image=mesg/engine:$VERSION \
  --env MESG_NAME=$MESG_NAME \
  --env MESG_LOG_FORMAT=$MESG_LOG_FORMAT \
  --env MESG_LOG_FORCECOLORS=$MESG_LOG_FORCECOLORS \
  --env MESG_LOG_LEVEL=$MESG_LOG_LEVEL \
  --env MESG_TENDERMINT_P2P_PERSISTENTPEERS=$MESG_TENDERMINT_P2P_PERSISTENTPEERS \
  --env MESG_TENDERMINT_P2P_EXTERNALADDRESS=$MESG_TENDERMINT_P2P_EXTERNALADDRESS \
  --env MESG_COSMOS_CHAINID=$MESG_COSMOS_CHAINID \
  --env MESG_COSMOS_VALIDATORPUBKEY=$MESG_COSMOS_VALIDATORPUBKEY \
  --env MESG_COSMOS_GENESISVALIDATORTX=$MESG_COSMOS_GENESISVALIDATORTX \
  --env MESG_COSMOS_GENESISTIME=$MESG_COSMOS_GENESISTIME \
  --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
  --mount type=bind,source=$MESG_PATH,destination=/root/.mesg \
  --network $MESG_NAME \
  --network name=$TENDERMINT_NETWORK,alias=$TENDERMINT_NETWORK_ALIAS \
  --publish $MESG_SERVER_PORT:50052 \
  $TENDERMINT_VALIDATOR_PORT_PUBLISH \
  mesg/engine:$VERSION ./engine $EXPERIMENTAL_FLAGS

docker service logs --follow --raw $MESG_NAME
