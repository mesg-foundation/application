// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/api_service.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StartServiceRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *StartServiceRequest) Reset()                    { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()               {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *StartServiceRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

type StopServiceRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *StopServiceRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

type ServiceReply struct {
}

func (m *ServiceReply) Reset()                    { *m = ServiceReply{} }
func (m *ServiceReply) String() string            { return proto.CompactTextString(m) }
func (*ServiceReply) ProtoMessage()               {}
func (*ServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*StartServiceRequest)(nil), "types.StartServiceRequest")
	proto.RegisterType((*StopServiceRequest)(nil), "types.StopServiceRequest")
	proto.RegisterType((*ServiceReply)(nil), "types.ServiceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Start(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error)
	Stop(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Start(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error) {
	out := new(ServiceReply)
	err := grpc.Invoke(ctx, "/types.Service/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Stop(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error) {
	out := new(ServiceReply)
	err := grpc.Invoke(ctx, "/types.Service/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Start(context.Context, *StartServiceRequest) (*ServiceReply, error)
	Stop(context.Context, *StopServiceRequest) (*ServiceReply, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Service/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Start(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Service/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Stop(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Service_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Service_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/api_service.proto",
}

func init() { proto.RegisterFile("types/api_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x4f, 0x2c, 0xc8, 0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x4b, 0x48, 0x09, 0x43, 0xe4, 0x51, 0xe4, 0x94, 0x5c, 0xb8,
	0x84, 0x83, 0x4b, 0x12, 0x8b, 0x4a, 0x82, 0x21, 0xa2, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0xba, 0x5c, 0xec, 0x50, 0x75, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xc2, 0x7a, 0x60,
	0xdd, 0x7a, 0x01, 0x20, 0x5d, 0x30, 0xc5, 0x30, 0x35, 0x4a, 0xce, 0x5c, 0x42, 0xc1, 0x25, 0xf9,
	0x05, 0x94, 0x19, 0xc2, 0xc7, 0xc5, 0x03, 0x37, 0xa0, 0x20, 0xa7, 0xd2, 0xa8, 0x9e, 0x8b, 0x1d,
	0xca, 0x17, 0xb2, 0xe2, 0x62, 0x05, 0xbb, 0x52, 0x48, 0x0a, 0x6a, 0x02, 0x16, 0x37, 0x4b, 0xc1,
	0x4c, 0x47, 0x36, 0x44, 0x89, 0x41, 0xc8, 0x82, 0x8b, 0x05, 0xe4, 0x36, 0x21, 0x49, 0xb8, 0x56,
	0x74, 0x87, 0xe2, 0xd0, 0x99, 0xc4, 0x06, 0x0e, 0x22, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0x6c, 0xe2, 0xaa, 0x59, 0x01, 0x00, 0x00,
}
