// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api_result.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubmitResultRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Task    string        `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	Output  string        `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	Data    string        `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *SubmitResultRequest) Reset()                    { *m = SubmitResultRequest{} }
func (m *SubmitResultRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitResultRequest) ProtoMessage()               {}
func (*SubmitResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SubmitResultRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *SubmitResultRequest) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

func (m *SubmitResultRequest) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *SubmitResultRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ListenResultRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *ListenResultRequest) Reset()                    { *m = ListenResultRequest{} }
func (m *ListenResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenResultRequest) ProtoMessage()               {}
func (*ListenResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListenResultRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

type ResultReply struct {
	Error  string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Task   string `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	Output string `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	Data   string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *ResultReply) Reset()                    { *m = ResultReply{} }
func (m *ResultReply) String() string            { return proto.CompactTextString(m) }
func (*ResultReply) ProtoMessage()               {}
func (*ResultReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ResultReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResultReply) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

func (m *ResultReply) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ResultReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*SubmitResultRequest)(nil), "types.SubmitResultRequest")
	proto.RegisterType((*ListenResultRequest)(nil), "types.ListenResultRequest")
	proto.RegisterType((*ResultReply)(nil), "types.ResultReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Result service

type ResultClient interface {
	// Service
	Submit(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*ResultReply, error)
	// Application
	Listen(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Result_ListenClient, error)
}

type resultClient struct {
	cc *grpc.ClientConn
}

func NewResultClient(cc *grpc.ClientConn) ResultClient {
	return &resultClient{cc}
}

func (c *resultClient) Submit(ctx context.Context, in *SubmitResultRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := grpc.Invoke(ctx, "/types.Result/Submit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultClient) Listen(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Result_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Result_serviceDesc.Streams[0], c.cc, "/types.Result/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &resultListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Result_ListenClient interface {
	Recv() (*ResultReply, error)
	grpc.ClientStream
}

type resultListenClient struct {
	grpc.ClientStream
}

func (x *resultListenClient) Recv() (*ResultReply, error) {
	m := new(ResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Result service

type ResultServer interface {
	// Service
	Submit(context.Context, *SubmitResultRequest) (*ResultReply, error)
	// Application
	Listen(*ListenResultRequest, Result_ListenServer) error
}

func RegisterResultServer(s *grpc.Server, srv ResultServer) {
	s.RegisterService(&_Result_serviceDesc, srv)
}

func _Result_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Result/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServer).Submit(ctx, req.(*SubmitResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Result_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResultServer).Listen(m, &resultListenServer{stream})
}

type Result_ListenServer interface {
	Send(*ResultReply) error
	grpc.ServerStream
}

type resultListenServer struct {
	grpc.ServerStream
}

func (x *resultListenServer) Send(m *ResultReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Result_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Result",
	HandlerType: (*ResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Result_Submit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Result_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api_result.proto",
}

func init() { proto.RegisterFile("api_result.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x3f, 0x4b, 0x43, 0x31,
	0x14, 0xc5, 0x8d, 0xb6, 0x91, 0xde, 0x22, 0xc8, 0x7d, 0x22, 0x8f, 0x37, 0x95, 0x4c, 0x5d, 0x7c,
	0x48, 0xdd, 0xc4, 0xd1, 0xd1, 0x41, 0xd2, 0x0f, 0x20, 0x69, 0xbd, 0x43, 0xb0, 0x9a, 0x98, 0xdc,
	0x08, 0x5d, 0xc5, 0x0f, 0x2e, 0x2f, 0x49, 0xc5, 0xe1, 0x6d, 0xdd, 0xee, 0x9f, 0xf3, 0x23, 0x27,
	0xe7, 0xc2, 0xa5, 0xf1, 0xf6, 0x25, 0x50, 0x4c, 0x3b, 0xee, 0x7d, 0x70, 0xec, 0x70, 0xca, 0x7b,
	0x4f, 0xb1, 0xbb, 0x88, 0x14, 0xbe, 0xec, 0x96, 0xca, 0x54, 0xfd, 0x08, 0x68, 0xd6, 0x69, 0xf3,
	0x6e, 0x59, 0x67, 0xb1, 0xa6, 0xcf, 0x44, 0x91, 0xf1, 0x06, 0xce, 0xab, 0xb0, 0x15, 0x0b, 0xb1,
	0x9c, 0xaf, 0x9a, 0x3e, 0xf3, 0xfd, 0xf3, 0x80, 0xad, 0xcb, 0x4a, 0x1f, 0x34, 0x88, 0x30, 0x61,
	0x13, 0xdf, 0xda, 0xd3, 0x85, 0x58, 0xce, 0x74, 0xae, 0xf1, 0x1a, 0xa4, 0x4b, 0xec, 0x13, 0xb7,
	0x67, 0x79, 0x5a, 0xbb, 0x41, 0xfb, 0x6a, 0xd8, 0xb4, 0x93, 0xa2, 0x1d, 0x6a, 0xf5, 0x08, 0xcd,
	0x93, 0x8d, 0x4c, 0x1f, 0xc7, 0xb8, 0x50, 0x5b, 0x98, 0x1f, 0x78, 0xbf, 0xdb, 0xe3, 0x15, 0x4c,
	0x29, 0x04, 0x17, 0x32, 0x3b, 0xd3, 0xa5, 0x39, 0xd6, 0xea, 0xea, 0x5b, 0x80, 0x2c, 0xaf, 0xe0,
	0x3d, 0xc8, 0x92, 0x1d, 0x76, 0xd5, 0xd7, 0x48, 0x94, 0x1d, 0xd6, 0xdd, 0x3f, 0x6b, 0xea, 0x04,
	0x1f, 0x40, 0x96, 0x1f, 0xff, 0xb1, 0x23, 0x01, 0x8c, 0xb3, 0xb7, 0x62, 0x23, 0xf3, 0xf5, 0xee,
	0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x8b, 0x28, 0x97, 0xe7, 0x01, 0x00, 0x00,
}
