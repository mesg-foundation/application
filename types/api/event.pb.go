// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/api/event.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types/api/event.proto
	types/api/service.proto
	types/api/task.proto
	types/service.proto

It has these top-level messages:
	EmitEventRequest
	ListenEventRequest
	EventReply
	StartServiceRequest
	StopServiceRequest
	ServiceReply
	ExecuteTaskRequest
	ListenTaskRequest
	TaskReply
	ProtoService
	ProtoTask
	ProtoFee
	ProtoEvent
	ProtoParameter
	ProtoDependency
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmitEventRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Event   string        `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Data    string        `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *EmitEventRequest) Reset()                    { *m = EmitEventRequest{} }
func (m *EmitEventRequest) String() string            { return proto.CompactTextString(m) }
func (*EmitEventRequest) ProtoMessage()               {}
func (*EmitEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EmitEventRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *EmitEventRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EmitEventRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ListenEventRequest struct {
	Service *ProtoService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *ListenEventRequest) Reset()                    { *m = ListenEventRequest{} }
func (m *ListenEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenEventRequest) ProtoMessage()               {}
func (*ListenEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListenEventRequest) GetService() *ProtoService {
	if m != nil {
		return m.Service
	}
	return nil
}

type EventReply struct {
	Event string `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (m *EventReply) String() string            { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventReply) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*EmitEventRequest)(nil), "types.EmitEventRequest")
	proto.RegisterType((*ListenEventRequest)(nil), "types.ListenEventRequest")
	proto.RegisterType((*EventReply)(nil), "types.EventReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Event service

type EventClient interface {
	Emit(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EventReply, error)
	Listen(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Event_ListenClient, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Emit(ctx context.Context, in *EmitEventRequest, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := grpc.Invoke(ctx, "/types.Event/Emit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Listen(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Event_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Event_serviceDesc.Streams[0], c.cc, "/types.Event/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Event_ListenClient interface {
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type eventListenClient struct {
	grpc.ClientStream
}

func (x *eventListenClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Event service

type EventServer interface {
	Emit(context.Context, *EmitEventRequest) (*EventReply, error)
	Listen(*ListenEventRequest, Event_ListenServer) error
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Event/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Emit(ctx, req.(*EmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServer).Listen(m, &eventListenServer{stream})
}

type Event_ListenServer interface {
	Send(*EventReply) error
	grpc.ServerStream
}

type eventListenServer struct {
	grpc.ServerStream
}

func (x *eventListenServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _Event_Emit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Event_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types/api/event.proto",
}

func init() { proto.RegisterFile("types/api/event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x0b, 0x4b, 0x09, 0x43, 0x64, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53,
	0x21, 0x72, 0x4a, 0xd9, 0x5c, 0x02, 0xae, 0xb9, 0x99, 0x25, 0xae, 0x20, 0xe5, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0xba, 0x5c, 0xec, 0x50, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc,
	0x46, 0xc2, 0x7a, 0x60, 0xad, 0x7a, 0x01, 0x20, 0x2d, 0xc1, 0x10, 0xa9, 0x20, 0x98, 0x1a, 0x21,
	0x11, 0x2e, 0x56, 0xb0, 0x6d, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x10,
	0x17, 0x4b, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0x33, 0x58, 0x10, 0xcc, 0x56, 0x72, 0xe6, 0x12, 0xf2,
	0xc9, 0x2c, 0x2e, 0x49, 0xcd, 0xa3, 0xc0, 0x3a, 0x25, 0x33, 0x2e, 0x2e, 0xa8, 0xf6, 0x82, 0x9c,
	0x4a, 0x84, 0xe5, 0x8c, 0xd8, 0x2c, 0x67, 0x42, 0x58, 0x6e, 0x54, 0xc9, 0xc5, 0x0a, 0xd6, 0x27,
	0x64, 0xc2, 0xc5, 0x02, 0xf2, 0xb2, 0x90, 0x38, 0xd4, 0x1a, 0x74, 0xff, 0x4b, 0x09, 0xc2, 0x24,
	0xe0, 0xd6, 0x28, 0x31, 0x08, 0x59, 0x71, 0xb1, 0x41, 0xdc, 0x2e, 0x24, 0x09, 0x95, 0xc6, 0xf4,
	0x0a, 0x56, 0x9d, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0xb0, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x0b, 0x53, 0x6d, 0xa0, 0x01, 0x00, 0x00,
}
