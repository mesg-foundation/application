// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workflow.proto

package workflow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_mesg_foundation_engine_hash "github.com/mesg-foundation/engine/hash"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Type of condition available to compare the values.
type Workflow_Trigger_Filter_Predicate int32

const (
	// Predicate not defined.
	Workflow_Trigger_Filter_Unknown Workflow_Trigger_Filter_Predicate = 0
	// Equal
	Workflow_Trigger_Filter_EQ Workflow_Trigger_Filter_Predicate = 1
)

var Workflow_Trigger_Filter_Predicate_name = map[int32]string{
	0: "Unknown",
	1: "EQ",
}

var Workflow_Trigger_Filter_Predicate_value = map[string]int32{
	"Unknown": 0,
	"EQ":      1,
}

func (x Workflow_Trigger_Filter_Predicate) String() string {
	return proto.EnumName(Workflow_Trigger_Filter_Predicate_name, int32(x))
}

func (Workflow_Trigger_Filter_Predicate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 0, 0, 0}
}

// A workflow is a configuration to trigger a specific task when certains conditions of a trigger are valid.
type Workflow struct {
	// Workflow's hash
	Hash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=hash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"hash" hash:"-" validate:"required"`
	// Workflow's key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" hash:"name:2" validate:"required"`
	// Trigger for the workflow.
	Trigger Workflow_Trigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger" hash:"name:3" validate:"required"`
	// Nodes with information related to the execution to trigger.
	Nodes []*Workflow_Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty" hash:"name:4" validate:"dive,required"`
	// Edges to create the link between the nodes.
	Edges []*Workflow_Edge `protobuf:"bytes,5,rep,name=edges,proto3" json:"edges,omitempty" hash:"name:5" validate:"dive,required"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0}
}
func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return m.Size()
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

// Trigger is the configuration that will trigger a workflow.
type Workflow_Trigger struct {
	// Hash of the instance that triggers the workflow.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,1,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:1" validate:"required"`
	// Workflow can be trigger by either an Event or a Task (not both).
	//
	// Types that are valid to be assigned to Key:
	//	*Workflow_Trigger_TaskKey
	//	*Workflow_Trigger_EventKey
	Key isWorkflow_Trigger_Key `protobuf_oneof:"key"`
	// List of filters to apply on the data of the event/result.
	Filters []*Workflow_Trigger_Filter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty" hash:"name:4" validate:"dive,required"`
	// First node to trigger when the workflow starts.
	NodeKey string `protobuf:"bytes,5,opt,name=nodeKey,proto3" json:"nodeKey,omitempty" hash:"name:5" validate:"required"`
}

func (m *Workflow_Trigger) Reset()         { *m = Workflow_Trigger{} }
func (m *Workflow_Trigger) String() string { return proto.CompactTextString(m) }
func (*Workflow_Trigger) ProtoMessage()    {}
func (*Workflow_Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 0}
}
func (m *Workflow_Trigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Trigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Trigger.Merge(m, src)
}
func (m *Workflow_Trigger) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Trigger proto.InternalMessageInfo

type isWorkflow_Trigger_Key interface {
	isWorkflow_Trigger_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Workflow_Trigger_TaskKey struct {
	TaskKey string `protobuf:"bytes,2,opt,name=taskKey,proto3,oneof"`
}
type Workflow_Trigger_EventKey struct {
	EventKey string `protobuf:"bytes,3,opt,name=eventKey,proto3,oneof"`
}

func (*Workflow_Trigger_TaskKey) isWorkflow_Trigger_Key()  {}
func (*Workflow_Trigger_EventKey) isWorkflow_Trigger_Key() {}

func (m *Workflow_Trigger) GetKey() isWorkflow_Trigger_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Workflow_Trigger) GetTaskKey() string {
	if x, ok := m.GetKey().(*Workflow_Trigger_TaskKey); ok {
		return x.TaskKey
	}
	return ""
}

func (m *Workflow_Trigger) GetEventKey() string {
	if x, ok := m.GetKey().(*Workflow_Trigger_EventKey); ok {
		return x.EventKey
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Workflow_Trigger) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Workflow_Trigger_OneofMarshaler, _Workflow_Trigger_OneofUnmarshaler, _Workflow_Trigger_OneofSizer, []interface{}{
		(*Workflow_Trigger_TaskKey)(nil),
		(*Workflow_Trigger_EventKey)(nil),
	}
}

func _Workflow_Trigger_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Workflow_Trigger)
	// key
	switch x := m.Key.(type) {
	case *Workflow_Trigger_TaskKey:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TaskKey)
	case *Workflow_Trigger_EventKey:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EventKey)
	case nil:
	default:
		return fmt.Errorf("Workflow_Trigger.Key has unexpected type %T", x)
	}
	return nil
}

func _Workflow_Trigger_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Workflow_Trigger)
	switch tag {
	case 2: // key.taskKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &Workflow_Trigger_TaskKey{x}
		return true, err
	case 3: // key.eventKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &Workflow_Trigger_EventKey{x}
		return true, err
	default:
		return false, nil
	}
}

func _Workflow_Trigger_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Workflow_Trigger)
	// key
	switch x := m.Key.(type) {
	case *Workflow_Trigger_TaskKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.TaskKey)))
		n += len(x.TaskKey)
	case *Workflow_Trigger_EventKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.EventKey)))
		n += len(x.EventKey)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Filter is applied on the data of the event/result.
type Workflow_Trigger_Filter struct {
	// Key to check.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" hash:"name:1" validate:"printascii,required"`
	// Type of condition to apply.
	Predicate Workflow_Trigger_Filter_Predicate `protobuf:"varint,2,opt,name=predicate,proto3,enum=types.Workflow_Trigger_Filter_Predicate" json:"predicate,omitempty" hash:"name:2" validate:"required"`
	// Value of the filter.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" hash:"name:3" validate:"required"`
}

func (m *Workflow_Trigger_Filter) Reset()         { *m = Workflow_Trigger_Filter{} }
func (m *Workflow_Trigger_Filter) String() string { return proto.CompactTextString(m) }
func (*Workflow_Trigger_Filter) ProtoMessage()    {}
func (*Workflow_Trigger_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 0, 0}
}
func (m *Workflow_Trigger_Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Trigger_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Trigger_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Trigger_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Trigger_Filter.Merge(m, src)
}
func (m *Workflow_Trigger_Filter) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Trigger_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Trigger_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Trigger_Filter proto.InternalMessageInfo

// Definition of the node to execute when the workflow is triggered.
type Workflow_Node struct {
	// Key that identifies the node.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" hash:"name:1" validate:"required"`
	// Hash of the instance to execute.
	InstanceHash github_com_mesg_foundation_engine_hash.Hash `protobuf:"bytes,2,opt,name=instanceHash,proto3,customtype=github.com/mesg-foundation/engine/hash.Hash" json:"instanceHash" hash:"name:2" validate:"required"`
	// Task of the instance to execute.
	TaskKey string `protobuf:"bytes,3,opt,name=taskKey,proto3" json:"taskKey,omitempty" hash:"name:3" validate:"required,printascii"`
}

func (m *Workflow_Node) Reset()         { *m = Workflow_Node{} }
func (m *Workflow_Node) String() string { return proto.CompactTextString(m) }
func (*Workflow_Node) ProtoMessage()    {}
func (*Workflow_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 1}
}
func (m *Workflow_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Node.Merge(m, src)
}
func (m *Workflow_Node) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Node proto.InternalMessageInfo

type Workflow_Edge struct {
	// Source of the edge.
	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty" hash:"name:1" validate:"required"`
	// Destination of the edge.
	Dst string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty" hash:"name:2" validate:"required"`
	// Inputs for the destination task.
	Inputs []*Workflow_Edge_Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty" hash:"name:3" validate:"dive,required"`
}

func (m *Workflow_Edge) Reset()         { *m = Workflow_Edge{} }
func (m *Workflow_Edge) String() string { return proto.CompactTextString(m) }
func (*Workflow_Edge) ProtoMessage()    {}
func (*Workflow_Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 2}
}
func (m *Workflow_Edge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Edge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Edge.Merge(m, src)
}
func (m *Workflow_Edge) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Edge proto.InternalMessageInfo

type Workflow_Edge_Input struct {
	// Key of the input (as defined in the the service's task definition).
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" hash:"name:1" validate:"required"`
	// Types that are valid to be assigned to Value:
	//	*Workflow_Edge_Input_Ref
	Value isWorkflow_Edge_Input_Value `protobuf_oneof:"value"`
}

func (m *Workflow_Edge_Input) Reset()         { *m = Workflow_Edge_Input{} }
func (m *Workflow_Edge_Input) String() string { return proto.CompactTextString(m) }
func (*Workflow_Edge_Input) ProtoMessage()    {}
func (*Workflow_Edge_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 2, 0}
}
func (m *Workflow_Edge_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Edge_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Edge_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Edge_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Edge_Input.Merge(m, src)
}
func (m *Workflow_Edge_Input) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Edge_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Edge_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Edge_Input proto.InternalMessageInfo

type isWorkflow_Edge_Input_Value interface {
	isWorkflow_Edge_Input_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Workflow_Edge_Input_Ref struct {
	Ref *Workflow_Edge_Input_Reference `protobuf:"bytes,2,opt,name=ref,proto3,oneof"`
}

func (*Workflow_Edge_Input_Ref) isWorkflow_Edge_Input_Value() {}

func (m *Workflow_Edge_Input) GetValue() isWorkflow_Edge_Input_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Workflow_Edge_Input) GetRef() *Workflow_Edge_Input_Reference {
	if x, ok := m.GetValue().(*Workflow_Edge_Input_Ref); ok {
		return x.Ref
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Workflow_Edge_Input) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Workflow_Edge_Input_OneofMarshaler, _Workflow_Edge_Input_OneofUnmarshaler, _Workflow_Edge_Input_OneofSizer, []interface{}{
		(*Workflow_Edge_Input_Ref)(nil),
	}
}

func _Workflow_Edge_Input_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Workflow_Edge_Input)
	// value
	switch x := m.Value.(type) {
	case *Workflow_Edge_Input_Ref:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ref); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Workflow_Edge_Input.Value has unexpected type %T", x)
	}
	return nil
}

func _Workflow_Edge_Input_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Workflow_Edge_Input)
	switch tag {
	case 2: // value.ref
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Workflow_Edge_Input_Reference)
		err := b.DecodeMessage(msg)
		m.Value = &Workflow_Edge_Input_Ref{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Workflow_Edge_Input_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Workflow_Edge_Input)
	// value
	switch x := m.Value.(type) {
	case *Workflow_Edge_Input_Ref:
		s := proto.Size(x.Ref)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Workflow_Edge_Input_Reference struct {
	// Key of the node in the graph. If empty, will be using the src of the edge.
	NodeKey string `protobuf:"bytes,1,opt,name=nodeKey,proto3" json:"nodeKey,omitempty" hash:"name:1" validate:"required"`
	// Key of a specific parameter of the referenced node's output data.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" hash:"name:2" validate:"required"`
}

func (m *Workflow_Edge_Input_Reference) Reset()         { *m = Workflow_Edge_Input_Reference{} }
func (m *Workflow_Edge_Input_Reference) String() string { return proto.CompactTextString(m) }
func (*Workflow_Edge_Input_Reference) ProtoMessage()    {}
func (*Workflow_Edge_Input_Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_892c7f566756b0be, []int{0, 2, 0, 0}
}
func (m *Workflow_Edge_Input_Reference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workflow_Edge_Input_Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workflow_Edge_Input_Reference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workflow_Edge_Input_Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow_Edge_Input_Reference.Merge(m, src)
}
func (m *Workflow_Edge_Input_Reference) XXX_Size() int {
	return m.Size()
}
func (m *Workflow_Edge_Input_Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow_Edge_Input_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow_Edge_Input_Reference proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.Workflow_Trigger_Filter_Predicate", Workflow_Trigger_Filter_Predicate_name, Workflow_Trigger_Filter_Predicate_value)
	proto.RegisterType((*Workflow)(nil), "types.Workflow")
	proto.RegisterType((*Workflow_Trigger)(nil), "types.Workflow.Trigger")
	proto.RegisterType((*Workflow_Trigger_Filter)(nil), "types.Workflow.Trigger.Filter")
	proto.RegisterType((*Workflow_Node)(nil), "types.Workflow.Node")
	proto.RegisterType((*Workflow_Edge)(nil), "types.Workflow.Edge")
	proto.RegisterType((*Workflow_Edge_Input)(nil), "types.Workflow.Edge.Input")
	proto.RegisterType((*Workflow_Edge_Input_Reference)(nil), "types.Workflow.Edge.Input.Reference")
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor_892c7f566756b0be) }

var fileDescriptor_892c7f566756b0be = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x5d, 0x6b, 0xd3, 0x5e,
	0x1c, 0xc7, 0x93, 0x3e, 0xae, 0xa7, 0x63, 0xff, 0x11, 0xfe, 0x60, 0x09, 0x92, 0xd4, 0xe0, 0xa4,
	0xce, 0x2e, 0x75, 0x9d, 0x43, 0x98, 0x88, 0x18, 0xe8, 0xa8, 0x0e, 0x44, 0xeb, 0x7c, 0x40, 0xc4,
	0x91, 0x26, 0xa7, 0xe9, 0xa1, 0xed, 0x49, 0x4d, 0x4e, 0x5b, 0x06, 0xde, 0x7a, 0xe1, 0x85, 0xe0,
	0xb5, 0xbe, 0x0b, 0x5f, 0xc5, 0x2e, 0x77, 0x29, 0x5e, 0x04, 0xdd, 0xde, 0x41, 0xf1, 0x05, 0xc8,
	0x39, 0x69, 0xda, 0xae, 0x4b, 0xbb, 0x76, 0x78, 0xd7, 0x93, 0x9e, 0xef, 0xe7, 0x77, 0x7e, 0x0f,
	0xdf, 0x93, 0x80, 0x95, 0x9e, 0xed, 0x34, 0x6a, 0x4d, 0xbb, 0xa7, 0xb6, 0x1d, 0x9b, 0xd8, 0x42,
	0x9c, 0x1c, 0xb6, 0xa1, 0x2b, 0x2a, 0x96, 0x6d, 0xd9, 0x05, 0xf6, 0xa8, 0xda, 0xa9, 0x15, 0xe8,
	0x8a, 0x2d, 0xd8, 0x2f, 0x7f, 0xab, 0xf2, 0xe7, 0x3f, 0xb0, 0xf4, 0x6a, 0xa0, 0x16, 0x2c, 0x10,
	0xab, 0xeb, 0x6e, 0x3d, 0xc3, 0x67, 0xf9, 0xdc, 0xb2, 0xf6, 0xfc, 0xc8, 0x93, 0xb9, 0x9f, 0x9e,
	0x7c, 0xcb, 0x42, 0xa4, 0xde, 0xa9, 0xaa, 0x86, 0xdd, 0x2a, 0xb4, 0xa0, 0x6b, 0x6d, 0xd4, 0xec,
	0x0e, 0x36, 0x75, 0x82, 0x6c, 0x5c, 0x80, 0xd8, 0x42, 0x18, 0x16, 0xa8, 0x4a, 0x2d, 0xeb, 0x6e,
	0xbd, 0xef, 0xc9, 0x57, 0xe9, 0x62, 0x47, 0xd9, 0x50, 0xb2, 0x5d, 0xbd, 0x89, 0x4c, 0x9d, 0xc0,
	0x1d, 0xc5, 0x81, 0xef, 0x3b, 0xc8, 0x81, 0xa6, 0x52, 0x61, 0x01, 0x84, 0xbb, 0x20, 0xda, 0x80,
	0x87, 0x99, 0x48, 0x96, 0xcf, 0xa5, 0xb4, 0xb5, 0xbe, 0x27, 0x5f, 0xf3, 0x45, 0x58, 0x6f, 0xc1,
	0x9d, 0x62, 0xb8, 0x92, 0x2a, 0x84, 0xb7, 0x20, 0x49, 0x1c, 0x64, 0x59, 0xd0, 0xc9, 0x44, 0xb3,
	0x7c, 0x2e, 0x5d, 0xbc, 0xa2, 0xb2, 0x5c, 0xd5, 0x20, 0x07, 0x75, 0xdf, 0xff, 0x5b, 0xbb, 0x49,
	0x4f, 0x3f, 0x41, 0xde, 0x0a, 0x27, 0x07, 0x48, 0xe1, 0x25, 0x88, 0x63, 0xdb, 0x84, 0x6e, 0x26,
	0x96, 0x8d, 0xe6, 0xd2, 0xc5, 0xff, 0x27, 0xd9, 0x4f, 0x6c, 0x13, 0x6a, 0xeb, 0x7d, 0x4f, 0xbe,
	0x31, 0x06, 0xbd, 0x33, 0x0e, 0x35, 0x51, 0x17, 0xe6, 0x47, 0x64, 0x1f, 0x47, 0xb9, 0xd0, 0xb4,
	0xa0, 0x9b, 0x89, 0x87, 0x73, 0x4b, 0xa6, 0x75, 0x9e, 0xbb, 0x3d, 0x8b, 0xcb, 0x70, 0xe2, 0xb7,
	0x04, 0x48, 0x0e, 0xf2, 0x15, 0x3e, 0x80, 0x65, 0x84, 0x5d, 0xa2, 0x63, 0x03, 0x96, 0x47, 0x3d,
	0x7c, 0x7d, 0xb9, 0x1e, 0x8e, 0x17, 0x6d, 0x33, 0xbc, 0x68, 0x67, 0xa2, 0x09, 0x55, 0x90, 0x24,
	0xba, 0xdb, 0xd8, 0x1b, 0x36, 0x75, 0xb7, 0xef, 0xc9, 0xda, 0x34, 0x4a, 0xdb, 0x41, 0x98, 0xe8,
	0xae, 0x81, 0x50, 0xfe, 0x4c, 0x62, 0x07, 0x3d, 0x44, 0xea, 0x76, 0x87, 0xdc, 0x2f, 0x75, 0x21,
	0x26, 0x7b, 0xf0, 0x50, 0x29, 0x73, 0x95, 0x00, 0x2c, 0x18, 0x60, 0x09, 0x0e, 0x9e, 0xb3, 0xe6,
	0xa7, 0xb4, 0x52, 0xdf, 0x93, 0x1f, 0x4e, 0xeb, 0xef, 0x85, 0x41, 0xf6, 0x7d, 0x2e, 0x8d, 0x31,
	0x04, 0x0b, 0x26, 0x48, 0xd6, 0x50, 0x93, 0x40, 0x27, 0x18, 0x02, 0x69, 0xca, 0x80, 0xa9, 0xbb,
	0x6c, 0xdb, 0x42, 0xe3, 0x10, 0xa0, 0x85, 0x07, 0x20, 0x49, 0x27, 0x83, 0x66, 0x12, 0x0f, 0xf5,
	0xc0, 0xf6, 0x94, 0x49, 0x1d, 0xa8, 0xc4, 0xaf, 0x11, 0x90, 0xf0, 0x0f, 0x20, 0x68, 0xbe, 0x97,
	0x78, 0xc6, 0xb9, 0xdd, 0xf7, 0xe4, 0xfc, 0x1c, 0x65, 0x9f, 0xb0, 0x55, 0x0b, 0xa4, 0xda, 0x0e,
	0x34, 0x91, 0xa1, 0x13, 0xc8, 0x1a, 0xb8, 0x52, 0xcc, 0xcd, 0xce, 0x5b, 0x7d, 0x1a, 0xec, 0x9f,
	0xd7, 0xbf, 0xa3, 0x08, 0xc2, 0x3d, 0x10, 0xef, 0xea, 0xcd, 0x0e, 0x1c, 0xb4, 0x71, 0x6d, 0x3e,
	0x9b, 0xfa, 0x1a, 0x25, 0x0b, 0x52, 0xc3, 0xd8, 0x42, 0x1a, 0x24, 0x5f, 0xe0, 0x06, 0xb6, 0x7b,
	0x78, 0x95, 0x13, 0x12, 0x20, 0x52, 0x7a, 0xb6, 0xca, 0x6b, 0x71, 0x56, 0x11, 0xf1, 0x53, 0x04,
	0xc4, 0xa8, 0x63, 0x83, 0xdb, 0x86, 0x0f, 0x0d, 0xb6, 0x39, 0xe3, 0xb6, 0x99, 0xf4, 0x54, 0xe4,
	0x5f, 0x79, 0xaa, 0x38, 0x8f, 0xa7, 0x1e, 0x8f, 0x3c, 0x15, 0x0d, 0x6d, 0x6e, 0x68, 0x9d, 0xf2,
	0xa3, 0x2e, 0x2b, 0x43, 0xef, 0x88, 0x9f, 0x63, 0x20, 0x46, 0x6f, 0x19, 0x5a, 0x0b, 0xd7, 0x31,
	0x16, 0xac, 0x85, 0xeb, 0x18, 0x54, 0x68, 0xba, 0x64, 0xc1, 0x2b, 0xdb, 0x74, 0x89, 0xf0, 0x0e,
	0x24, 0x10, 0x6e, 0x77, 0x88, 0x9b, 0x89, 0x32, 0x43, 0x89, 0x61, 0xb7, 0x9f, 0xfa, 0x88, 0x6e,
	0x39, 0x67, 0xa6, 0xad, 0x19, 0x66, 0x1a, 0x50, 0xc5, 0xef, 0x11, 0x10, 0x67, 0xea, 0xcb, 0xf7,
	0xf9, 0x00, 0x44, 0x1d, 0x58, 0x63, 0xb9, 0xa5, 0x8b, 0xd7, 0xa7, 0x9f, 0x4f, 0xad, 0xc0, 0x1a,
	0x74, 0x20, 0x36, 0xe6, 0x1d, 0xfa, 0x32, 0x57, 0xa1, 0x64, 0xf1, 0x23, 0x0f, 0x52, 0x43, 0xed,
	0xb8, 0xfb, 0x17, 0x3a, 0x6b, 0xa0, 0xba, 0xf4, 0xeb, 0x53, 0x4b, 0x0e, 0x8c, 0xa7, 0x95, 0x8f,
	0x7e, 0x4b, 0xdc, 0xd1, 0x89, 0xc4, 0x1f, 0x9f, 0x48, 0xfc, 0xaf, 0x13, 0x89, 0xff, 0x72, 0x2a,
	0x71, 0xc7, 0xa7, 0x12, 0xf7, 0xe3, 0x54, 0xe2, 0xde, 0xac, 0x5f, 0x3c, 0xd9, 0xc1, 0x17, 0x47,
	0x35, 0xc1, 0xbe, 0x23, 0xb6, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x02, 0x1e, 0xb5, 0x84,
	0x08, 0x00, 0x00,
}

func (m *Workflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(m.Hash.Size()))
	n1, err := m.Hash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(m.Trigger.Size()))
	n2, err := m.Trigger.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Workflow_Trigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Trigger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(m.InstanceHash.Size()))
	n3, err := m.InstanceHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Key != nil {
		nn4, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.NodeKey)))
		i += copy(dAtA[i:], m.NodeKey)
	}
	return i, nil
}

func (m *Workflow_Trigger_TaskKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(len(m.TaskKey)))
	i += copy(dAtA[i:], m.TaskKey)
	return i, nil
}
func (m *Workflow_Trigger_EventKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(len(m.EventKey)))
	i += copy(dAtA[i:], m.EventKey)
	return i, nil
}
func (m *Workflow_Trigger_Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Trigger_Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Predicate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.Predicate))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Workflow_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintWorkflow(dAtA, i, uint64(m.InstanceHash.Size()))
	n5, err := m.InstanceHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.TaskKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.TaskKey)))
		i += copy(dAtA[i:], m.TaskKey)
	}
	return i, nil
}

func (m *Workflow_Edge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Edge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Src) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Src)))
		i += copy(dAtA[i:], m.Src)
	}
	if len(m.Dst) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Dst)))
		i += copy(dAtA[i:], m.Dst)
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintWorkflow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Workflow_Edge_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Edge_Input) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != nil {
		nn6, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Workflow_Edge_Input_Ref) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ref != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(m.Ref.Size()))
		n7, err := m.Ref.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Workflow_Edge_Input_Reference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workflow_Edge_Input_Reference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.NodeKey)))
		i += copy(dAtA[i:], m.NodeKey)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func encodeVarintWorkflow(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Workflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Hash.Size()
	n += 1 + l + sovWorkflow(uint64(l))
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = m.Trigger.Size()
	n += 1 + l + sovWorkflow(uint64(l))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	return n
}

func (m *Workflow_Trigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InstanceHash.Size()
	n += 1 + l + sovWorkflow(uint64(l))
	if m.Key != nil {
		n += m.Key.Size()
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	l = len(m.NodeKey)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}

func (m *Workflow_Trigger_TaskKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskKey)
	n += 1 + l + sovWorkflow(uint64(l))
	return n
}
func (m *Workflow_Trigger_EventKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventKey)
	n += 1 + l + sovWorkflow(uint64(l))
	return n
}
func (m *Workflow_Trigger_Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Predicate != 0 {
		n += 1 + sovWorkflow(uint64(m.Predicate))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}

func (m *Workflow_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = m.InstanceHash.Size()
	n += 1 + l + sovWorkflow(uint64(l))
	l = len(m.TaskKey)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}

func (m *Workflow_Edge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Src)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	return n
}

func (m *Workflow_Edge_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Workflow_Edge_Input_Ref) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ref != nil {
		l = m.Ref.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}
func (m *Workflow_Edge_Input_Reference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeKey)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	return n
}

func sovWorkflow(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkflow(x uint64) (n int) {
	return sovWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Workflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Workflow_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &Workflow_Edge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Trigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = &Workflow_Trigger_TaskKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = &Workflow_Trigger_EventKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &Workflow_Trigger_Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Trigger_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			m.Predicate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Predicate |= Workflow_Trigger_Filter_Predicate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Edge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Src = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Workflow_Edge_Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Edge_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Workflow_Edge_Input_Reference{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Workflow_Edge_Input_Ref{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workflow_Edge_Input_Reference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkflow
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkflow(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWorkflow
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkflow = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflow   = fmt.Errorf("proto: integer overflow")
)
